Параметры, которые необходимо настроить при запуске SonarQube:

1) vm.max_map_count
2) fs.file-max
3) File descriptors (ulimit -a; ulimit -Hn; ulimit -Sn)
   # ulimit = получение и установка пользовательских ограничений


    • vm.max_map_count    → больше либо равно 524288;
    • fs.file-max         → больше либо равно 131072;
    • пользователь, запускающий с SonarQube может открыть не менее 131072 файловых дескрипторов (ulimit -n);
    • пользо8ватель SonarQube может запустить не менее 8192 потоков ( = процессов) (ulimit -u)

# $ ulimit -n => open files
# $ ulimit -u => max user processes
# $ ulimit -a => Show all current limits


############
# Overview #
############

#by Dmitry Mamontov:
/*
На хосте это правится в sysсtl 
А в докер можно прокинуть ключиком
например docker run --ulimit nofile=5000:5000 <image-tag>
*/

********************
* vm.max_map_count *
********************
#(1): https://stackoverflow.com/questions/11683850/how-much-memory-could-vm-use
#(*): http://kernel.org/doc/Documentation/sysctl/vm.txt
#(2): "Elastic. Virtual memory": https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html
#(3): https://access.redhat.com/solutions/99913

[!] Этот файл содержит максимальное количество областей карты памяти, которые может иметь процесс.

  Области карты памяти используются
    ✓ как побочный эффект (side-effect) вызова
      -> malloc,
      -> непосредственно mmap, mprotect и madvise,
    ✓ а также при загрузке общих библиотек.

  Хотя большинству приложений требуется менее 1000 карт,
  некоторые программы (особенно отладчики malloc) могут потреблять их много.

[Пример:] до одной или двух карт за одно распределение.

(!) Значение по умолчанию равно 65536.

[снижение значения max_map_count:]
  ➜ может привести к проблематичному поведению приложений:
     := система будет возвращать ошибки нехватки памяти, когда процесс достигнет предела.
(+) Плюсом снижения этого лимита является то, что он может освободить lowmem для других целей ядра.

[повышение значения max_map_count:]
  ➜ может увеличить потребление памяти на сервере.

  НЕПОСРЕДСТВЕННОГО потребления памяти НЕ ПРОИСХОДИТ, так как оно будет использоваться только при запросе программы,
(!) НО это может позволить увеличить площадь приложения (application footprint) на сервере.


[Итог:]
  ✓ эта настройка ограничивает количество дискретно отображаемых областей памяти;
  ✓ сама по себе она не накладывает ограничений на размер этих областей или на объем памяти, используемой процессом.

#<задать требуемое значение:>

$ sysctl -w vm.max_map_count=65535
# == что тождественно ==
$ echo 65535 > /proc/sys/vm/max_map_count


[2]:> Виртуальная память
  По умолчанию Elasticsearch использует каталог mmapfs для хранения своих индексов.
  Ограничения операционной системы по умолчанию на количество mmap, скорее всего, слишком малы,
  => что может привести к исключениям, связанным с нехваткой памяти.
  В Linux можно увеличить ограничения, выполнив следующую команду от имени root:

--[COMMAND]--
sysctl -w vm.max_map_count=262144
---

[!] Чтобы установить это значение НА ПОСТОЯННОЙ ОСНОВЕ:
    -> обновите параметр vm.max_map_count в файле /etc/sysctl.conf.

(!) Для проверки:
  после перезагрузки выполните команду:

--[COMMAND]--
sysctl vm.max_map_count
---

  В пакетах RPM и Debian этот параметр будет настроен автоматически.
  # = Дополнительной настройки не требуется.

  Вы можете узнать ТЕКУЩЕЕ КОЛИЧЕСТВО mmap для запущенного процесса Elasticsearch с помощью следующей команды:
  #где $PID - идентификатор запущенного процесса Elasticsearch:

--[COMMAND]--
wc -l /proc/$PID/maps
---

*******************************************************************************
* Understanding and Optimizing vm.max_map_count for Elasticsearch Performance *
*******************************************************************************
#-> https://opster.com/guides/elasticsearch/capacity-planning/elasticsearch-vm-max-map-count/

  Для оптимальной работы Elasticsearch часто требуются определенные настройки на уровне системы.
  Одной из таких настроек является параметр ядра vm.max_map_count.
  Этот параметр имеет решающее значение для производительности и стабильности Elasticsearch,
  и понимание его роли может помочь вам оптимизировать развертывание Elasticsearch.

[*] Параметр vm.max_map_count обозначает максимальное количество областей карты памяти, которые может иметь процесс.
  Файлы с картами памяти - это метод, который используют программы для более быстрого ввода данных в память.

  Elasticsearch использует механизм под названием mmapfs (memory-mapped file system) для выполнения операций файлового ввода-вывода,
  который в значительной степени опирается на области, отображаемые в памяти.

[vm.max_map_count value]

  По умолчанию значение vm.max_map_count во многих системах равно 65536.
(!) Однако Elasticsearch рекомендует установить значение не менее 262144 для предотвращения исключений, связанных с нехваткой памяти.
  Это связано с тем, что Elasticsearch использует (!) большое количество файловых дескрипторов и областей, сопоставленных с памятью,
  (!) особенно в больших кластерах.

[!] Если количество областей, отображаемых в памяти, недостаточно, Elasticsearch может не запуститься или выйти из строя во время работы.

  Чтобы проверить текущее значение vm.max_map_count, вы можете использовать следующую команду:

--<COMMAND>--
sysctl vm.max_map_count
---
  Если значение меньше 262144, его следует увеличить.
  Чтобы установить значение vm.max_map_count равным 262144, вы можете использовать следующую команду:

--<COMMAND>--
sysctl -w vm.max_map_count=262144
---

  Однако это изменение НЕ ЯВЛЯЕТСЯ ПОСТОЯННЫМ и БУДЕТ СБРОШЕНО после перезагрузки системы.

[>] Чтобы сделать это изменение постоянным, необходимо обновить файл /etc/sysctl.conf.
  Добавьте или обновите следующую строку в файле:

--</etc/sysctl.conf>--
...
vm.max_map_count=262144
...
---

  После сохранения изменений и перезагрузки новое значение сохранится.

[!] Важно отметить, что увеличение vm.max_map_count
      + может улучшить стабильность Elasticsearch, НО
      - не обязательно повысит производительность.

  Оптимальное значение зависит от вашего конкретного случая использования и рабочей нагрузки.
  Если на узлах Elasticsearch часто не хватает памяти, возможно, эффективнее будет
    > добавить больше оперативной памяти
      или
    > уменьшить размер кучи
  !! а не увеличивать vm.max_map_count.

  Кроме того, хотя Elasticsearch рекомендует vm.max_map_count не менее 262144,
  (!) слишком высокое значение также может вызвать проблемы:
    (*) каждая область, отображаемая в памяти, потребляет ресурсы,
    (*) слишком большое их количество может привести к увеличению объема памяти и снижению производительности.

[->] Поэтому важно следить за производительностью системы и при необходимости корректировать значение vm.max_map_count.

***************
* fs.file-max *
***************
# "Linux Increase The Maximum Number Of Open Files / File Descriptors (FD)":
#-> https://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/

  = увеличить лимиты открытых файлов на Linux,
    которые обычный пользователь может иметь открытыми на протяжении одной сессии входа в систему

# Файл file-max (/proc/sys/fs/file-max) задает максимальное количество обработчиков файлов, которые будет выделять ядро Linux.
# Обычно мы настраиваем этот файл для увеличения количества открытых файлов,
# увеличивая значение /proc/sys/fs/file-max до чего-то разумного,
#(например 256 на каждые 4 Мбайт оперативной памяти)

"""
  В системах Linux файловый дескриптор (FD) - это дескриптор, используемый процессами для взаимодействия с
    открытыми файлами,
    сетевыми сокетами,
    пайпами
    и другими ресурсами ввода-вывода.
"""

<...>


**************************************************
* Установка пользовательских ограничений. ulimit *
**************************************************
# https://linux.die.net/man/3/ulimit
# https://www.man7.org/linux/man-pages/man3/ulimit.3.html

[!] Предупреждение:
    эта процедура УСТАРЕЛА.
    Вместо нее используйте
      getrlimit(2) {https://linux.die.net/man/2/getrlimit}
      setrlimit(2) {https://linux.die.net/man/2/setrlimit}
      и sysconf(3) {https://linux.die.net/man/3/sysconf}

# проверить программные значения ulimit:
$ ulimit -aS

# проверить аппаратные значения ulimit:
$ ulimit -aH

••••••••••••••••••••••••••••
• Редактирование значений: •
••••••••••••••••••••••••••••

1) для текущего сеанса (динамически):
#[!] выполнять команды от имени root:

--[COMMAND]--
sysctl -w vm.max_map_count=524288
sysctl -w fs.file-max=131072

ulimit -n 131072
ulimit -u 8192
---

2) установка значений на более длительное время:
#  => необходимо обновить файл:

#:>
/etc/sysctl.d/99-sonarqube.conf
  <или>
#:>
/etc/sysctl.conf

# (по своему усмотрению)
# чтобы они отражали эти значения.

---
# /etc/sysctl.conf = Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
---

#[!]  `/etc/sysctl.conf` = постоянная модификация

  Если пользователь, запускающий SonarQube (в данном примере sonarqube),
  не имеет права иметь не менее 131072 открытых дескрипторов,
  необходимо вставить эту строку в файл /etc/security/limits.d/99-sonarqube.conf 
  (или /etc/security/limits.conf по вашему усмотрению):
---
sonarqube   -   nofile   131072
sonarqube   -   nproc    8192
---
  Если для запуска SonarQube используется systemd:
---
[Service]
...
LimitNOFILE=131072
LimitNPROC=8192
...
---