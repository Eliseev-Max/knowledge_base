SonarQube
Installing SonarQube from the Docker image
(https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/install-the-server/#installing-sonarqube-from-the-docker-image)
{more: https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/install-the-server/}


Docker image SonarQube поддерживают работу 
  • на архитектуре amd64, 
  • на Apple Silicon на базе arm64.

Рекомендуется использовать: Docker Engine v. 20.10 и выше.

Шаги для первой установки:
  1. Создание следующих томов позволяет предотвратить потерю информации 
     - при обновлении до новой версии или 
	 - при переходе на более высокую редакцию:
       • sonarqube_data: содержит файлы данных, такие как встроенная база данных H2 и индексы Elasticsearch
       • sonarqube_logs: содержит журналы SonarQube о доступе, веб-процессе, CE-процессе и Elasticsearch
       • sonarqube_extensions: содержит все установленные вами плагины и, при необходимости, драйвер Oracle JDBC.

    Создать тома с помощью следующих команд:
      $ docker volume create --name sonarqube_data
      $ docker volume create --name sonarqube_logs
      $ docker volume create --name sonarqube_extensions

#‼ Убедиться, что мы используем именно volumes (созданные в приведённом выше примере),
#‼ а не bind mounts
#‼ Использование bind mounts не позволяет плагинам корректно заполняться.

  Пример для запуска с помощью docker-compose.yaml:
  # не факт, что правильный
sonarqube:
  ...
  volumes:
    - ${COMPOSE_BUILD_DIR}/sonarqube/data:/opt/sonarqube/data
    - ${COMPOSE_BUILD_DIR}/sonarqube/logs:/opt/sonarqube/logs
    - ${COMPOSE_BUILD_DIR}/sonarqube/extensions:/opt/sonarqube/extensions

    Драйверы для поддерживаемых баз данных (кроме Oracle) уже предоставлены.
    Если вы используете базу данных Oracle, то вам необходимо добавить драйвер JDBC в том sonar_extensions.
    (Если вдруг БД = Oracle, читать источник, п. 1a, b, c )

  3. Запустить образ со свойствами базы данных, заданными с помощью флага переменной окружения -e:
# Для справки:
# --env, -e  = установить переменные окружения
# --env-file = считать файл с переменными окружения
# Флаги -e, --env и --env-file используются для установки простых (не являющихся массивами) переменных окружения в запускаемом контейнере
# или для перезаписи переменных, определенных в Dockerfile запускаемого образа.
# Вы можете задать переменную и ее значение при запуске контейнера

## $ docker run --env VAR1=value1 --env VAR2=value2 ubuntu env | grep VAR
## VAR1=value1
## VAR2=value2
  
  docker run -d --name sonarqube \
    -p 9000:9000 \
    -e SONAR_JDBC_URL=... \
    -e SONAR_JDBC_USERNAME=... \
    -e SONAR_JDBC_PASSWORD=... \
    -v sonarqube_data:/opt/sonarqube/data \                # примонтировали ранее созданный volume
    -v sonarqube_extensions:/opt/sonarqube/extensions \    # к директории внутри контейнера
    -v sonarqube_logs:/opt/sonarqube/logs \
    <image_name>

# Громоздко и убого...
# То же самое, но через docker-compose.yml

  sonarqube:
    restart: always
    image: 'sonarqube:latest'
    depends_on:
      - master_service
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://database:5432/sonar
      SONAR_JDBC_USERNAME: ${SONARQUBE_DB_USER}
      SONAR_JDBC_PASSWORD: ${SONARQUBE_DB_PASSWORD}
    ports:
      - 9000:9000
    volumes:
      - 'sonarqube_data:/opt/sonarqube/data'
      - 'sonarqube_logs:/opt/sonarqube/logs'
      - 'sonarqube_extensions:/opt/sonarqube/extensions'

## SonarQube and PostgreSQL database ##
# /opt/sonarqube/conf/sonar.properties
#----- PostgreSQL 11 or greater
# By default the schema named "public" is used. It can be overridden with the parameter "currentSchema".
#sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube?currentSchema=my_schema


Для установок на базе docker переменные окружения заменяют все параметры, которые были заданы в свойствах.
Более подробную информацию см.:
https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/configure-and-operate-a-server/environment-variables/

Дополнительную информацию об установке и обновлении плагинов SonarQube внутри тома Docker можно найти на странице Install a plugin:
https://docs.sonarsource.com/sonarqube/latest/setup-and-upgrade/install-a-plugin/

# ‼ Важно!
  Если вы не собираетесь удалять БД и запускать новую при запуске образа, будьте осторожны, 
  [!] НЕ ИСПОЛЬЗУЙТЕ -v для docker-compose down, 
  [!] и будьте осторожны при выполнении таких команд, как docker system prune или docker volume prune;
      независимо от использования параметра external: true, тома вашей базы данных не сохранятся после первоначального запуска и выключения SonarQube
Пример файла Docker Compose .yml

version: "3"

services:
  sonarqube:
    image: sonarqube:community
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
  db:
    image: postgres:12
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:


Особенности работы SonarQube
  SonarQube запускает процесс Elasticsearch, и для процесса Elasticsearch будет использоваться та же учетная запись,
  под которой запущен сам SonarQube.
  Поскольку Elasticsearch не может быть запущен от имени root → SonarQube также не может быть запущен.
  Для запуска SonarQube необходимо выбрать какую-либо другую учетную запись, не являющуюся root-аккаунтом, предпочтительно специально предназначенную для этой цели


Установка плагинов SonarQube
  Существует 2 способа установки плагинов в SonarQube:
  1. Marketplace: В Community Edition можно автоматически устанавливать плагины с вкладки Administration > Marketplace.
     В коммерческих изданиях можно просматривать подключаемые модули в Marketplace,
	 но устанавливать и обновлять их необходимо вручную.
  
  2. Ручная установка:
     При использовании любой коммерческой версии SonarQube необходимо вручную устанавливать подключаемые модули.
	 Также вручную можно установить подключаемые модули,
	   → если у экземпляра SonarQube нет доступа в Интернет
	     или
	   → если устанавливаемый модуль отсутствует в магазине SonarQube Marketplace

  ‼ Плагины не предоставляются компанией SonarSource; поэтому вы устанавливаете их на свой страх и риск.
    Администратор SonarQube должен подтвердить этот риск в Marketplace перед установкой плагинов
	или при появлении запроса в SonarQube после установки плагина вручную.
	
	Устанавливать и обновлять плагины из Marketplace можно только в SonarQube CE.
	В коммерческих редакциях необходимо устанавливать и обновлять плагины вручную.
	
  Если ваш экземпляр имеет доступ в Интернет и вы подключены к SonarQube под пользователем с глобальным правом Administer System,
  вы можете найти Marketplace по адресу Administration > Marketplace.
  
  Отсюда:
    • Найдите плагин, который вы хотите установить.
    • Нажмите кнопку Install (Установить) и дождитесь завершения загрузки.

После завершения загрузки будет доступна кнопка Restart (Перезапустить), чтобы перезапустить ваш экземпляр. Перезапуск включит новый плагин. При перезапуске не будут учтены изменения в настройках sonar-properties.
	

Установка плагинов SonarQube внутри Docker
  При запуске SonarQube под Docker любой плагин, который вы хотите установить,
  должен быть также скопирован в том Docker, который вы создаете во время установки.
  
  <_Ручная установка плагина в докер-контейнер SonarQube_>
    
	(Имя docker container: sonarqube)

  Самый простой способ ручной установки плагина:
    1. Проверьте, существует ли данная версия плагина.
	  Выполните команду
	  $ docker exec sonarqube bash -c 'ls "$SONARQUBE_HOME"/extensions/plugins'
	  , чтобы увидеть весь список плагинов, устанавливаемых вручную.
    
	2. Если в списке присутствует предыдущая версия плагина, удалите ее с помощью:
	  $ docker exec sonarqube bash -c 'rm "$SONARQUBE_HOME"/extensions/plugins/<PLUGIN_JAR_FILE_NAME>'.
	  
    3. Установите новый плагин с помощью:
	  $ docker exec sonarqube bash -c 'wget <PLUGIN_JAR_URL> -P "$SONARQUBE_HOME"/extensions/plugins/'
    
	4. Перезапустите docker-контейнер SonarQube с помощью команды:
	  $ docker restart sonarqube

# -c string Если присутствует опция -c, то команды считываются из строки.
# Если после строки имеются аргументы, то они присваиваются позиционным параметрам, начиная с $0.

  ‼ Внимание:
    если вы следовали рекомендациям, изложенным на этой странице, то полученный плагин будет доступен в томе sonarqube_extensions,
	который вложен в папку <SONARQUBE_HOME>/extensions/plugins.

{Prerequisites and overview: https://docs.sonarsource.com/sonarqube/latest/requirements/prerequisites-and-overview/}
{Jenkins extension for SonarQube:https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/jenkins-extension-sonarqube/}

---
Prerequisites and overview (Необходимые условия и обзор)

  ‼ На машине, где планируется запуск SonarQube, должна быть возможность установки Java (Oracle JRE или OpenJDK)

< Требования к аппаратному обеспечению >

  Для эффективной работы небольшого экземпляра сервера SonarQube (индивидуального или для небольшой команды) требуется:
    • не менее 2 ГБ оперативной памяти и
    • 1 ГБ свободной оперативной памяти для ОС.
  
  Если вы устанавливаете экземпляр для большой команды или предприятия, обратите внимание на дополнительные рекомендации, приведенные ниже.
  
  ‼ Объем необходимого дискового пространства зависит от объема кода, который вы анализируете с помощью SonarQube.
    SonarQube должен быть установлен на жестких дисках с отличной производительностью чтения и записи.
      Наиболее важным является то, что в папке "data" хранятся индексы Elasticsearch,
    по которым при работе сервера будет выполняться огромное количество операций ввода-вывода.
    Поэтому производительность жестких дисков при чтении и записи будет оказывать большое влияние на общую производительность сервера SonarQube.

< Рекомендации по аппаратному обеспечению для предприятий >

  Для больших команд или корпоративных инсталляций SonarQube требуется дополнительное оборудование.
  На уровне предприятия мониторинг экземпляра SonarQube имеет большое значение и должен определять дальнейшую модернизацию оборудования по мере роста экземпляра.
  Начальная конфигурация должна включать как минимум:
    • 8 ядер, чтобы основная платформа SonarQube могла работать с несколькими рабочими вычислительными машинами.
    • 16 ГБ оперативной памяти.
  
  Дополнительные требования и рекомендации, касающиеся баз данных и Elasticsearch, см. в разделе "Рекомендации по аппаратному обеспечению"
  (https://docs.sonarsource.com/sonarqube/latest/requirements/hardware-recommendations/)

< Поддерживаемые платформы >
  - для работы SonarQube server требуется Java версии 17;
  - для работы SonarQube Scaner минимальная рекомендуемая версия - Java 17. Java 11 в качестве среды выполнения сканера устарела.

SonarQube способен анализировать исходные файлы Java любого типа, независимо от версии Java, которой они соответствуют.

  ‼ Подходящие версии PostgreSQL: 11...15

< Примечания к платформе >
  Если мы запускаем SonarQube на Linux, мы должны убедиться в том, что:
    • vm.max_map_count  → больше либо равно 524288;
    • fs.file-max         → больше либо равно 131072;
    • пользователь, запускающий с SonarQube может открыть не менее 131072 файловых дескрипторов;
    • пользователь SonarQube может открыть не менее 8192 потоков

  Мы можем увидеть эти значения, выполнив следующие команды:
    $ sysctl vm.max_map_count
    $ sysctl fs.file-max
    $ ulimit -n
    $ ulimit -u
  
  Вы можете задать их динамически для текущего сеанса, выполнив следующие команды от имени root:
    $ sysctl -w vm.max_map_count=524288
    $ sysctl -w fs.file-max=131072
    $ ulimit -n 131072
    $ ulimit -u 8192

  Чтобы установить эти значения на более длительное время, необходимо обновить файл /etc/sysctl.d/99-sonarqube.conf
  (или /etc/sysctl.conf по своему усмотрению), чтобы они отражали эти значения.

  Если пользователь, запускающий SonarQube (в данном примере sonarqube), не имеет права иметь не менее 131072 открытых дескрипторов,
  необходимо вставить эту строку в файл /etc/security/limits.d/99-sonarqube.conf (или /etc/security/limits.conf по вашему усмотрению):
---
sonarqube   -   nofile   131072
sonarqube   -   nproc    8192
---
  Если для запуска SonarQube используется systemd:
---
[Service]
...
LimitNOFILE=131072
LimitNPROC=8192
...
---