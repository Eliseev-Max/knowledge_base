NAME
       cntlm - authenticating HTTP(S) proxy with TCP/IP tunneling and acceleration

SYNOPSIS
       cntlm [ -AaBcDdFfgHhILlMPprSsTUuvw ] [ host1 port1 | host1:port1 ] ... hostN portN

DESCRIPTION
       Cntlm  is an NTLM/NTLM SR/NTLMv2 authenticating HTTP proxy.
	   It stands between your applications and the corporate proxy, adding NTLM authentication on-the-fly.
	   You can specify several "parent" proxies and Cntlm will try one after another until one works.
	   All auth'd  connections  are cached and reused to achieve high efficiency.
	   Just point your apps proxy settings at Cntlm, fill in cntlm.conf (cntlm.ini) and you're ready to do.
	   This is useful on Windows, but essential for non-Microsoft OS's. Proxy IP addresses can be specified via CLI (host1:port1 to  hostN:portN) or the configuration file.

       Another  option  is  to have cntlm authenticate your local web connections without any parent proxies. It can work in a stand-alone mode, just
       like Squid or ISA.
	   By default, all requests are forwarded to parent proxies, but the user can set a "NoProxy" list, a  list  of  URL  matching wild-card  patterns, that route between direct and forward modes. Cntlm can also recognize when all your corporate proxies are unavailable and switch to stand-alone mode automatically (and then back again). Aside from WWW and PROXY authentication, cntlm provides a useful  feature  enabling  users  migrate  their  laptops between work and home without changing proxy settings in their applications (using cntlm all the time).
       Cntlm also integrates transparent TCP/IP port forwarding (tunneling). Each tunnel opens a new listening socket on local machine and  and  for‐
       wards all connections to the target host behind the parent proxy. Instead of these SSH-like tunnels, user can also choose a limited SOCKS5 in‐
       terface.

       Core cntlm function had been similar to the late NTLMAPS, but today, cntlm has evolved way beyond anything any other application of this  type
       can offer. The feature list below speaks for itself. Cntlm has many security/privacy features like NTLMv2 support and password protection - it
       is possible to substitute password hashes (which can be obtained using -H) in place of the actual password or to enter the  password  interac‐
       tively  (on  start-up  or via "basic" HTTP auth translation). If plaintext password is used, it is automatically hashed during the startup and
       all traces of it are removed from the process memory.

       In addition to minimal use of system resources, cntlm achieves higher throughput on a given link. By  caching  authenticated  connections,  it
       acts  as  an  HTTP accelerator; This way, the 5-way auth handshake for each connection is transparently eliminated, providing immediate access  most of the time. Cntlm never caches a request/reply body in memory, in fact, no traffic is generated except for the exchange of auth  headers
       until  the  client  <->  server connection is fully negotiated. Only then real data transfer takes place.  Cntlm is written in optimized C and
       easily achieves fifteen times faster responses than others.

       An example of cntlm compared to NTLMAPS: cntlm gave avg 76 kB/s with peak CPU usage of 0.3% whereas with NTLMAPS it was avg 48 kB/s with  peak
       CPU  at  98%  (Pentium M 1.8 GHz). The extreme difference in resource usage is one of many important benefits for laptop use. Peak memory con‐
       sumption (several complex sites, 50 paralell connections/threads; values are in KiB):

              VSZ   RSS CMD
             3204  1436 ./cntlm -f -c ./cntlm.conf -P pid
           411604  6264 /usr/share/ntlmaps/main.py -c /etc/ntlmaps/server.cfg

       Inherent part of the development is profiling and memory management screening using Valgrind. The source distribution contains a  file  called
       valgrind.txt, where you can see the report confirming zero leaks, no access to unallocated memory, no usage of uninitialized data - all traced
       down to each instruction emulated in Valgrind's virtual CPU during a typical production lifetime of the proxy.

OPTIONS
       Most options can be pre-set in a configuration file. Specifying an option more than once is not an error, but cntlm ignores all occurences ex‐
       cept  the  last  one.  This does not apply to options like -L, each of which creates a new instance of some feature. Cntlm can be built with a
       hardcoded configuration file (e.g. /etc/cntlm.conf), which is always loaded, if possible. See -c option on how to override some or all of  its
       settings.

       Use -h to see available options with short description.
