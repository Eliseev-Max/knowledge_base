Translated from:
https://manpages.ubuntu.com/manpages/jammy/man1/cntlm.1.html

more:
https://gahcep.github.io/blog/2012/08/14/using-cntlm-http-proxy/
https://linux.die.net/man/1/cntlm

---
Cntlm - это HTTP-прокси с аутентификацией NTLM/NTLM SR/NTLMv2.
Он стоит между вашими приложениями и корпоративным прокси, добавляя NTLM-аутентификацию "на лету".
Вы можете указать несколько "родительских" прокси, и Cntlm будет пробовать один за другим, пока один не сработает.
Все аутентифицированные соединения кэшируются и используются повторно для достижения высокой эффективности.
Просто направьте настройки прокси вашего приложения на Cntlm, заполните cntlm.conf (cntlm.ini) и все готово.
Это полезно для Windows, но необходимо для не-Microsoft OS.
IP-адреса прокси могут быть указаны через CLI (host1:port1 to hostN:portN) или в конфигурационном файле.

Другой вариант - заставить cntlm аутентифицировать ваши локальные веб-соединения без каких-либо родительских прокси.
Он может работать в автономном режиме, как Squid или ISA.
По умолчанию все запросы направляются на родительские прокси, но пользователь может задать список "NoProxy" - список URL-адресов, соответствующих шаблонам wild-card, которые позволяют переключаться между direct и forward режимами.
Cntlm также может распознавать, когда все ваши корпоративные прокси недоступны, и автоматически переключаться в автономный режим (а затем обратно).
Помимо WWW и PROXY аутентификации, cntlm предоставляет полезную функцию, позволяющую пользователям перемещать свои ноутбуки между работой и домом без изменения настроек прокси в своих приложениях (постоянно используя cntlm).
Cntlm также интегрирует прозрачное перенаправление портов TCP/IP (туннелирование).
Каждый туннель открывает новый прослушивающий сокет на локальной машине и перенаправляет все соединения на целевой хост за родительским прокси.
Вместо этих SSH-подобных туннелей пользователь также может выбрать ограниченный интерфейс SOCKS5.

Основная функция cntlm была похожа на поздний NTLMAPS, но сегодня cntlm развился намного больше, чем может предложить любое другое приложение такого типа.
Приведенный ниже список функций говорит сам за себя.
Cntlm имеет множество функций безопасности/приватности, таких как поддержка NTLMv2 и защита паролем - 
можно подставлять хэши паролей (которые можно получить с помощью -H) вместо фактического пароля или вводить пароль интерактивно 
(при запуске или через "базовую" трансляцию HTTP-аута).
Если используется пароль в открытом виде, он автоматически хэшируется при запуске и все его следы удаляются из памяти процесса.

Помимо минимального использования системных ресурсов, cntlm обеспечивает более высокую пропускную способность на данном канале.
Кэшируя аутентифицированные соединения, он действует как HTTP-ускоритель;
Таким образом, прозрачно устраняется 5-стороннее рукопожатие аутентификации для каждого соединения, обеспечивая немедленный доступ большую часть времени.
Cntlm никогда не кэширует тело запроса/ответа в памяти, фактически, не генерируется никакого трафика, кроме обмена заголовками аутентификации, 
пока соединение клиент <-> сервер не будет полностью согласовано.
Только после этого происходит реальная передача данных.
Cntlm написан на оптимизированном языке C и легко достигает в пятнадцать раз более быстрых ответов, чем другие.

Пример cntlm по сравнению с NTLMAPS:
  cntlm выдал avg 76 kB/s с пиковым использованием CPU 0.3%,
  в то время как с NTLMAPS это было avg 48 kB/s с пиковым CPU 98% (Pentium M 1.8 GHz).
  Крайняя разница в использовании ресурсов является одним из многих важных преимуществ при использовании ноутбука.
  
Пиковое потребление памяти (несколько сложных сайтов, 50 паралельных соединений/потоков; значения указаны в КиБ):

VSZ RSS CMD
      3204 1436 ./cntlm -f -c ./cntlm.conf -P pid
    411604 6264 /usr/share/ntlmaps/main.py -c /etc/ntlmaps/server.cfg

Неотъемлемой частью разработки является профилирование и скрининг управления памятью с помощью Valgrind.
Исходный дистрибутив содержит файл valgrind.txt, где вы можете увидеть отчет, подтверждающий
  • нулевые утечки,
  • отсутствие доступа к нераспределенной памяти,
  • отсутствие использования неинициализированных данных
  - все прослежено до каждой инструкции, эмулированной в виртуальном процессоре Valgrind во время типичного времени жизни прокси.

#########################
# Некоторые опции cntlm #
#########################

Опция -M <testurl>
  Запустить магическое определение диалекта NTLM.
  В этом режиме cntlm пробует некоторые известные рабочие пресеты против вашего прокси.
  Запросы выполняются для указанного testurl, причем самые сильные хэши идут первыми.
  По окончании выводятся настройки для наиболее безопасной установки.
  Хотя обнаружение подскажет вам, какие и как использовать опции Auth, Flags и password-hash,
  вы должны сначала настроить хотя бы свои учетные данные и адрес прокси.
  Вы можете использовать -I для интерактивного ввода пароля

Опция -S
  -S <max_size_in_kb>  (ISAScannerSize)

Включает плагин для прозрачной работы с ужасным сканером ISA AV, который возвращает интерактивную HTTP-страницу 
(отображающую прогресс сканирования) вместо файла/данных, которые вы запросили, каждый раз, когда ему хочется просканировать содержимое.
Такое самонадеянное поведение ломает все автоматические загрузчики, программы обновления и практически КАЖДОЕ приложение, полагающееся на загрузку (например, wget, apt-get).

Параметр max_size_in_kb позволяет вам выбрать максимальный размер загрузки, который вы хотите обрабатывать плагином (см. ниже, зачем это нужно).
Если размер файла больше этого параметра, cntlm переадресует вам интерактивную страницу, фактически отключая плагин для этой загрузки.  Ноль означает отсутствие ограничений. Используйте -G/ISAScannerAgent для определения приложений, для которых max_size_in_kb следует игнорировать (принудительно отключая плагин).
Он работает на основе соответствия заголовку User-Agent и необходим, например, для wget, apt-get и yum, которые потерпят неудачу, если ответом будет какая-то HTTP-страница вместо запрошенных данных.

Как это работает: клиент запрашивает файл, cntlm обнаруживает фиговый ответ ISA и ждет секретной ссылки на кэш ISA, которая приходит не раньше, чем файл будет загружен и просканирован ISA.
Только после этого cntlm может сделать второй запрос на настоящий файл и переслать его вместе с правильными заголовками клиенту.
Клиент не теряет времени в ожидании, поскольку cntlm периодически посылает дополнительный заголовок "keepalive", но пользователь может занервничать, не видя движения индикатора выполнения.
Конечно, это чисто психологический вопрос, нет никакой разницы, запрашивает ли cntlm или ваш браузер сканированный файл - вы должны ждать, пока ISA выполнит свою работу, а затем загружать.
Вы просто ожидаете увидеть движение индикатора прогресса, что и делает страница ISA: она показывает HTML обратный отсчет.

Если плагин по какой-то причине не может разобрать интерактивную страницу (неизвестное форматирование и т.д.), он завершает работу, и страница пересылается вам - она никогда не "теряется".

Заголовок keepalive называется ISA-Scanner и показывает прогресс ISA, например:

    HTTP/1.1 200 OK
    ISA-Scanner: 1000 из 10000
    ISA-Scanner: 2000 из 10000
    ...
