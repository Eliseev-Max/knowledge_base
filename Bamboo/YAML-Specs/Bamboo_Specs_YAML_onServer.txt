Документация по Bamboo ver. 6.3.0:
[https://docs.atlassian.com/bamboo-specs-docs/6.3.0/specs-yaml.html#job-requirements]

Bamboo Specs YAML, хранящиеся на сервере Bitbucket

Для начала ознакомимся с спецификацией к Bamboo
(https://confluence.atlassian.com/bamboo0605/bamboo-specs)
Bamboo Specs = конфигурация в виде кода (configuration as code).
Сохранение конфигурации плана сборки в виде кода позволяет:
	► упростить процесс автоматизации;
	► упростить отслеживание изменений и процедуру проверки.
	
Содержимое пакета:
	♦ Фишки Bamboo
		• библиотека Bamboo Specs с API для записи конфигурации в виде кода;
		• плагин Bamboo Specs Runner Maven для упрощения развертывания плана;
	
	♦ Высокоуровневый язык для настройки (конфигурирования)
		► для большей функциональности используется простой язык описания планов на основе Java.
		+ подсветка и проверка синтаксиса;
		+ автозавершение кода;
		+ возможность проверки (тестового прогона) при компиляции и запуске оффлайн-тестов;
		+ доступны функции языка высокого уровня: модульность и библиотеки
		+ интуитивная понятность языка даже для пользователей, не знакомых с Java
	
	♦ Конфигурация на выбранном вами языке
		Библиотека Bamboo Specs написана на Java → можно писать свой код на любом языке JVM высокого уровня,
		который взаимодействует с Java:
		• Groovy
		• Scala
		• Kotlin

Что понимается под понятием "Конфигурация как код"
	(https://confluence.atlassian.com/bamboo0605/bamboo-specs/what-is-configuration-as-code)

Версии изменений
	• Вы можете хранить код конфигурации в системе контроля версий, такой как Git, 
	  чтобы видеть, кто и когда внёс изменения в вашей среде Bamboo.
	• Вы можете использовать теги, чтобы отметить версии, которые были опубликованы в Bamboo.
	• Вы можете использовать ветки, чтобы изолировать изменения в процессе разработки и работать в параллельных потоках,
	  не затрагивая ваш рабочий экземпляр Bamboo.
	  
Необходимый для создания плана минимум
	Достаточно всего 10 строк, чтобы создать план в yaml.
	Элементы, которые необходимо и достаточно указать:
	  • ключ проекта, в котором будет создан план;
	  • ключ плана;
	  • имя плана;
	  • список скриптов для выполнения

Пример:
	
---															# обозначение начала документа
project:													# объявление проекта (корневой объект)
  key: DRAGON												# ключ проекта
  plan:														# объявление плана (вложенный объект)
    key: SLAYER												# ключ плана
    name: Dragon Slayer Quest								# имя плана
stages:														# объявление этапов (stages)
  - jobs:													# значение ключа stages = массив из задач (джоб)
      - scripts:											# в каждую джобу может входить несколько скриптов
          - echo 'Going to slay the red dragon, watch me'	#
...

Определение требований к агенту сборки:
	♦ если одну и ту же сборку запускают на разных платформах;
	♦ если одну и ту же сборку запускают в разных версиях окружения для проверки матрицы совместимости.

Четыре типа возможностей, которые можно указать в требованиях к джобе:
	1. возможности выполнения: определяют внешние программы, которые может вызывать Bamboo (напр. Ant, Maven, MSBuild)
	2. возможности JDK: определяют версии JDK, которые будут использованы в job-е или task-е
	3. пользовательские возможности: для управления тем, какие задания будут создаваться конкретным агентом.
	   Пример: если сборки для определенного задания должны выполняться только в среде Windows,
	           можно создать: operating.system.Windows для соответствующего агента (агентов) 
			   и указать ее в качестве требования для этого задания.

Артефакты
	Определения артефактов используются, чтобы указать, какие артефакты следует оставить при сборке, и настраиваются для отдельных заданий.
	Артефакты неявно распределяются между заданиями или этапами плана.
	Общие артефакты также могут использоваться в разных планах или проектах развертывания.
	Для планов, созданных с помощью спецификаций YAML, артефакты неявно загружаются на последующих этапах.

Интерпретатор скриптов
	Можно указать, какой интерпретатор использовать
[ Пример:
stages:
  - jobs:
      - scripts:
          - '#!/bin/bash'				# строка shebang
          - echo 'Execute it with bash'
        interpreter: shell				# скрипт будет запускаться интерпретатором, выбранным на основе строки shebang скрипта.
]

Несколько работ (jobs)
	Задание Bamboo — это отдельная единица сборки в плане.
	Одна или несколько работ могут быть организованы в одну или несколько стадий (stages).
	Все задания на этапе могут выполняться одновременно, если доступно достаточное количество агентов Bamboo.
	!!! Каждый план должен содержать хотя бы одно задание.
	
	Функционал джоб, создаваемых с помощью YAML Specs:
		• Извлекают исходный репозиторий и обрабатывают серию из одного или нескольких сценариев и задач
		  тестового синтаксического анализатора (test parser tasks), которые выполняются последовательно на одном и том же агенте.
		• Определяют артефакты, которые будет создавать сборка.
		  Артефакты являются общими неявно, что означает, что они могут быть загружены другими этапами, планами и проектами развертывания.
		• Использует артефакты, созданные на предыдущих этапах.

Несколько этапов (stages)
	Этапы группируют (или «сопоставляют») задания с отдельными шагами в процессе построения плана.
	Этап:
	  • должен иметь по меньшей мере одну джобу;
	  • параллельно обрабатывает свои задания на нескольких агентах (при наличии)
	  • должен успешно завершить все свои джобы, прежде чем можно будет запустить следующий этап в плане
	  • может генерировать артефакты, которые будут скачаны для использования следующим этапом
	  • каждый план должен содержать по меньшей мере один этап.
	  
	
	
Enabling repository-stored Bamboo Specs (ver. 6.5.0)
[https://confluence.atlassian.com/bamboo0605/bamboo-specs/enabling-repository-stored-bamboo-specs]

Tutorial: Bamboo Specs YAML stored in Bitbucket Server (ver. 6.5.0)
[https://confluence.atlassian.com/bamboo0605/bamboo-specs/bamboo-yaml-specs/tutorial-bamboo-specs-yaml-stored-in-bitbucket-server]