Постигая YAML in Specs
[https://docs.atlassian.com/bamboo-specs-docs/6.9.0/specs.html?yaml#understanding-yaml-in-specs]
https://confluence.atlassian.com/bamboo/tutorial-bamboo-specs-yaml-stored-in-bitbucket-server-941616819.html
https://docs.atlassian.com/bamboo-specs-docs/6.9.0/specs.html?yaml#version-information

Сериализация - процесс перевода структуры данных в последовательность (поток) байтов для сохранения или передачи (в память, БД или файл).

YAML - это язык сериализации данных, предназначенный для непосредственной записи и чтения людьми. (=понятен для записи и чтения).
Это строгое надмножество JSON с добавлением синтаксически значимых новых строк и отступов (как в Python)

Что сближает YAML с Python:
	- наличие синтаксически значимых отступов и новых строк

Что отличает YAML от Python:
	- YAML не допускает использование буквенных символов табуляции для отступов.
	
Расположение YAML Spec файла bamboo.yaml
	/bamboo-spec/bamboo.yaml
	[your_repo]/bamboo-specs/bamboo.yaml
	
	Каждый YAML Spec файл должен находиться внутри каталога /bamboo-spec/ в корне репозитория.
	bamboo.yaml - корневой файл для всех определений.
	
YAML разделен на документы.
Документы — это разделы внутри того же файла, который содержит определения спецификаций YAML.
Один и тот же файл может содержать несколько документов.
Каждый документ YAML начинается с: ---
Bamboo Specs будет оценивать каждый документ как самостоятельную часть.
Каждый якорь, включение (include) и ключ, используемые в документе, являются локальными для него.
Как это выглядит:
---
# Plan definition
version: 2
# ...

---
# Second plan definition
version: 2
# ...

---
# ...

► Форматы
Bamboo Specs принимает следующие определения формата документов: 
	
	• Планы (Plans)
	• Проекты развёртывания (Deployment Projects)
	• Plan Permissions
	• Разрешения развёртывания (Deployment Permissions)

Bamboo понимает каждый из этих форматов в отдельных документах.

# Примечание:
#
# Вы можете организовать свои репозитории, чтобы они содержали различные комбинации спецификаций YAML.
# Например, у вас может быть один репозиторий, в котором размещается ваш исходный код вместе со спецификациями YAML,
# другой репозиторий, содержащий только спецификации YAML для развертывания этого кода, 
# и третий репозиторий, в котором хранятся только разрешения.
# В этом сценарии у вас может быть больше контроля над тем, кто сможет изменять различные части ваших определений 
# в спецификациях, более строгие ограничения для разрешений, но предоставляющие всем разработчикам в компании доступ к планам.

Включения (Includes)

	YAML Specs расширяет YAML с помощью тега !include 'file'. Тег include  расширяется до содержимого файла, в котором он размещен.
	include могут быть использованы в разных случаях:
		• разделить свои определения по разным файлам;
		• повторно использовать отдельные части конфигурации для создания различных определений;
		• определить переменные или другие одиночные значения
	
	Тег include выглядит следующим образом:
		!include 'путь к файлу'				# относительно папки /bamboo-specs

{ Пример включения нескольких планов в главный YAML-файл:
	# bamboo.yaml
	---							# Начало первого документа
	!include 'planA.yaml'		# включаем в документ структуру данных из файла planA.yaml
	---							# Начало второго документа
	!include 'planB.yaml'		# включаем в документ структуру данных из файла planB.yaml


	# planA.yaml
	---
	version: 2
	# ...


	# planB.yaml
	---
	version: 2
	# ...
}

	Путь к файлу указывается относительно папки /bamboo-specs и не может указывать на файлы за пределами этой папки.
	Кроме того, принимаются только файлы в формате .yaml или .yml

Повторное использование небольших частей, таких как определения задач или сред, в нескольких определениях:

	# bamboo.yaml
	---
	version: 2
	plan:
	  key: BUILD-WEB
	# ...
	Build job: !include 'builds/build-job.yaml'
	---
	version: 2
	plan:
	  key: BUILD-COR
	# ...
	Build: !include 'builds/build-job.yaml'


	# builds/build-job.yaml
	tasks:
	  - 
		script:
		  interpreter: /bin/sh
		  scripts:
			- echo 'npm run start' > script.sh
			- echo 'Built' > output.log
	
Переменные (Якоря)

	В YAML вы можете определить якоря, которые работают, как переменные.
		key: &plan-key ROCKET
	Позже в этом эе документе вы сможете сослаться на ключ плана, используя:
		*plan-key
	
	Пример:
	# Якоря поддерживают любой тип YAML
	---
	version: 2

	plan: &plan-map
	  project-key: MARS
	  key: P11P

	stages:
	  -
		Primary build stage: &jobs-set
		  - Build pi
		  - Test pi
		  - Run pi
	  -
		Second pi phase: *jobs-set

ОГРАНИЧЕНИЯ YAML-файлов при использовании в формате "configuration as code"
	1. Повторное использование:
	        повторное использование ваших учетных данных, репозиториев проблематично
	2. Проверка:
		    Нет инструментов, поддерживающих проверку
	3. Нет интеграции с инструментами:
		    Контекстно-зависимая документация
	