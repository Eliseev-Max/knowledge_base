Разбор структуры YAML-файла
[https://learnxinyminutes.com/docs/yaml/]

Самоучитель по YAML:
[https://itsecforu.ru/2021/11/17/%F0%9F%93%9C-%D1%81%D0%B0%D0%BC%D0%BE%D1%83%D1%87%D0%B8%D1%82%D0%B5%D0%BB%D1%8C-%D0%BF%D0%BE-yaml-%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81-yaml/]
---  # document start

# Комментарии в YAML выглядят так

################
# SCALAR TYPES #
################

# Нашим корневым объектом (продолжающимся на весь документ) будет карта,
# эквивалентная словарю, хэшу или объекту на других языках..

key: value
another_key: Another value goes here.
a_number_value: 100
scientific_notation: 1e+12

# Число 1 будет интерпретироваться как число, а не логическое значение.
# Если вы хотите, чтобы оно было интерпретировано как логическое значение,
# используйте true

boolean: true
null_value: null
key with spaces: value
# Ключ с пробелами: значение
# Обратите внимание, что строки не нужно заключать в кавычки.
# Однако они могут быть.

however: 'Строка, заключённая в кавычки.'

'Keys can be quoted too.': "Useful if you want to put a ':' in your key."
# ('Ключи тоже могут быть заключены в кавычки':"Полезно, если вы хотите поместить ':' в ваш ключ")
single quotes: 'have ''one'' escape pattern'
# 'одиночные кавычки': 'имеют''один'' паттерн выхода/перехода'

double quotes: "have many: \", \0, \t, \u263A, \x0d\x0a == \r\n, and more."
# (двойные кавычки: "имеют много: \", \0, \t, \u263A, \x0d\x0a == \r\n и более.")

# Символы UTF-8/16/32 должны быть закодированы
Superscript two: \u00B2

# Многострочные строки могут быть записаны как 'литеральный блок' ('literal block') (используя |),
# или как свёрнутый блок ('folded block') (используя '>').

literal_block: |
    Весь этот блок текста будет значением ключа literal_block,
    с сохранением разрывов строк. 

    Литерал продолжается до тех пор, пока не будет снят отступ (пока не выровняется), а начальный отступ равен
    удалён (stripped).
		
	    Любые строки с бОльшим отступом сохраняют остальную часть своего отступа
	    эти строки будут иметь отступ в 4 пробела

folded_style: >
	Весь этот блок текста будет значением 'свёрнутого стиля' ('folded_style'),
	но на этот раз все новые строки будут заменены одиночным пробелом 
    This entire block of text will be the value of 'folded_style', but this
    time, all newlines will be replaced with a single space.

    Пустые строки, как и выше, преобразуются в символ новой строки.
		Строки с большим отступом также сохраняют свои новые строки -
        этот текст появится на двух строках. 


####################
# COLLECTION TYPES #
####################

# Вложенность использует отступ. Отступ в 2 пробела предпочтителен (но не обязателен).
a_nested_map:					# (вложенная карта)
  key: value
  another_key: Another Value
  another_nested_map:
    hello: hello

# Карты не обязательно должны иметь строковые ключи.
0.25: a float key

# Ключи также могут быть составными, как многострочные объекты
# Мы используем ? за которым следует пробел, чтобы указать начало сложного ключа

? |							# Обозначили начало сложного (составного) ключа 
  This is a key				# Начало ключа
  that has multiple lines
: and this is its value		# А это значение

# YAML также позволяет отображать последовательности со сложным синтаксисом ключей.
# Некоторые языковые парсеры могут "жаловаться"
# Пример
? - Manchester United
  - Real Madrid
: [2001-01-01, 2002-02-02]

# Последовательности (эквивалентные спискам или массивам) выглядят так
# (обратите внимание, что '-' считается отступом):

a_sequence:
  - Item 1
  - Item 2
  - 0.5  # последовательности могут содержать разные типы данных.
  - Item 4
  - key: value
    another_key: another_value
  -
    - This is a sequence			# Это последовательность
    - inside another sequence		# внутри другой последовательности
  - - - Nested sequence indicators	# Вложенные индикаторы последовательности
      - can be collapsed			# можно свернуть 

# Поскольку YAML является надмножеством JSON, вы можете также писать карты и последовательности в JSON-стиле
# Since YAML is a superset of JSON, you can also write JSON-style maps and sequences:
json_map: {"key": "value"}
json_seq: [3, 2, 1, "takeoff"]
and quotes are optional: {key: [3, 2, 1, takeoff]}

#######################
# EXTRA YAML FEATURES #
#######################

# YAML также имеет удобную функцию под названием «якоря», которая позволяет
# легко дублировать содержимое в документе.
# Оба этих ключа будут иметь одинаковое значение:

anchored_content: &anchor_name This string will appear as the value of two keys.
other_anchor: *anchor_name		## Эта строка будет отображаться как значение двух ключей. 

# Якоря могут быть использованы для дублирования/наследования свойств
base: &base
  name: Everyone has same name

# The regexp << is called Merge Key Language-Independent Type. It is used to
# indicate that all the keys of one or more specified maps should be inserted
# into the current map.

foo:
  <<: *base
  age: 10

bar:
  <<: *base
  age: 20

# foo and bar would also have name: Everyone has same name

# YAML also has tags, which you can use to explicitly declare types.
explicit_string: !!str 0.5
# Some parsers implement language specific tags, like this one for Python's
# complex number type.
python_complex_number: !!python/complex 1+2j

# We can also use yaml complex keys with language specific tags
? !!python/tuple [5, 7]
: Fifty Seven
# Would be {(5, 7): 'Fifty Seven'} in Python

####################
# EXTRA YAML TYPES #
####################

# Strings and numbers aren't the only scalars that YAML can understand.
# ISO-formatted date and datetime literals are also parsed.
datetime: 2001-12-15T02:59:43.1Z
datetime_with_spaces: 2001-12-14 21:59:43.10 -5
date: 2002-12-14

# The !!binary tag indicates that a string is actually a base64-encoded
# representation of a binary blob.
gif_file: !!binary |
  R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5
  OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+
  +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC
  AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=

# YAML also has a set type, which looks like this:
set:
  ? item1
  ? item2
  ? item3
or: {item1, item2, item3}

# Sets are just maps with null values; the above is equivalent to:
set2:
  item1: null
  item2: null
  item3: null

...  # document end

Работа с YAML в Python:
[https://pyyaml.org/wiki/PyYAMLDocumentation]