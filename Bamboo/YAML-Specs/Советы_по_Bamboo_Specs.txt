
1. Учитесь, экспортируя существующие планы и развертывания Bamboo в Specs

Если у вас уже есть экземпляр Bamboo с планами и развертываниями, экспорт ускорит процесс обучения, а также упростит миграцию. Это идеальная отправная точка, если вы мало что знаете о Bamboo Specs или о конфигурации как коде в целом.

Ознакомьтесь с документацией о том, как экспортировать существующие конфигурации Bamboo в Specs. В коде, сгенерированном во время экспорта, вы увидите, как структура Bamboo представлена ​​различными выделенными классами Java и вызовами методов.

Если у вас еще нет планов Bamboo, и вы только начинаете свое путешествие с Bamboo, функция экспорта все еще может пригодиться!
Прежде всего, вы можете попробовать создать план через пользовательский интерфейс и экспортировать его, чтобы получить работающую кодовую базу. Кроме того, его можно использовать, чтобы помочь вам понять, как настроить определенные области Bamboo с помощью кода. Если вы знаете, куда перейти в пользовательском интерфейсе, чтобы применить изменения, но не представляете, как отразить эти изменения в мире спецификаций, попробуйте применить их в браузере, а затем экспортируйте свою конфигурацию.

Обратите внимание, однако, что любой экспортированный контент ни в коем случае не будет выглядеть так, как вы хотите, в окончательной форме ваших спецификаций. Это просто то, с чего можно начать. Сгенерированная спецификация будет работать, поэтому ее можно будет немедленно зафиксировать в репозитории VCS для использования с хранимыми в репозитории спецификациями. Оттуда это вопрос улучшения кода и рефакторинга.

2. Проверьте свои характеристики!

Одна из сильных сторон спецификаций Bamboo Java заключается в том, что автономная проверка доступна бесплатно. Локальная проверка позволяет вам писать более содержательные модульные тесты для вашего контента. Простое создание плана или проекта развертывания выполняет большую часть проверок. Кроме того, тестирование вашей конфигурации дает такие возможности, как согласованность в масштабах всей команды или компании. Тесты также могут помочь вам проверить совместимость с политиками и структурами организации.

Однако есть кое-что, о чем вам нужно знать. Поскольку локальная проверка выполняется в автономном режиме, некоторые ограничения Bamboo не будут проверяться. Нет 100% гарантии, что планы, прошедшие такие тесты, будут впоследствии приняты Bamboo. Тем не менее, многие типичные ошибки и ошибки программистов можно обнаружить на ранней стадии.

3. По возможности храните Bamboo Specs и свой код сборки вместе*

* Могут применяться положения и условия (подмигивание)

Это важное решение: где хранить Bamboo Specs. Мой совет — держите ваш код и определение CI вместе, так как они тесно связаны. Считайте Bamboo Specs файлом Makefile более высокого уровня для вашего кода. Ваши источники, а также информация «как это собрать», «как это правильно протестировать» и даже «как это развернуть» должны быть размещены вместе.

Тем не менее, бывают случаи, когда вы захотите отделить свои спецификации Bamboo от исходной базы. Чтобы привести некоторые примеры, один репозиторий, содержащий Bamboo Specs, может работать с несколькими репозиториями исходного кода, и ни один из них не может технически «владеть» определением конвейера сборки. Или просто более эффективно поддерживать разрешения для одного репозитория VCS.

В конечном счете, вы должны стремиться к объединению источников и спецификаций, но не форсируйте это. Сложные конвейеры сборки обычно довольно уникальны, поэтому трудно сказать, какой вариант объективно лучше.

4. Постепенное извлечение общей конфигурации сборки в общие компоненты.

При переносе инфраструктуры сборки на Bamboo Specs вы обнаружите все больше и больше сходства конфигураций в ваших планах сборки и развертываниях. Совместное поведение не нужно повторять, а избыточность можно удалить. Это одно из многих преимуществ определения планов с помощью кода! Этот подход позволяет извлекать общую логику во вспомогательные/служебные классы и использовать шаблоны программирования, такие как фабрики или фабричные методы.

Совместное использование фрагментов конфигурации в планах снижает затраты на ремонтопригодность кода. Это также упрощает добавление нового контента в спецификации сборки в будущем. Оба фактора имеют решающее значение для масштабируемой инфраструктуры сборки.

Приведу пример: команда разработчиков Bamboo обнаружила очень распространенную схему тестирования плагинов на базе ядра Bamboo. Задачи, которые выполнялись для каждого плагина, выглядели практически одинаково. Именно тогда мы решили создать помощников и утилиты для них. В настоящее время определение подключаемого модуля для сборки и тестирования на Bamboo требует добавления всего нескольких строк кода с несколькими доступными параметрами конфигурации. Ошибка, обнаруженная для одного плагина, будет автоматически исправлена ​​для всех. Общие изменения конфигурации CI? Без проблем! Применяется повсеместно.

При создании планов и тестировании Bamboo мы разделяем логику для задач, проектов, планов, возможностей, переменных, артефактов, уведомлений и многого другого!