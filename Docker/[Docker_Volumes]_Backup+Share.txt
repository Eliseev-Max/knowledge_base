Back Up and Share Docker Volumes

[sources:]
  1) "Back Up and Share Docker Volumes with This Extension": https://www.docker.com/blog/back-up-and-share-docker-volumes-with-this-extension/
  2) "4 Easy Ways to Backup Docker Volumes": https://dev.to/code42cate/4-easy-ways-to-backup-docker-volumes-cjg


Когда требуется создать резервную копию, восстановить или перенести данные с одного хоста Docker на другой, можно
  * остановить контейнеры, использующие volume,
    а затем создать резервную копию каталога volume
    (например, /var/lib/docker/volumes/<volume-name>).

  * другая альтернатива - bind mounts
    -> зависит от наличия в файловой системе хост-машины определенной структуры каталогов,
       например
         /tmp/source  = в UNIX-системах: Linux, macOS и др.
         C:/Users/John в Windows.

Обычно, если вы хотите создать резервную копию тома данных, вы
  1) запускаете новый контейнер с томом, который нужно создать,
  2) а затем выполняете команду tar для создания архива содержимого тома:

--[CMD]--
docker run --rm \
      -v "$VOLUME_NAME":/backup-volume \
      -v "$(pwd)":/backup \
      busybox \
      tar -zcvf /backup/my-backup.tar.gz /backup-volume
<<<

# Чтобы восстановить том с существующей резервной копией, можно
# 1) запустить новый контейнер, который смонтирует целевой том
# 2) и выполнит команду tar для распаковки архива на целевой том.


[!] Решение от "Docker Captain Bret Fisher": vackup
-> https://github.com/BretFisher/docker-vackup


# Резервное копирование volumes с помощью Docker Desktop + Volume Backup & Share extension
## опустим этот пункт

[!] volumes-backup-extension: https://github.com/docker/volumes-backup-extension


************************************************
* Что я могу делать с расширением (extension)? *
************************************************

Расширение позволяет:

  ✓ Резервное копирование данных, хранящихся в томе
    (например, данных базы данных Postgres или MySQL),
    в сжатый файл.

  ✓ Загружать резервные копии в Docker Hub и делиться ими с кем угодно.

  ✓ Создайте новый том из существующей резервной копии || восстановите состояние существующего тома.

  ✓ Перенос локальных томов на другой хост Docker (через SSH).

  ✓ Другие базовые операции с томами, такие как
    ➜ clone (клонирование),
    ➜ empty (опустошение)
    ➜ delete (удаление)
    тома.


********************************************
* Create different types of volume backups *
********************************************

При резервном копировании тома из расширения можно выбрать тип резервного копирования:

  local file (Локальный файл):
    = создает сжатый файл (gzip'ed tarball) в нужном каталоге ФС хоста с содержимым тома.

  local image (Локальный образ):
    = сохраняет данные тома в каталог /volume-data существующей ФС образа.
      Если просмотреть ФС этого образа, то резервная копия будет храниться в каталоге /volume-data.

  new image (Новый образ):
    = сохраняет данные тома в каталог /volume-data только что созданного образа.

  registry (Реестр):
    = перемещает (pushes) локальный том в любой реестр образов,
      как локальный [local] (например, localhost:5000),
      так и размещенный [hosted], например Docker Hub или GitHub Container Registry.
      Это позволит вам поделиться томом с вашей командой с помощью пары щелчков мыши.

#> На сегодняшний день максимальный размер тома, поддерживаемый расширением для отправки в Docker Hub, составляет 10 ГБ.
#> Это ограничение может быть изменено в будущих версиях расширения в зависимости от отзывов пользователей.


***************************************
* Восстановление или импорт из volume *
***************************************

  Можно выбрать способ восстановления тома:
    ● из локального файла,
    ● локального образа,
    ● нового образа
    ● или из реестра.


********************************************
* Transfer a volume to another Docker host *
*    Перенос тома на другой хост Docker    *
********************************************

  Копирование содержимого volume на другой хост, где запущен Docker
  (Docker Engine || Docker Desktop)

  В расширении можно указать
    ➜ как хост назначения, на который копируется локальный том
      (например, user@192.168.1.50),
    ➜ так и том назначения.


#> Между source и destination хостами Docker должен быть включен и настроен SSH.
#> Убедитесь в наличии открытого ключа SSH удаленного хоста в файле known_hosts.


***************************************
* How does it work behind the scenes? *
***************************************

* когда предстоит операция back up или restore, расширение:
  1) остановит все контейнеры, подключенные к указанному тому,
     чтобы избежать повреждения данных
-->
  создаст файл .tar.gz со всеми файлами, которые находятся внутри тома
<--
  2) а затем перезапустит их по завершении операции.

  # Эти операции выполняются в фоновом режиме => вы можете выполнять несколько из них параллельно
    => или покинуть экран расширения и перейти к другим частям Docker Desktop,
    чтобы продолжить работу во время выполнения операций.


[!] Обратите внимание:
  для открытых файлов, таких как базы данных,
  обычно лучше использовать предпочтительный инструмент резервного копирования для создания файла резервной копии,
  но если вы храните этот файл на Docker volume,
  это может быть способом создания образа тома Docker или tarball для переноса в удаленное хранилище для сохранности.

Интересная идея с --volumes-from:
#(https://stackoverflow.com/questions/26331651/how-can-i-backup-a-docker-container-with-its-data-volumes)

sudo docker run --rm --volumes-from yourcontainer -v $(pwd):/backup busybox tar cvf /backup/backup.tar /data
# &&
sudo docker run --rm --volumes-from yournewcontainer -v $(pwd):/backup busybox tar xvf /backup/backup.tar

#( проверить случай с контейнером, запущенным на другом хосте через tcp-socket )
