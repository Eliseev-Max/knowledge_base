BIND MOUNTS

[sources:]
  1) "Bind mounts": https://docs.docker.com/engine/storage/bind-mounts/
  2) "Use bind mounts": https://docs.docker.com/get-started/workshop/06_bind_mounts/
  3) "Изучаем Docker, часть 6: работа с данными": https://habr.com/ru/companies/ruvds/articles/441574/


Bind mounts существуют с первых дней существования Docker.
Bind mounts имеют ограниченную функциональность по сравнению с volumes.
При использовании bind mounts файл или каталог на хост-машине монтируется в контейнер.

[!] Ссылка на файл или каталог осуществляется по его абсолютному пути на хост-машине.

В отличие от этого, при использовании volume
  - создается новый каталог в каталоге хранения Docker на хост-машине,
  - Docker управляет содержимым этого каталога.

Файл или каталог не обязательно должен уже существовать на хосте Docker.
Он создается по требованию, если еще не существует.

Bind mounts очень производительны, но они зависят от наличия в файловой системе хост-машины определенной структуры каталогов.
Если вы разрабатываете новые приложения Docker, лучше использовать named volumes.
Вы не можете использовать команды Docker CLI для прямого управления bind mounts.

---
Работаете с
  * большими репозиториями
    или
  * монорепозиториями,
    или
  * с виртуальными файловыми системами, которые больше не масштабируются вместе с вашей кодовой базой?
  Обратите внимание на синхронизированные файловые ресурсы (Synchronized file shares).
  Они обеспечивают быстрый и гибкий обмен файлами между хостами и виртуальными машинами,
  повышая производительность связывающего монтирования за счет использования синхронизированных кэшей файловых систем.