USE VOLUMES

(https://docs.docker.com/engine/storage/volumes/)

<!>УДЕЛИТЬ ВНИМАНИЕ</!>
1) "Mount a volume subdirectory": https://docs.docker.com/engine/storage/volumes/#mount-a-volume-subdirectory
2) "Share data between machines": https://docs.docker.com/engine/storage/volumes/#share-data-between-machines
3) "Use a volume driver": https://docs.docker.com/engine/storage/volumes/#use-a-volume-driver
4) "Back up, restore, or migrate data volumes": https://docs.docker.com/engine/storage/volumes/#back-up-restore-or-migrate-data-volumes


Volumes (тома) — это предпочтительный механизм для сохранения данных, созданных и используемых контейнерами Docker.
В то время как bind mounts зависит от структуры каталогов и ОС хост-компьютера, volumes полностью управляются Docker.
Volumes имеют несколько преимуществ перед bind mounts:

  + используя volumes, легче создавать резервные копии или мигрировать, чем с bind mounts
  + вы можете управлять томами с помощью команд Docker CLI или Docker API;
  + тома работают как с контейнерами Linux, так и с Windows;
  + тома могут быть более безопасно разделены между несколькими контейнерами;

  + драйверы томов позволяют
      ✓ хранить тома на удаленных хостах или у облачных провайдеров,
	  ✓ шифровать содержимое томов
      ✓ или добавлять другие функции;

  + содержимое новых томов может быть предварительно заполнено контейнером || сборкой;
  + если вашему приложению требуется высокопроизводительный ввод/вывод.

"""
  Тома - не лучший выбор, если вам нужно получить доступ к файлам с хоста,
  так как ТОМОМ ПОЛНОСТЬЮ УПРАВЛЯЕТ Docker.

  Используйте bind mounts, если вам нужно получить доступ к файлам или каталогам как из контейнеров, так и с хоста.
"""

Кроме того, тома часто являются лучшим выбором, чем сохранение данных в доступном для записи слое контейнера, потому что:
	• том не увеличивает размер контейнеров, использующих его, 
	• содержимое тома существует вне жизненного цикла данного контейнера.

Использование tmpfs mounts (если контейнер генерирует непостоянные данные состояния [ = non-persistent state data])
	+ данные хранятся в специально отведённом месте, а не где попало;
	+ производительность контейнера увеличивается
	+ нет записи в writable layer
{https://docs.docker.com/storage/tmpfs/}

Выбор флага: -v или --mounts
	--mount является более явным и подробным.
	Основное различие:
		► синтаксис -v объединяет все опции в одном поле;
		► синтаксис --mount разделяет опции
	
	-v, --volume:
		состоит из трёх полей, разделённых символами двоеточия (:).
		Поля должны быть расположены в правильном порядке, и значение каждого поля не сразу очевидно.
		► Назначение первого поля:
			• для именованных томов:
				первое поле является именем тома и является уникальным для данной хост-машины.
			• для анонимных томов:
				первое поле опускается

		► Назначение второго поля:
			это путь, по которому файл или каталог монтируются в контейнере
			(docker run -v {VOLUME}:{CONTAINER_DIR} <image>)
    
		► Назначение третьего поля:
			является необязательным;
			представляет собой список опций, разделенных запятыми, например ro.
	
	--mount:
		состоит из нескольких пар "ключ-значение", разделённых запятыми, каждая из которых состоит из кортежа <ключ>=<значение>
		"-" - синтаксис --mount более многословен;
		"+" - порядок ключей не имеет значения;
		"+" - значения флагов проще для понимания.
	
	◎ Тип монтирования:
		♦ bind
		♦ volume
		♦ tmpfs
	
	◎ Источник монтирования:
		√ для именованных томов → имя тома;
		√ для анонимных томов → поле опускается.
		√ может быть указано, как source или src

	◎ Назначение:
		√ принимает в качестве значения путь, по которому файл или каталог смонтирован в контейнере;
		√ может быть указан как destination, dst или target.
		
    ◎ Опция readonly:
		√ если присутствует, → связующее монтирование монтируется в контейнер только для чтения.
		√ может быть указана, как readonly или ro.

    ◎ Опция volume-opt:
		√ может быть указана более одного раза;
		√ принимает пару ключ-значение, состоящую из имени опции и ее значения

Экранирование значений из внешнего парсера CSV:
	Если ваш драйвер тома принимает в качестве опции список, разделенный запятыми,
	необходимо экранировать значение из внешнего CSV-парсера.
	Чтобы экранировать volume-opt:
      1) окружите его двойными кавычками (")
      2) и окружите весь параметр монтирования одинарными кавычками (').

Например, локальный драйвер принимает параметры монтирования в виде списка, разделенного запятыми, в параметре o. В этом примере показан правильный способ экранирования списка.

$ docker service create \
    --mount 'type=volume,\
			src=<VOLUME-NAME>,\
			dst=<CONTAINER-PATH>,\
			volume-driver=local,\
			volume-opt=type=nfs,\
			volume-opt=device=<nfs-server>:<nfs-path>,\
			"volume-opt=o=addr=<nfs-address>,vers=4,soft,timeo=180,bg,tcp,rw"'
    --name myservice \
    <IMAGE>

Различия между поведением -v и --mount

	‼ В отличие от bind mounts, все опции для томов доступны для флагов --mount и -v.
	При использовании томов с сервисами (службами) поддерживается только --mount.

Создание и управление томами
	(‼ В отличие от bind mounts, вы можете создавать тома и управлять ими вне рамок любого контейнера).
	
*******************************
* Основные операции с томами: *
*******************************

  1. Создать том:
---
$ docker volume create <volume-name>
---

  2. Вывести список томов:
---
$ docker volume ls
---
	
	3. Вывести информацию о томе
		$ docker volume inspect <volume-name>
	
	4. Удалить том
		$ docker volume rm <volume-name>

Запуск контейнера с томом

	$ docker run -d \
		--name devtest \
		--mount source=myvol2,target=/app \
		nginx:latest


******************
* --volumes-from *
******************
(https://docs.docker.com/reference/cli/docker/container/run/#volumes-from)
# Монтировать тома из контейнера

## Пример:
$ docker run --volumes-from 777f7dc92da7 --volumes-from ba8c0c54f0f2:ro -i -t ubuntu pwd

# ,где
# --volumes-from 777f7dc92da7  == примонтировать том с идентификатором 777f7dc92da7 к запускаемому контейнеру
# (в данном примере из образа ubuntu) в том же режиме (ro || rw), что и ссылочный контейнер
#
# --volumes-from ba8c0c54f0f2:ro == примонтировать том с идентификатором ba8c0c54f0f2 к запускаемому контейнеру
# в режиме: "только чтение"

  Флаг --volumes-from монтирует все определенные тома из указанных контейнеров.
  Можно указать более одного контейнера, повторив аргумент --volumes-from.

  К идентификатору контейнера можно добавить суффикс :ro или :rw
  :ro = монтировать том в режиме "только чтение" 
  :rw = монтировать том в режиме "чтение и запись"

  По умолчанию Docker монтирует тома в том же режиме (чтение-запись или только чтение), что и ссылочный контейнер.

  Системы маркировки, такие как SELinux, требуют размещения соответствующих меток на содержимом томов, монтируемых в контейнер.
  Без метки система безопасности может помешать процессам, запущенным внутри контейнера, использовать содержимое.
  По умолчанию Docker не изменяет метки, установленные ОС.

  Чтобы изменить метку в контексте контейнера, можно добавить к монтируемому тому один из двух суффиксов
    :z
      <или>
    :Z.
  Эти суффиксы указывают Docker на изменение меток файловых объектов на общих томах.

[опция :z]
  Опция z сообщает Docker, что два контейнера совместно используют содержимое тома.
  В результате Docker помечает содержимое меткой общего содержимого.
  Метки общих томов позволяют всем контейнерам читать/записывать содержимое.

[опция :Z]
  Параметр Z указывает Docker пометить содержимое частной меткой без общего доступа.
  Только текущий контейнер может использовать частный том.


---
{  Guide to Docker Volumes
   https://www.baeldung.com/ops/docker-volumes
}
[
	• Контейнер docker запускает стек программного обеспечения, определенный в образе.
	• Образы состоят из набора read-only слоев, которые работают на файловой системе, называемой Union File System.
	• Запуск нового контейнера → Docker добавляет слой read-write поверх слоев образа →
		→ контейнер может работать, как на стандартной файловой системе Linux.

	► Таким образом, любое изменение файла внутри контейнера создает рабочую копию в слое чтения-записи.
	‼ Однако, когда контейнер останавливается или удаляется, этот слой чтения-записи теряется.
]


---<How can I mount a volume of files to a remote docker daemon?>---
(https://stackoverflow.com/questions/51305537/how-can-i-mount-a-volume-of-files-to-a-remote-docker-daemon)

```
export DOCKER_HOST=tcp://remote_host:2375
docker volume create data-volume
docker create -v data-volume:/data --name helper busybox true
docker cp /home/Bradson/data helper:/data
docker rm helper
docker run -v data-volume:/data a
```