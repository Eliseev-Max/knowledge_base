Образы, контейнеры и файловая система Union File System
	
	Файловая система (ФС) контейнеров Docker: UnionFS (Union File System = каскадно-объединённое монтирование, union mount).
	Она позволяет монтировать несколько файловых систем в общую иерархию, которая выглядит как единая файловая система.
	Иными словами, это тип файловой системы, в которой создается иллюзия объединения содержимого нескольких каталогов в один 
	без изменения исходных (физических) источников.
	Это ключевой момент технологии, лежащей в основе Docker.
	Реализации UnionFS*, поддерживаемых Docker:
	(поддержка исходной UnionFS прекращена, последние изменения кода - в 2014г.)
	    ■ AUFS
			• использовалась в качестве ФС по умолчанию для Docker на Ubuntu/Debian
			• со временем она была заменена на OverlayFS (для ядра Linux > 4.0)
	    
		■ OverlayFS
			• была включена в ядро Linux Kernel (с версии 3.18)
			• в целом обеспечивает лучшую, чем aufs, производительность
			• имеет ряд интересных функциональных особенностей (например функцию разделения страничного кэша)
			
	    ■ devicemapper;
		
	    ■ BTRFS
			• совместный проект множества компаний, в том числе SUSE, WD и Facebook;
			• ФС выпущена под лицензией GPL и является частью ядра Linux;
			• BTRFS — ФС по умолчанию дистрибутива Fedora 33;
			• Полезные функции:
			  + операции на уровне блоков;
			  + дефрагментация;
			  + доступные для записи снимки и др.
			  
	    ■ ZFS
			• разработанная (Sun Microsystems)→ Oracle:
				→ выпуск осуществлялся под общей лицензией на разработку и распространение (CDDL),
				→ лицензия не распространяемой на ПО с открытым исходным кодом, 
				→ данная ФС не может поставляться как часть ядра Linux
			• реализованные полезные функции:
			  + функция иерархического контрольного суммирования;
			  + функция обработки снимков;
			  + функция резервного копирования/репликации или архивирования и дедупликации (исключения избыточности) внутренних данных

	Определить реализацию, используемую в конкретной системе:
		docker info (см. содержимое заголовка "Storage Driver")
	► ФС конкретного образа смонтирована как уровень только для чтения;
	► любые изменения в работающем контейнере происходят на уровне с разрешённой записью,
	  монтируемого поверх основной ФС образа.
		
	Что такое образ контейнера?
	[source: https://docs.docker.com/get-started/#what-is-a-container-image]
		При запуске контейнер использует изолированную файловую систему.
		Эта пользовательская файловая система предоставляется образом контейнера.
		Образ предоставляет собой набор слоёв файловой системы + некоторые метаданные.
		Слой - это набор изменений в файлах.
		Слои хранятся на диске хоста
		Какие компоненты, необходимые для запуска приложения в контейнере, должен содержать образ:
			• все зависимости
			• все конфигурации
			• необходимые скрипты 
			• двоичные файлы
			• конфигурации контейнера:
			•• переменные окружения
			•• команда по умолчанию для запуска
			•• другие метаданные
		‼ В отличие от chroot, контейнер добавляет дополнительную изоляцию, которая не доступна при использовании chroot
	
	Образы Docker состоят из нескольких уровней (layers).
	Каждый уровень представляет собой защищённую от записи файловую систему.
	Для каждой инструкции в Dockerfile создаётся свой уровень, который размещается поверх предыдущих уровней.
	Во время преобразования IMAGE → CONTAINER (docker run, docker create) механизм Docker:
	(# docker create = создать контейнер из указанного образа без запуска
	 #	docker run = создать контейнер из указанного образа и запустить его)
		► выбирает нужный образ;
		► добавляет на самом верхнем уровне ФС с возможностью записи
		◄=► одновременно с этим инициализируются разнообразные параметры настройки, такие как
			• IP-адрес;
			• имя;
			• идентификатор;
			• ограничения ресурсов.
	Хорошей практикой является сведение к минимуму количество уровней посредством записи нескольких
	UNIX-команд в одной инструкции RUN
	
	‼ Контейнеры запускают системы, определённые образами.
