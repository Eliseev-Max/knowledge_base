{  Use volumes:
	https://docs.docker.com/storage/volumes/
}

Volumes (тома) — это предпочтительный механизм для сохранения данных, созданных и используемых контейнерами Docker.
В то время как bind mounts зависит от структуры каталогов и ОС хост-компьютера, volumes полностью управляются Docker.
Volumes имеют несколько преимуществ перед привязкой:

    + используя volumes, легче создавать резервные копии или мигрировать, чем с bind mounts
    + вы можете управлять томами с помощью команд Docker CLI или Docker API;
    + тома работают как с контейнерами Linux, так и с Windows;
    + тома могут быть более безопасно разделены между несколькими контейнерами;
    + драйверы томов позволяют хранить тома на удаленных хостах или у облачных провайдеров,
	  шифровать содержимое томов или добавлять другие функции;
    + содержимое новых томов может быть предварительно заполнено контейнером;
    + тома на рабочем столе Docker имеют гораздо более высокую производительность,
	  чем bind mounts хостов Mac и Windows.

Кроме того, тома часто являются лучшим выбором, чем сохранение данных в доступном для записи слое контейнера, потому что:
	• том не увеличивает размер контейнеров, использующих его, 
	• содержимое тома существует вне жизненного цикла данного контейнера.

Использование tmpfs mounts (если контейнер генерирует непостоянные данные состояния)
	+ данные хранятся в специально отведённом месте, а не где попало;
	+ производительность контейнера увеличивается
	+ нет записи в writable layer
{https://docs.docker.com/storage/tmpfs/}

Выбор флага: -v или --mounts
	--mount является более явным и подробным.
	Основное различие:
		► синтаксис -v объединяет все опции в одном поле;
		► синтаксис --mount разделяет опции
	
	-v, --volume:
		состоит из трёх полей, разделённых символами двоеточия (:).
		Поля должны быть расположены в правильном порядке, и значение каждого поля не сразу очевидно.
		► Назначение первого поля:
			• для именованных томов:
				первое поле является именем тома и является уникальным для данной хост-машины.
			• для анонимных томов:
				первое поле опускается

		► Назначение второго поля:
			это путь, по которому файл или каталог монтируются в контейнере
			(docker run -v {VOLUME}:{CONTAINER_DIR} <image>)
    
		► Назначение третьего поля:
			является необязательным;
			представляет собой список опций, разделенных запятыми, например ro.
	
	--mount:
		состоит из нескольких пар "ключ-значение", разделённых запятыми, каждая из которых состоит из кортежа <ключ>=<значение>
		"-" - синтаксис --mount более многословен;
		"+" - порядок ключей не имеет значения;
		"+" - значения флагов проще для понимания.
	
	◘ Тип монтирования:
		♦ bind
		♦ volume
		♦ tmpfs
	
	◘ Источник монтирования:
		√ для именованных томов → имя тома;
		√ для анонимных томов → поле опускается.
		√ может быть указано, как source или src

	◘ Назначение:
		√ принимает в качестве значения путь, по которому файл или каталог смонтирован в контейнере;
		√ может быть указан как destination, dst или target.
		
    ◘ Опция readonly:
		√ если присутствует, → связующее монтирование монтируется в контейнер только для чтения.
		√ может быть указана, как readonly или ro.
		
    ◘ Опция volume-opt:
		√ может быть указана более одного раза;
		√ принимает пару ключ-значение, состоящую из имени опции и ее значения
	
Экранирование значений из внешнего парсера CSV:
	Если ваш драйвер тома принимает в качестве опции список, разделенный запятыми,
	необходимо экранировать значение из внешнего CSV-парсера.
	Чтобы экранировать volume-opt, окружите его двойными кавычками (") и окружите весь параметр монтирования одинарными кавычками (').

Например, локальный драйвер принимает параметры монтирования в виде списка, разделенного запятыми, в параметре o. В этом примере показан правильный способ экранирования списка.

$ docker service create \
    --mount 'type=volume,\
			src=<VOLUME-NAME>,\
			dst=<CONTAINER-PATH>,\
			volume-driver=local,\
			volume-opt=type=nfs,\
			volume-opt=device=<nfs-server>:<nfs-path>,\
			"volume-opt=o=addr=<nfs-address>,vers=4,soft,timeo=180,bg,tcp,rw"'
    --name myservice \
    <IMAGE>

Различия между поведением -v и --mount

	‼ В отличие от bind mounts, все опции для томов доступны для флагов --mount и -v.
	При использовании томов с сервисами (службами) поддерживается только --mount.

Создание и управление томами
	(‼ В отличие от bind mounts, вы можете создавать тома и управлять ими вне рамок любого контейнера).
	
Основные операции с томами:
	1. Создать том
		$ docker volume create <volume-name>
	
	2. Вывести список томов
		$ docker volume ls
	
	3. Вывести информацию о томе
		$ docker volume inspect <volume-name>
	
	4. Удалить том
		$ docker volume rm <volume-name>

Запуск контейнера с томом

	$ docker run -d \
		--name devtest \
		--mount source=myvol2,target=/app \
		nginx:latest

---
{  Guide to Docker Volumes
   https://www.baeldung.com/ops/docker-volumes
}
