Частный реестр Docker
(sources:
  1. И.Милл, Э. Х. Сейерс "Docker на практике" (Docker in Practice. Second Edition), с. 62
  2. https://docs.docker.com/engine/reference/commandline
  3. "Configuring a registry": https://docs.docker.com/registry/configuration/
)

Типы реестров Docker по их размещению и доступности:
	• (on-host) локальный реестр на хосте (Docker Daemon + Docker Client)
	• частный реестр в локальной сети
	• публичный реестр (в Интернете, например, Docker Hub)

Все реестры Docker:
	► выполняют одну и ту же функцию (хранение образов Docker)
	► имеют одно и то же API (Docker Daemon ↔ [API] ↔ registry)

Настройка сервера реестра в локальной сети
  На хосте, предназначенном для хранения образов Docker (сервере реестра):
	
(1) $ docker run -d -p 5000:5000 -v $HOME/registry:/var/lib/registry registry:2
  или
(2) $ docker run -d -p 5000:5000 --restart=always --name registry registry:2

# Разъяснение:
# registry:2 - имя:версия образа.
# По состоянию на 20.06.2023 последней версией является 2.8.2
# Вместо registry:2 можно (наверно) написать registry:latest 

  -p {HOST_PORT}:{CONTAINER_PORT} - открыть доступ к реестру на порту 5000
  -v {HOST_DIR}:{CONTAINER_DIR} - примонтировать директорий хоста var/lib/registry
								    к директорию контейнера: $HOME/registry 
	-d (--detach) - запустить контейнер в фоновом режиме и вывести его ID
	
Чтобы получить доступ к частному реестру, нужно:
  на хосте клиента добавить в параметры демона (dockerd daemon):
  --insecure-registry HOSTNAME
  где
    --insecure-registry list  - включить небезопасное взаимодействие с реестром
    HOSTNAME = имя хоста или IP-адрес сервера нового реестра.

# $ docker container stop registry  - остановить локальный реестр
# $ docker container stop registry && docker container rm -v registry  - остановить и удалить контейнеры

---
  По умолчанию Docker считает, что все реестры, кроме локальных, безопасны.
  Общение с небезопасным реестром невозможно, если Docker считает этот реестр безопасным.
  Для связи с незащищенным реестром демону Docker требуется команда --insecure-registry в одной из следующих двух форм:
    --insecure-registry myregistry:5000  говорит демону Docker, что myregistry:5000 следует считать небезопасным
    --insecure-registry 10.1.0.0/16  указывает демону Docker, что все реестры, чей домен разрешается (резолвится) в IP-адрес,
  является частью подсети, описанной синтаксисом CIDR, следует считать небезопасными.
  Флаг можно использовать несколько раз, чтобы несколько реестров были помечены как небезопасные.
  Если небезопасный реестр не помечен как небезопасный, docker pull, docker push и docker search выдадут сообщение об ошибке,
  предлагая пользователю:
    • либо обеспечить безопасность,
    • либо передать флаг --insecure-registry демону Docker, как описано выше.

  Локальные реестры, IP-адрес которых находится в диапазоне 127.0.0.0/8, автоматически помечаются как небезопасные,
  начиная с версии Docker 1.3.2

  Включение --insecure-registry, т.е. разрешение незашифрованной и/или недоверенной связи, может быть полезно при работе с локальным реестром.
  Однако, поскольку его использование создает уязвимости в безопасности, его следует включать ТОЛЬКО в целях тестирования.
  Для повышения безопасности пользователям следует добавить свой корневой сертификат (КС)
  в список доверенных КС в системе вместо включения --insecure-registry.
---

Поместить образ с присвоенным тэгом в репозиторий на сервере HOSTNAME:
	docker push HOSTNAME:5000/ image:tag

Копирование образа из Docker Hub в свой (локальный) реестр
(https://docs.docker.com/registry/deploying/)

  Пример: извлечём образ ubuntu:16.04 из Docker Hub и поместим его в локальный реестр
  Последовательность действий:
    1. Извлекаем образ ubuntu:16.04 из Docker Hub
	2. Перемаркировываем образ в my-ubuntu
	3. Помещаем образ my-ubuntu в локальный реестр
	
  Подробное описание действий
    1. docker pull ubuntu:16.04
	2. Помечаем образ как localhost:5000/my-ubuntu.
	   Это создаёт тег для существующего образа.
	   Если первой частью тега является имя хоста и порт, Docker интерпретирует это как расположение реестра в момент push
	   
	   $ docker tag ubuntu:16.04 localhost:5000/my-ubuntu
	
	3. Вносим (пушим) образ в локальный реестр, запущенный на localhost:5000
	   
	   $ docker push localhost:5000/my-ubuntu
	   
	4. Удаляем локально кэшированные образы ubuntu:16.04 и localhost:5000/my-ubuntu,
	   с целью тестирования извлечения образа из реестра.
	   Это не удаляет образ localhost:5000/my-ubuntu из реестра.
	  
       $ docker image remove ubuntu:16.04
       $ docker image remove localhost:5000/my-ubuntu
	
	5. Извлекаем образ localhost:5000/my-ubuntu из локального реестра
	  
	   $ docker pull localhost:5000/my-ubuntu