////////////////////////////////////////////////////////////
/**********************************************************\
/* Способы задания переменных окружения с помощью Compose *\
/**********************************************************\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
(Ways to set environment variables with Compose)
{https://docs.docker.com/compose/environment-variables/set-environment-variables/}

В Coimpose существует множество способов задать переменные окружения для контейнеров.
Можно использовать как файл Compose, так и CLI.
[!] Каждый метод зависит от приоритета переменных окружения.

НЕ РЕКОМЕНДУЕТСЯ использовать переменные окружения для передачи чувствительных данных (конфиденциальной информации).
Для этих целей используйте СЕКРЕТЫ: https://docs.docker.com/compose/use-secrets/

################
# Compose file #
################
  1. Замена с помощью файла .env
  
    Файл .env в Docker Compose - это текстовый файл, используемый для определения переменных окружения,
    которые должны быть доступны для контейнеров Docker при запуске docker compose up.
    Этот файл обычно
      - содержит пары ключ-значение переменных окружения
      - позволяет централизовать и управлять конфигурацией в одном месте.

    Файл .env полезен, если вам нужно хранить несколько переменных окружения.
  [!] Файл .env - это метод по умолчанию для установки переменных окружения в контейнерах.
  [!] Файл .env должен быть помещен В КОРЕНЬ КАТАЛОГА проекта рядом с файлом compose.yaml.

(Доп. сведения о форматировании файла окружения: ->
-> {"Синтаксис для файлов окружения":https://docs.docker.com/compose/environment-variables/env-file/}
)

  # Простой пример:
---
$ cat .env
TAG=v1.5

$ cat compose.yml
services:
  web:
    image: "webapp:${TAG}"
---
# Когда запускаем docker compose up, веб-сервис, определенный в файле Compose (web:), интерполируется в образ webapp:v1.5, который был задан в файле .env.
# Можно проверить это с помощью команды config,
# которая выводит в терминал конфигурацию вашего разрешенного приложения:
---
$ docker compose config

services:
  web:
    image: 'webapp:v1.5'
---

[!] Если вы определили переменную окружения в файле .env,
    вы можете НАПРЯМУЮ ссылаться на нее в файле compose.yml 
    с помощью атрибута environment.

Например,
  - файл .env содержит переменную окружения DEBUG=1,
  - файл compose.yml выглядит следующим образом:
-->
[.env]
DEBUG=1
<--
-->
[compose.yml]
  services:
    webapp:
      image: my-webapp-image
      environment:
        - DEBUG=${DEBUG}
<--
## Docker Compose заменяет ${DEBUG} в файле compose.yml значением из .env
---
[!] Вы можете использовать несколько файлов .env в файле compose.yml с атрибутом env_file,
    Docker Compose будет считывать их в указанном порядке.
(env_file: https://docs.docker.com/compose/compose-file/05-services/#env_file)

[!] Если одна и та же переменная определена в нескольких файлах,
    приоритет имеет последнее определение:
---
services:
  webapp:
    image: my-webapp-image
    env_file:
      - .env
      - .env.override
---

[!] Можно поместить .env-файл НЕ В КОРНЕВОЙ каталог проекта, а в другое место,
    а затем использовать один из следующих методов, чтобы Compose мог перейти к нему:
      * опция --env-file в CLI
      * использование атрибута env_file в файле Compose.

[!] Значения в .env-файле можно переопределить из командной строки с помощью
    $ docker-compose up -e <VARIABLE>=<VALUE>

[!] Ваш .env-файл может быть отменен другим .env, если он заменен опцией --env-file.

[IMPORTANT!]
  Замена из .env-файлов - это функция Docker Compose CLI.
  Она не поддерживается Swarm при запуске



  2. Использование атрибута environment

  -> Мы можем задать переменные окружения непосредственно в файле Compose, не используя файл .env, с помощью атрибута environment в файле compose.yml.
    Это работает так же, как и docker run -e VARIABLE=VALUE ...
  # Пример:
---
web:
  environment:
    - DEBUG=1
---

  Значение переменной DEBUG в контейнере берется из значения той же переменной в оболочке, в которой запущен Compose.

[Обратите внимание!]
  в этом случае НЕ ВЫВОДИТСЯ ПРЕДУПРЕЖДЕНИЕ, если переменная DEBUG в окружении оболочки не установлена.

  -> Вы также можете воспользоваться преимуществами интерполяции:
-->
web:
  environment:
    - DEBUG=${DEBUG}
<--
  Результат похож на приведенный выше,
[!]  НО Compose выдает предупреждение, если переменная DEBUG не установлена в окружении оболочки.

---
[*] Подробнее об атрибуте environment:
    - environment определяет переменные окружения, установленные в контейнере.
    - environment может использовать либо массив, либо карту (map).
    - Любые булевы значения: true, false, yes, no, должны быть заключены в кавычки,
      ("true", "false", "yes", "no")
      чтобы парсер YAML не преобразовал их в True или False.

## Examples:
---
#[Map syntax:]
environment:
  RACK_ENV: development
  SHOW: "true"
  USER_INPUT:
---
---
#[Array syntax:]
environment:
  - RACK_ENV=development
  - SHOW=true
  - USER_INPUT
---

[!] | Переменные окружения могут быть объявлены одним ключом, без значения знака равенства
    | (переменная USER_INPUT в приведённом выше примере)
    | В этом случае Compose полагается на то, что вы определите значение.
    | Если значение не определено, переменная снимается и удаляется из окружения контейнера сервиса.

[!] Если для одного сервиса заданы и env_file, и environment,
    значения, установленные в environment, имеют приоритет


  3. Использование атрибута env_file

    Атрибут env_file:
      + позволяет использовать множество .env файлов в приложении Compose.
      + делает возможным хранение переменных окружения отдельно от основного конфигурационного файла:
        -> более организованный и безопасный способ управления конфиденциальной информацией,
           (поскольку нам не нужно помещать файл .env в корень каталога проекта)

    Это работает так же, как и
    $ docker run --env-file=FILE ....

[Example]
---
web:
  env_file:
    - web-variables.env
---

Дополнительная информация
  Если указано несколько файлов, они
    - оцениваются по порядку;
    - могут отменять значения, заданные в предыдущих файлах.
  
  На переменные окружения, объявленные в файле .env, нельзя ссылаться отдельно в файле Compose.
  
  Если вы используете атрибуты env_file и environment: 
    переменные окружения, заданные в environment => в приоритете

    Пути к файлу .env, указанные в атрибуте env_file, являются относительными по отношению к местоположению файла compose.yml.
    Значения в файлах .env могут быть отменены из командной строки с помощью команды docker compose up -e.
    Ваши .env-файлы могут быть заменены другими .env, если их заменить командой --env-file.


#############################
#   Замена из оболочки      #
# Substitute from the shell #
#############################

  Вы можете использовать существующие переменные окружения:
    * с хост-машины
  или
    * из среды оболочки (shell environment),
      в которой вы выполняете команды docker compose.

  Это позволяет динамически вводить значения в конфигурацию Docker Compose во время выполнения.

  Например, предположим, что оболочка содержит
  POSTGRES_VERSION=9.3
  и вы предоставляете следующую конфигурацию:
---<Compose configuration>---
db:
  image: "postgres:${POSTGRES_VERSION}"
---
  Когда вы запускаете docker compose с этой конфигурацией, Compose:
    1) ищет в оболочке переменную окружения POSTGRES_VERSION  и
    2) подставляет ее значение.

  В этом примере Compose разрешает (resolves) образ до postgres:9.3 перед запуском конфигурации.

[!] Если переменная окружения не установлена, Compose подставляет пустую строку.
  
  В приведенном выше примере, если переменная POSTGRES_VERSION не установлена, значением для параметра image будет
  postgres:.

[Примечание:]
  postgres: не является корректной ссылкой на образ.
  Docker ожидает
    -> либо ссылку без тега, например postgres, который по умолчанию указывает на последний образ,
    -> либо с тегом, например postgres:15.

[Важно!]
  Значения, заданные в окружении оболочки, ПЕРЕОПРЕДЕЛЯЮТ значения,
    - заданные в файле .env,
    - атрибуте environment  и
    - атрибуте env_file.
(Дополнительные сведения см. в разделе "Приоритет переменных окружения в Docker Compose")


<--->
###################################################
# Приоритет переменных окружения в Docker Compose #
###################################################

(Environment variables precedence in Docker Compose)
{https://docs.docker.com/compose/environment-variables/envvars-precedence/}

  Когда вы задаете одну и ту же переменную окружения несколькими способами, Compose использует правило старшинства (приоритетности).
  Оно направлено на разрешение значения для рассматриваемой переменной.

  Порядок приоритета (от высшего к низшему) следующий:
  
  1. Заданная с помощью "docker compose run -e ..." в CLI
  2. Заменённая из оболочки (shell) пользователя
  3. Установленная с помощью атрибута окружения в файле Compose
  4. Заданная с помощью аргумента --env-file в CLI
    Use of the env_file attribute in the Compose file
    Set using an .env file placed at base of your project directory
    Set in a container image in the ENV directive. Having any ARG or ENV setting in a Dockerfile evaluates only if there is no Docker Compose entry for environment, env_file or run --env.