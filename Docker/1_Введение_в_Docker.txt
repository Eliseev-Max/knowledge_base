Введение в Docker и контейнеризацию

Возможность запуска тестов в изолированном окружении
Упрощённый запуск тестов в CI + развёртывание инфраструктуры

[1]	Обзор Docker

Docker - это открытая платформа для разработки, доставки и эксплуатации приложений.

Варианты использования:
• упаковка приложения (тестов) в контейнеры
• раздача и доставка контейнеров командам для разработки и тестирования
• деплой контейнеров в Production (хорошо масштабируется горизонтально)

[
	Компоненты платформы Docker:
		• Docker Engine
			- механизм, отвечающий за создание и функционирование контейнеров;
			
		• Docker Hub
			- облачный сервис для распространения контейнеров.
]

[2]	Docker flow

	Образ (image) - шаблон, который используется для создания контейнеров
	Реестр (registry) - репозиторий образов (например, онлайн-реестр Docker Hub (hub.docker.com))
	Dockerfile - текстовый файл с инструкциями, необходимыми для создания образа контейнера
	Контейнер (container) - запущенное приложение, т.е. совокупность процессов и образа

	[Dockerfile] -► Build -► [Image] -► Run -► [Container]
	
[3]	Компоненты Docker
			Клиент (Client)
				• диалог с демоном Docker:
					♦ получить информацию от демона;
					♦ передать инструкции демону.
					
					► unix: по протоколу HTTP (соединение ч/з сокет домена Unix)
						по умолчанию создаётся в /var/run/docker.sock
					► tcp: TCP-socket для поддержки соединения с удалёнными клиентами
					► fd: файловый дескриптор для сокетов, управляемых systemd
					
			Сервер (Server/Host) [Docker Daemon]
				• создание контейнеров;
				• запуск контейнеров;
				• контроль работы контейнеров;
				• создание образов;
				• хранение образов.

	Реестры: публичные | приватные
		Приватный реестр Docker - это служба (сервис), который хранит образы Docker.
		Образы могут быть запрошены любым Docker-демоном, имеющим соответствующий доступ.
		Этот реестр находится во внутренней сети и не является общедоступным, поэтому он считается приватным.

[4] Принципиальные различия в целях использования VM и контейнеров:
	► Целью применения виртуальной машины является полная эмуляция инородной программной (операционной) среды
	► Цель применения контейнера - сделать приложения ПЕРЕНОСИМЫМИ и САМОДОСТАТОЧНЫМИ
		  
[5]	Сравнение Docker-контейнеров и виртуальных машин (VM)
		♦ VM более изолированы,
		♦ Каждая VM использует свою ОС (Guest OS), свои библиотеки, файлы, службы
		♦ Всеми виртуальными ОС управляет Гипервизор (Hypervisor)
		  
		• Все контейнеры задействуют одно общее ядро ОС
		• Контейнеры пользуются общими библиотеками (не дублируя их)

[6]	Преимущества контейнеров
		   • Время запуска - контейнеры запускаются быстрее (несколько секунд), чем VM (несколько минут)
						  (запуск контейнера == запуск службы)
		   • Ресурсы - контейнеры потребляют меньше ресурсов, чем VM (HDD, RAM, CPU)
					   Процессы внутри контейнеров равнозначны собственным процессам ОС хоста
					   и не влекут за собой дополнительных накладных расходов, связанных с выполнением гипервизора
		   • Лицензирование - большинство технологий для запуска контейнеров бесплатны и являются Open Source проектами
		   • Переиспользование кода - образы легко создаются из Dockerfile и могут распространяться через реестры
		  
[7]	Преимущества виртуальных машин (VM)
			Изолированность - у VM более высокая степень изоляции друг от друга и от хостовой системы
			Портирование - возможность запуска VM с Linux на хосте Windows и наоборот
			Откат изменений (rollback) - удобная система Snapshots

[8]	Базовые команды Docker CLI
		Многие команды docker требуют привелегий суперпользователя
		Чтобы постоянно не прибегать к sudo docker..., нужно добавить своего пользователя в группу docker
		$ sudo usermod -aG имя_группы имя_пользователя
		$ sudo usermod -aG docker max
		
[9]	Проверка правильности установки
	1. docker --version	# выведем version ..., build ...
	2. запуск контейнера из образа hello-world:
		  $ docker run hello-world
	При выполнении docker-команды из удалённого репозитория (библиотеки) скачивается образ
	'hello-world' последней версии.
	Запустившийся контейнер выводит сообщение о том, какие действия были выполнены Docker-клиентом
	и Docker-сервером (Docker Daemon) в консоль
	
[10]  Шаги Docker при запуске контейнера hello-world:
		1. Docker клиент связался с Docker демоном
		2. Docker daemon вытащил (извлёк) образ из (удалённого репозитория) Docker Hub
		3. Docker daemon запустил новый контейнер из этого образа ► контейнер запустил исполняемый файл ►
			► вывел строку (которую мы прочитали)
		4. Docker daemon транслировал этот вывод клиенту, который в свою очередь отправил вывод в наш терминал
	
[11]	‼ Базовые команды
{
	♦ Поиск образа:
		$ docker search <ИМЯ_ОБРАЗА>
	♦ Выгрузка образа из реестра:
		$ docker pull <ИМЯ_ОБРАЗА>
}
	♦ Состояние контейнеров
	$ docker ps [-a, --all]
		$ docker ps				- показывает запущенные контейнеры (в состоянии running)
		$ docker ps -a \--all	- выводит список всех контейнеров (во всех состояниях)
		$ docker ps -q			- выводит ID контейнеров
		$ docker ps -f			- фильтровать контейнеры по заданному условию
		
{  Состояния контейнера:
	  • created 		- "создан", (docker create)
	  • restarting 	- "перезапуск"
	  • running 		- "активен", "работает"
	  • paused 		- "приостановлен"
	  • exited 		- "остановлен" (= stopped), в контейнере нет активно выполняющихся процессов
	
	Контейнер существует, пока существует его основной процесс
	остановленный контейнер != исходный образ
}

	$ docker images				- выводит список образов, находящихся в локальном репозитории
	$ docker run [--rm] <image> [CMD]	- создаёт и запускает процесс CMD в новом контейнере
		# Всякий раз запуская команду docker run создаётся новый контейнер
		# Из одного образа можно запустить несколько контейнеров
		# Опция --rm удаляет контейнер после того, как в нём отработала программа (код)
	
	# Что "под капотом" команды docker run:
		Run a command in a new container
		$ docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
	
		docker run = docker create <image> + docker start <container-ID> [--attach, -a]
		
		# опция --attach позволяет подсоединить потоки вывода (STDOUT) и ошибок (STDERR) к нашему терминалу
		
	$ docker create <ИМЯ_ОБРАЗА>	→	 (возвращает) идентификатор
	$ docker run [-it, -d] <container-ID> {command}	- интерактивный режим
		--detach, -d 		= Run container in background and print container ID
		--interactive, -i	= Keep STDIN open even if not attached
		--tty, -t			= Allocate a pseudo-TTY \ назначить псевдо-телетайп
		
		Пример:
		docker run -it ubuntu:20.04 bash		# Запуск интерпретатора команд bash в ОС Ubuntu внутри контейнера
												# Если образ ubuntu не скачан, он скачается
		# При выполнении команды пользователь, от которого мы выполняем команды, меняется на
		  пользователя root@<id>:/#
		# Запущенная в контейнере ОС минимизирована (отсутствуют некоторые пакеты, например man, python3)

  Добавление переменных окружения
    --env, -e  = установить переменные окружения
    --env-file = считать файл с переменными окружения
    Флаги -e, --env и --env-file используются для установки простых (не массивных) переменных окружения в запускаемом контейнере
    или для перезаписи переменных, определенных в Dockerfile запускаемого образа.
    Вы можете задать переменную и ее значение при запуске контейнера
     $ docker run --env VAR1=value1 --env VAR2=value2 ubuntu env | grep VAR
    # VAR1=value1
    # VAR2=value2
  
	
	$ docker start <КОНТЕЙНЕР>		- запуск остановленного контейнера
	$ docker stop <КОНТЕЙНЕР>		- остановка контейнера
	$ docker restart <КОНТЕЙНЕР>	- перезагрузка (перезапуск) контейнера
	
	docker exec
		Run a command in a running container
		
		$ docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
		
		$ docker exec [-it] <container-ID>	- выполнение команды внутри работающего контейнера
			# опция -it позволяет подключиться к работающему контейнеру
	
	$ docker run --name my_container -it [-d] ubuntu:20.04 bash
		--name - задать для контейнера имя (для удобства обращения к нему)
		-it - интерактивный режим работы с контейнером (попадаем "внутрь" контейнера)
		-d - запуск контейнера в фоновом режиме, при нажатии CTRL+D контейнер не завершит свою работу
	Прежде чем скачивать с docker hub образ, нужно сформулировать свои требования к образу и его содержимому.
	После этого выбираем самый подходящий нам образ
	
	CTRL + D - 	завершить работу контейнера
	
[]	Как остановить работу контейнера, работающего в бэкграунде:
	
	docker stop/kill			- остановить контейнер (SIGTERM + SIGKILL / SIGKILL) 
								  (gracefull-завершение/принудительное завершение)
	docker rm <container-ID>	- удалить контейнер
	docker rmi <image>			- удалить image из системы
		
		# если запущен контейнер, использующий образ, этот образ нельзя удалить
		# следует перед этим удалить все контейнеры с этим образом
		$ docker ps -a -f ancestor=hello-world:latest		# ancestor - указание на image-предок
		$ docker ps -aq -f ancestor=hello-world:latest		# вывести ID последних контейнеров hello-world
		
		Удаляем все контейнеры hello-world:
		$ docker rm $(docker ps -aq -f ancestor=hello-world:latest)
			или
		$ docker ps -aq -f ancestor=hello-world:latest | xargs docker rm 
			# xargs выводит по одной строке из stdout предыдущей (|) команды
	♦ Копирование файлов из контейнера на хост:	
		$ docker cp <container-ID>:src_path dest_path		- скопировать файл из контейнера на хост
	
	docker inspect [-f, --format] <container-ID>	- 	информация о контейнере
	docker inspect --format='{{.Config.Image}}' <container-ID>

_______________________________________________________________________________________________________

Документация
	• https://docs.docker.com/
Полезные ссылки:
	Docker самый простой и понятный туториал:
		• https://badcode.ru/docker-tutorial-dlia-novichkov-rassmatrivaiem-docker-tak-iesli-by-on-byl-ighrovoi-pristavkoi/
	Docker и docker-compose для начинающих. Докеризуем интернет-магазин:
		• https://webdevkin.ru/posts/raznoe/docker
	Руководство по Docker Compose для начинающих:
		• https://habr.com/ru/company/ruvds/blog/450312/
	Установка Docker Engine на Ubuntu Server:
		• https://habr.com/ru/sandbox/149480/
	Установка Docker на Ubuntu
		• https://losst.ru/ustanovka-docker-na-ubuntu-16-04
Книги
	• Моуэт Э. "Использование Docker"
Видео
	Контейнерная виртуализация в Linux	(Лекция)


#####################################
# Полезные опции команды docker run #
#####################################

*******************
* -w || --workdir *
*******************
(https://docs.docker.com/reference/cli/docker/container/run/#workdir)
  = задать рабочую директорию

---< Пример: >---
docker run -w /path/to/dir/ -i -t ubuntu pwd
---
#> Опция -w запускает выполнение команды внутри указанного каталога,
#  в данном примере - /path/to/dir/.
#  Если путь не существует, Docker создаст его внутри контейнера.