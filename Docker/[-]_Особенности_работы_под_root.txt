Почему процессы в контейнерах Docker не должны запускаться от имени Root

[sources:]
1) https://vk.com/@greyteam-pochemu-processy-v-konteinerah-docker-ne-dolzhny-zapuskatsya#:~:text=Root%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%B0%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%BD%D0%B5%D0%BF%D1%80%D0%B8%D0%B2%D0%B8%D0%BB%D0%B5%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%BC,%D0%BF%D1%80%D0%B8%D0%B2%D0%B8%D0%BB%D0%B5%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%80%D0%B5%D0%B6%D0%B8%D0%BC%20%D0%BF%D1%80%D0%B8%20%D0%B7%D0%B0%D0%BF%D1%83%D1%81%D0%BA%D0%B5%20%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80%D0%BE%D0%B2.
2) Лиз Райс "Безопасность контейнеров. Фундаментальный подход к защите контейнеризированных приложений" - СПб.: Питер, 2021


[Тезисы (1)]
"""
Процессы в контейнере Docker не должны запускаться от имени root.
Безопаснее запускать приложения от имени пользователя, не являющегося root, которое вы указываете в Dockerfile или при использовании docker run.
Это минимизирует риск, так как уменьшает поверхность атаки для любых угроз в вашем контейнере.
...
Демон Docker запускается от имени root на вашем хосте, и запущенные контейнеры также будут запускаться от имени root.
Хотя может показаться, что root внутри контейнера является независимым пользователем, на самом деле это то же самое, что и учетная запись root на вашем хосте.
Разделение обеспечивается только механизмами изоляции контейнеров Docker.
Нет прочной физической границы; ваш контейнер – это еще один процесс, запущенный пользователем root на ядре вашего хоста.


Это означает, что уязвимость в вашем приложении, среде выполнения Docker или ядре Linux может позволить злоумышленникам выйти из контейнера и выполнить операции с правами root на вашей машине.
...
Root внутри контейнера является непривилегированным и имеет ограниченные возможности. Это не позволяет контейнеру использовать команды системного администрирования, если вы вручную не добавите возможности или не используете привилегированный режим при запуске контейнеров.

Наилучшей практикой для контейнерных приложений является запуск от имени обычного пользователя.

Большинству программ не нужен root-доступ, поэтому смена пользователя обеспечивает немедленный уровень защиты от взлома контейнера.

Вы должны создать новую учетную запись пользователя как один из последних этапов в вашем Dockerfile.
...

Лучшим вариантом для регулярно используемых образов является создание собственного производного образа, в котором можно установить новую учетную запись пользователя:
---
FROM image-that-runs-as-root:latest
USER demo-user
$ docker build . -t image-that-now-runs-as-non-root:latest
////

[!] Root в контейнере – это тот же root, что и root на вашем хосте, поэтому успешная компрометация может обеспечить контроль над вашей машиной.
"""

# Рекомендуемые действия по созданию/использованию непривилегированного пользователя с помощью директивы USER <username>:<groupname> || USER <UID>:<GID>

[+] Вы можете еще больше усилить безопасность,
  -> УДАЛИВ ВСЕ ВОЗМОЖНОСТИ из контейнера с помощью –cap-drop=ALL,
  --> а затем включив в белый список те, которые необходимы, с помощью флагов –cap-add.


##################################################################
---<2>---
[стр.36]
контейнеры запускают процессы Linux, видимые с хоста.
Контейнеризованный процесс использует системные вызовы и требует таких же прав доступа и полномочий, что и обычный. 
Но контейнеры позволяют иначе управлять назначением этих прав доступа во время выполнения или процесса сборки образа контейнера, что существенно влияет на безопасность.
