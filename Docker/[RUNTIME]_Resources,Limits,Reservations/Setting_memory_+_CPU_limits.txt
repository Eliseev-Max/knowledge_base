Ограничения ресурсов для контейнеров Docker

[sources:]
  1) "Setting Memory And CPU Limits": https://www.baeldung.com/ops/docker-memory-limit

[!] По умолчанию доступ к вычислительной мощности хост-машины неограничен.

#############################################
# Одиночный запуск контейнеров (docker run) #
#############################################
  * ограничить доступную контейнеру память:
    1) -m = жёсткое ограничение (limits)
      $ docker run -m 512m <docker-image>

    2) reservation = мягкое ограничение
      # Оно активируется, когда docker обнаруживает недостаток памяти на хост-машине:
      $ docker run -m 512m --memory-reservation=256m <docker-image>

    3) Помимо установки лимита памяти, мы можем определить объем памяти подкачки (swap memory), доступной контейнеру.
       Для этого установите для параметра -memory-swap значение большее, чем (-m) memory limit
       $ docker run -m 512m --memory-swap 1g <docker-image>

       -> если --memory-swap = 0,
         значение обрабатывается как неопределенное, и конфигурация подкачки игнорируется.
       -> если --memory-swap= -1
         контейнер может использовать неограниченное количество памяти подкачки в пределах доступного объема хоста.
       -> если оба параметра (-m == --memory-swap) имеют одинаковое значение,
         контейнер не может использовать подкачку.
         Это происходит потому, что параметр -memory-swap = общая доступная память
         (включая физическую и память подкачки (RAM + swap))

  * ограничить вычислительную мощность (CPU)
      --cpus = установить ограничение на количество процессоров.
      $ docker run --cpus=2 <docker-image>

      Мы также можем указать приоритет выделения процессора (--cpu-shares).
      (по умолчанию он равен 1024,
       более высокие числа означают более высокий приоритет:
      )
      $ docker run --cpus=2 --cpu-shares=2000 <docker-image>

    [+] можно указать, к каким процессорам или ядрам будет иметь доступ контейнер (--cpuset-cpus)
      $ docker run --cpus=.5 --cpuset-cpus=1 <docker-image>
      # =  контейнер может использовать до 50 % процессора 1.

    #[Диапазон]
      Если хост имеет более одного процессора, можно указать диапазон, например [0-2],
      в котором контейнер может использовать первые три процессора.
    #[Список]
      можно задать список, например [0, 2], в котором указано, что контейнер может использовать только эти процессоры.

    [+] мы можем настроить период CFS и квоту для контейнера.
    (!) Мы должны настроить оба параметра одновременно.

      $ docker run --cpu-period=100000 --cpu-quota=50000 <docker-image>
      # контейнер может использовать до 50 % CPU (эквивалентно --cpus=.5): 


###############################################
# Setting Limits With the docker-compose File #
###############################################

  Можно добиться аналогичных результатов, используя файлы docker-compose.
[!] формат и возможности в разных версиях docker-compose могут отличаться.

******************************************
* Versions 3 and Newer With docker swarm *
******************************************

# нужно создать сегменты deploy и resources в конфигурации service'а:
---
services:
  service:
    image: nginx
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    cpuset: "1"
    ports:
      - "80:80"
---
[!] В Docker Compose v3 параметр memswap_limit НЕ ПОДДЕРЖИВАЕТСЯ НАПРЯМУЮ.
(!) Обратите внимание, что параметр cpuset-cpus изменился и теперь является просто cpuset.

# Контейнеру, запущенному с помощью docker compose, доступны
##  * половина (cpus: '0.50') процессора 1 (cpuset: "1")
##  * 512 мегабайтам памяти (memory: 512M).

# Резервы (reservations):
## четверть процессора (cpus: '0.25')
#и
## 128 мегабайт памяти (memory: 128M)

[!] Чтобы воспользоваться сегментом deploy в файле docker-compose, нам нужно использовать команду docker stack.
Чтобы развернуть стек в рое, мы выполняем команду deploy:
---
$ docker stack deploy --compose-file docker-compose.yml bael_stack
---

*********************************
* Version 2 With docker-compose *
*********************************

В старых версиях docker-compose мы можем размещать ограничения ресурсов на том же уровне, что и основные свойства service'а.
Они также имеют немного другое название:
---
services:
  service:
    image: nginx
    mem_limit: 512m
    mem_reservation: 128M
    memswap_limit: 1g
    cpus: "0.5"
    cpuset: "1"
    ports:
      - "80:80"
---


###################################
# Проверка использования ресурсов #
###################################

  После того как мы установили лимиты, мы можем проверить их с помощью команды docker stats
---
$ docker stats
####_OUTPUT_####
CONTAINER ID        NAME                                             CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS
8ad2f2c17078        bael_stack_service.1.jz2ks49finy61kiq1r12da73k   0.00%               2.578MiB / 512MiB   0.50%               936B / 0B           0B / 0B             2
---


################################
# Compose Deploy Specification #
################################

Deploy - это необязательная часть спецификации Compose.
  Она предоставляет набор спецификаций развертывания для управления поведением контейнеров в различных средах.

Одним из атрибутов deploy является resources
resources настраивает ограничения физических ресурсов для запуска контейнера на платформе.
Эти ограничения могут быть настроены как:
  * limits
    = платформа должна ЗАПРЕТИТЬ контейнеру выделять больше.

  * reservations
    = платформа должна ГАРАНТИРОВАТЬ, что контейнер сможет выделить НЕ МЕНЕЕ настроенного объема.

---
services:
  frontend:
    image: example/webapp
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
          pids: 1
        reservations:
          cpus: '0.25'
          memory: 20M
---

cpus
  = настраивает ограничение или резервирование на то, сколько доступных ресурсов процессора (в виде количества ядер) может использовать контейнер.

memory
  = настраивает ограничение или резервирование объема памяти, который может быть выделен контейнеру;
    задается в виде строки, выражающей значение байта.

pids
  = настраивает предел PID контейнера, заданный в виде целого числа.

devices
  = настраивает резервирование устройств, которые может использовать контейнер.
    Он содержит список резервирований, каждое из которых задается как объект со следующими параметрами:
    capabilities,
    driver,
    count,
    device_ids   и
    options.

  Устройства резервируются с помощью списка capabilities, причем capabilities являются ЕДИНСТВЕННЫМ ОБЯЗАТЕЛЬНЫМ ПОЛЕМ.
  Для успешного резервирования устройство должно удовлетворять всем запрошенным возможностям.

  capabilities
    = задаются в виде списка строк, выражающих как общие, так и специфические возможности драйвера.
      На сегодняшний день распознаются следующие общие возможности:
      * gpu: Graphics accelerator
      * tpu: AI accelerator

    Во избежание путаницы в названиях, возможности конкретного драйвера должны иметь префикс с названием драйвера.
    Например, резервирование ускорителя с поддержкой nVidia CUDA может выглядеть следующим образом:
---
deploy:
  resources:
    reservations:
      devices:
        - capabilities: ["nvidia-compute"]
---

    driver
      = С помощью поля driver можно запросить другой драйвер для зарезервированного устройства (устройств).
        Значение указывается в виде строки.

---
deploy:
  resources:
    reservations:
      devices:
        - capabilities: ["nvidia-compute"]
          driver: nvidia


  count
    = если значение count равно all или не указано, Compose резервирует все устройства, удовлетворяющие запрошенным возможностям.
      В противном случае Compose резервирует не менее указанного количества устройств.
      Значение задается в виде целого числа.

---
deploy:
  resources:
    reservations:
      devices:
        - capabilities: ["tpu"]
          count: 2
---

  Поля count и device_ids являются эксклюзивными.
[!] Compose возвращает ошибку, если указаны оба поля.


device_ids
  Если задано значение device_ids, Compose резервирует устройства с указанными идентификаторами, если они удовлетворяют запрошенным возможностям.
  Значение задается в виде списка строк.

---
deploy:
  resources:
    reservations:
      devices:
        - capabilities: ["gpu"]
          device_ids: ["GPU-f123d1c9-26bb-df9b-1c23-4a731f61d8c7"]
---

    count and device_ids fields are exclusive.
    Compose returns an error if both are specified.


options
  Driver specific options can be set with options as key-value pairs.

---
deploy:
  resources:
    reservations:
      devices:
        - capabilities: ["gpu"]
          driver: gpuvendor
          options:
            virtualization: false
---