Kubectl

[sources:]

0) [en] "Command line tool (kubectl)": https://kubernetes.io/docs/reference/kubectl/
## [ru] "kubectl CLI": https://kubernetes.io/ru/docs/reference/kubectl/
   

1) "Полезные команды и советы при работе с Kubernetes через консольную утилиту kubectl": https://habr.com/ru/companies/flant/articles/333956/

2) "Шпаргалка по kubectl": https://kubernetes.io/ru/docs/reference/kubectl/cheatsheet/

2+) https://kubernetes.io/ru/docs/tasks/tools/install-kubectl/
||
4) "Обзор kubectl": https://kubernetes.io/ru/docs/reference/kubectl/overview/

5) "kubectl": https://kubernetes.io/ru/docs/reference/kubectl/kubectl/
#+more+: "Install Tools": https://kubernetes.io/docs/tasks/tools/#enabling-shell-autocompletion

Kubectl — это инструмент командной строки для управления кластерами Kubernetes.
kubectl ищет файл config в директории $HOME/.kube.
Можно указать другие файлы kubeconfig:
  ✓ установив переменную окружения KUBECONFIG
    <или>
  ✓ флаг --kubeconfig.

[Синтаксис]

kubectl [command] [TYPE] [NAME] [flags]

  command:
    = определяет выполняемую операцию с одним или несколькими ресурсами
      (например: create, get, describe, delete)

  TYPE:
    = определяет тип ресурса.
      Типы ресурсов НЕ ЧУВСТВИТЕЛЬНЫ к регистру,
      Кроме этого вы можете использовать
        + единственную (pod) 
        + множественную (pods)
          или
        + сокращенную (po)
        форму

# следующие команды выведут одно и то же.
--<SH>--
kubectl get pod pod1
# ===
kubectl get pods pod1
# ===
kubectl get po pod1
--__--


  NAME:
    = определяет имя ресурса.
      Имена чувствительны к регистру.
      Если ИМЯ НЕ УКАЗАНО, то отображаются подробности по всем ресурсам
      (например: kubectl get pods)

  # При выполнении операции с несколькими ресурсами можно
    * выбрать каждый ресурс по ТИПУ и ИМЕНИ
    * либо сделать это в одном или нескольких файлов:

    [Выбор ресурсов по типу и имени:]
      Сгруппировать ресурсы, если все они одного типа: TYPE1 name1 name2 name<#>.
      # Пример: $ kubectl get pod example-pod1 example-pod2

    [Выбор нескольких типов ресурсов по отдельности:]
      TYPE1/name1 TYPE1/name2 TYPE2/name3 TYPE<#>/name<#>.
      # Пример: $ kubectl get pod/example-pod1 replicationcontroller/example-rc1

    [Выбор ресурсов по одному или нескольким файлам:]
      -f file1 -f file2 -f file<#>

(!) Используйте YAML вместо JSON
  # так как YAML удобнее для пользователей, особенно в конфигурационных файлах.

Пример: kubectl get pod -f ./pod.yaml


  flags:
    = определяет дополнительные флаги.
      # Например, флаги -s или --server => указать адрес и порт API-сервера Kubernetes.


****************
* kubectl logs *
****************

  = печать логов для контейнера в Pod'е или указанном ресурсе.
    Если в Pod есть только один контейнер, имя контейнера необязательно.

[Usage:]

$ kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]

[Flags:]
  --all-containers
    = получить логи всех контейнеров в Pod'е (Pod'ах)

  --follow, -f
    = указывает, что следует передавать логи в потоковом режиме.

  --prefix
    = префикс каждой строки лога с указанием источника лога (имя Pod'а и контейнера).

  --previous, -p
    = если true, вывести логи для предыдущего экземпляра контейнера в Pod'е,
      если он существует.

  --selector, -l
    = Селектор (запрос метки) для фильтрации

  --since <int>s
    = Возвращает только логи, более новые, чем относительная продолжительность,
      например 5s, 2m, or 3h
      По умолчанию - все логи.
      Может использоваться только одно из значений since-time / since.

  --since-time
    = возвращает только логи после определенной даты (RFC3339).
      По умолчанию - все журналы.
      Может использоваться только одно из значений since-time / since.

  --tail
    = Строки последнего файла журнала для отображения.
      (По умолчанию -1 при отсутствии селектора, показывает все строки журнала,
       иначе 10, если селектор указан).

  --timestamps (default = false)
    = включить временные метки в каждую строку журнала

#(примеры разобраны в правой колонке: https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs)

