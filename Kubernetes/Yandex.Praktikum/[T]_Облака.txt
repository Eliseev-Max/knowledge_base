##########
# Облака #
##########

Из этого урока вы узнаете:
  * Краткую историю появления облаков.
  * Что такое облачный провайдер, облачные вычисления, облачные сервисы.
  * Какие сейчас существуют облачные провайдеры и чем они отличаются.
  * Какие сервисы предоставляют облачные провайдеры.
  * Какие варианты деплоя облаков бывают и когда/какой из них лучше использовать.


ОБЛАЧНОЕ ВЫЧИСЛЕНИЕ (проще всего — облако)
  — это модель обеспечения повсеместного, удобного сетевого доступа (по требованию)
    к общему пулу настраиваемых вычислительных ресурсов(*), которые могут быть быстро созданы и настроены по нажатию кнопки.

(*) например, сетей, серверов, хранилищ, приложений и служб

ОБЛАЧНЫМИ ПРОВАЙДЕРАМИ называются компании, которые предоставляют различные услуги и решения, базирующиеся на облачных вычислениях.

ОБЛАЧНЫЙ СЕРВИС — это любой IT-ресурс, к которому обеспечивается удалённый доступ через облако.

В образовании облаков могло бы помочь (помогло) изобретение виртуальной машины:
  В 1960-х годах IBM занималась разработкой виртуальной машины на ОС CP-40 и CP-67,
  а с 72-х они начали продавать технологию виртуальных машин для мейнфреймов.


"""
  Сертификаты безопасности
    — различные ЦОДы одного и того же провайдера могут иметь различные сертификаты безопасности,
      провайдер может не подлежать определённой сертификации полностью.

  В способах работы с облаком указаны ТОЛЬКО ОФИЦИАЛЬНЫЕ КЛИЕНТСКИЕ БИБЛИОТЕКИ.

  Приведена минимальная стоимость, конфигурации могут сильно отличаться.
"""

Для гибкого управления инфраструктурой облачный провайдер предлагает клиентам различные инструменты:

***************
* Инструменты *
***************

  ✓ WebUI
  ✓ CLI
  ✓ API Средств управления облаком (API OpenStack)
  ✓ Открытое API и его документация (API Reference, Swagger)
  ✓ Open Source API SDK для различных языков программирования
  ✓ Построенные на API SDK официальные модули для систем управления конфигурацией (Ansible, Terraform)
  ✓ Мобильное приложение (vscale)


************************
* Преимущества облаков *
************************

  ✓ Там безопасно
      — это прежде всего!
        Поддержка сертификатов, гибкое управление доступами, защита от DDOS атак.

  ✓ Можно создавать виртуалки в разных странах (а это же геораспределение из коробки)

  ✓ Гибкость:
      можно создавай дополнительную виртуалку с ростом нагрузки,
      можно — удалять существующую, чтобы не платить за простаивающие мощности
      # при этом биллинг придёт только за время жизни виртуалки,
      # после чего сделают перерасчёт.

  ✓ меньшие материальные затраты
    по сравнению с содержанием своего дата-центра + команды для облаков.


[!] Вовсе не обязательно использовать облако, развёрнутое на железе провайдера.
    Можно попросить их развернуть облако у нас
      или
    часть облака на наших, а часть — на их серверах.


***********************************
* 4 модели развёртывания облаков: *
***********************************

  ● Частное облако
    = облачная инфраструктура, которая предназначена ИСКЛЮЧИТЕЛЬНО ДЛЯ ИСПОЛЬЗОВАНИЯ ОДНОЙ ОРГАНИЗАЦИЕЙ.
      Управляет облаком 
        > сама организация  ||
        > подрядчики        ||
        > и те и другие.
      Облако можно развернуть
        ➜ как на ресурсах компании,
        ➜ так и на сторонних.

  ● Публичное облако
    = провайдер создаёт облако и даёт к нему доступ НЕСКОЛЬКИМ клиентам,
      но физического ДОСТУПА К ЖЕЛЕЗУ у пользователя НЕТ.
      Облако
        ✓ существует на территории облачного провайдера
        ✓ и управляется облачным провайдером.

  ● Гибридное
    = частные + публичные облака =
    = часть ресурсов в своих облаках, а часть в публичных.

  ● Мультиоблако
    = компоненты приложения расположены в облаках РАЗНЫХ ПРОВАЙДЕРОВ.
      Оно состоит из двух и более облаков ЛЮБОГО ТИПА.
      В отличие от ГИБРИДНЫХ сред, где
        > процессы осуществляются ПОСЛЕДОВАТЕЛЬНО,
        > публичные и частные сервисы перемежаются, чтобы достичь определённого результата,
      МУЛЬТИОБЛАЧНЫЕ решения работают параллельно,
        и каждый облачный сервис выполняется НЕЗАВИСИМО ОТ ДРУГИХ.


**************************************************************************************
* Несколько советов, которые помогут при переезде приложения в облако от провайдера: *
**************************************************************************************

  1) Приложение должно уметь жить в облаке.

  2) Надо проверить, а можно ли вообще отвезти приложение в облако,
     или есть ограничения, например, особые требования по защите персональных данных пользователей.

  3) Если на бэкендах есть хранение состояний (statefull),
     то нужно решить, как вы будете хранить состояния между запросами:
       => как правило, в облаках контейнер может быть уничтожен в любой момент.
       Хранить состояние можно
         * в cookies,
         * в БД
         * или других подобных хранилищах.

  4) Использовать managed базы данных, которые предоставляют облака.

  5) Если нужно хранить файлы, то использовать S3-реализацию вашего облачного провайдера.

  6) Приложение должно легко масштабироваться в обе стороны:
       > при увеличении количества реплик — делить нагрузку,
       > при уменьшении — подхватывать обязанности тех, кто ушёл,
         а не стопорить работу приложения полностью.

  7) Использовать специальные инструменты для хранения секретов и научить приложение с ними работать.


##################
# ПОДВЕДЁМ ИТОГИ #
##################

  ● Облачный провайдер — в том числе, вопрос инфраструктуры:
      кроме простых виртуалок, есть различные сервисы, позволяющие строить инфраструктуру для приложения по кнопке.
      К примеру, чтобы в хостинг-провайдере у вас появилась база данных с репликациями и бэкапами,
      вам нужно создать виртуалки, развенуть на них БД и настроить всю инфраструктуру ручками.
      В облаке же вы просто давите на кнопочку и получаете базу, а про бэкапы, репликацию и прочую инфраструктурную мишуру за вас думает провайдер.

  ● Облака могут располагаться в разных дата-центрах, в разных странах.

  ● У всех облаков есть похожие сущности, хоть они и называются по-разному.

  ● Биллинг гибкий, правда, есть минус:
      = не всегда очевидная тарификация, особенно для Kubernetes.

  ● Есть защита от DDoS,
      + облачные провайдеры соблюдают законы страны, где располагаются
      —> это облегчает способ входа в другую страну.

  ● Экономически невыгодно для БОЛЬШИХ КОМПАНИЙ
    — иногда проще поднять на своём железе облако и самим всё писать и поддерживать.


########################
# Ключевые мысли урока #
########################

  Облако — это не просто голые ресурсы, но ещё и инфраструктура для вашего сервиса.
  Приложение должно уметь жить в облаке:
    легко масштабироваться,
    думать о statefull-состояниях,
    хранить файлы в S3 (по заветам Twelve-Factor App).

  Внешние облака заманчивы, но чаще подходят только для не очень больших компаний без специфичных требований.
  В противном случае дешевле содержать свою команду облака.


######################
# Полезные материалы #
######################

Курсы для продвинутых от Yandex Cloud:
  https://cloud.yandex.ru/training/training-pro

Джон Маккарти
  https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D0%BA%D0%BA%D0%B0%D1%80%D1%82%D0%B8,_%D0%94%D0%B6%D0%BE%D0%BD

Джозеф Ликлайдер.
  https://ru.wikipedia.org/wiki/%D0%9B%D0%B8%D0%BA%D0%BB%D0%B0%D0%B9%D0%B4%D0%B5%D1%80,_%D0%94%D0%B6%D0%BE%D0%B7%D0%B5%D1%84_%D0%9A%D0%B0%D1%80%D0%BB_%D0%A0%D0%BE%D0%B1%D0%BD%D0%B5%D1%82%D1%82

The NIST Definition of Cloud Computing
  https://faculty.winthrop.edu/domanm/csci411/Handouts/NIST.pdf


"Мультиоблачная архитектура: проблемы и подводные камни":
  https://habr.com/ru/companies/sberbank/articles/752850/

"Плюсы и минусы мультиоблачной инфраструктуры":
  https://rb.ru/opinion/multicloud-structure/