Заходим в GitOps через ArgoCD

Из этого урока вы узнаете:
  ● Что такое GitOps.
  ● Какие бывают инструменты Continuous Deployment в Kubernetes, и как они работают (на примере ArgoCD).
  ● Как добавлять приложение в ArgoCD.


--< Практика в теории >--
Поды backend'а не работают.
Нужно проверить Deployment backend'а и обратить внимание, что количество реплик приложения равно 0 (spec: replicas: 0).
Чтобы восстановить работу приложения, нужно выставить количество реплик равным единице.
--||--

'''
Но что ты скажешь, если я предложу
  1) вместо увеличения и усложнения основного пайплайна
     -> завершить работу Continuous Integration и Continuous Delivery заливкой образа в Container Registry,

  2) а за Continious Deployment сделать ответственным самого Кубера?
'''

Что ещё есть у Argo помимо ArgoCD?
  -> Argo Workflows
  -> Argo Rollouts

[more:]
# site: https://argoproj.github.io/
# repo: https://github.com/argoproj/argo-cd/

[IaC]
  Основные инструменты, реализующие IaC
  — это системы управления конфигурациями (SCM), такие как Ansible, Puppet и т.д.

  Для работы с облаками берём Terraform и следуем принципу:
  "Описание инфраструктуры хранится в Git-репозитории...",
  и мы получаем за счёт этого кучу плюсов


(?) Вспомните, какие свойства/преимущества относятся к подходу IaC?

  + Простая масштабируемость

  + Простота восстановления в аварийных ситуациях
    ## Когда настройка инфраструктуры (окружения) автоматизирована,
    ## её легче развернуть с нуля, чем ремонтировать имеющуюся.

  + Стандартизация инфраструктуры и воспроизводимость
    ## инфраструктура описана в коде =>
    ## при каждом развёртывании такая инфраструктура будет идентичной другим развёртываниям.


*********************
* Что такое GitOps? *
*********************

# По сути, это развитие подхода IaC.
# Git (SCM) + Ops (=operations) = 
# = команда эксплуатации (operations) будет строить и обслуживать инфраструктуру, опираясь на Git-репозиторий.


Раз Git стоит в центре такой схемы относительно GitOps,
=> сложилось мнение, что
    Git — единая точка управления (внесения изменений)
    или же единая точка правды.

:: вместо выдачи прав на сервер —> дают права на репозиторий,
:: вместо внесений правок ВРУЧНУЮ —> правится репозиторий.

#(*) при работе с Kubernetes НЕ НУЖНО ставить kubectl на свою машину
     — хватит текстового редактора и Git.

(*) Источник правды в GitOps — это Git.
  ✓ Мы описываем желаемое состояние инфраструктуры
      в виде helm-чартов/yaml/ansible/Terraform
  ✓ исходники складываем в Git,
  ✓ и изменения инфраструктуры автоматически выкатываются в Kubernetes.

# т.о. есть возможность не допустить мёржа pull-request'а без проверки команды/ответственного и approve

+++++++++++++++++++++++++++++++++++++++++
+ Преимущества и сильные стороны GitOps +
+     (помимо присущих IaC)             +
+++++++++++++++++++++++++++++++++++++++++

  ✓ полноценное ревью для MR-конфигов инфраструктуры (ветки, апрув и остальное);

  ✓ автоматические тесты
    = можно настроить CI-пайплайн, чтобы проверить валидность конфигов,
      пока те не добрались до prod'а;

  ✓ после merge
    -> запускается CD-пайплайн,
    -> происходит магия GitOps
    -> и инфраструктура обновляется до целевой;

  ✓ вся работа с настройкой инфраструктуры ведётся через Git-репозиторий:
      надо изменить инфраструктуру —> меняете конфиги в Git,
      нужны права для изменения инфраструктуры —> достаточно выдать права только на Git
      и так далее;

  ✓ аудит
      = все изменения инфраструктуры лежат в Git;

  ✓ автоматизация
      = правки в инфраструктуре НЕ ДЕЛАЮТСЯ ВРУЧНУЮ,
        для этого есть специальные инструменты, которые синхронизируют состояние из Git.


*****************************
* Реализации GitOps-подхода *
*****************************

Существуют 2 реализации GitOps-подхода: pull- и push-модели;
  для каждой есть свои инструменты.

  ● Push deployment
      = классическая схема для Jenkins и GitLab CI/CD server,
        когда изменения отправляются в Kubernetes.

  ● Pull deployment
      = когда в кластере Kubernetes установлен специальный АГЕНТ, который
        ✓ забирает изменения из Git
        ✓ и применяет изменения к кластеру.

      Он постоянно МОНИТОРИТ и СРАВНИВАЕТ СОСТОЯНИЕ в Kubernetes с описанным в Git;
      если состояние отличается => обновляет окружение до нужного состояния.
      На этой модели работают
      ➜ FluxCD
        <и>
      ➜ ArgoCD.


[Понимание GitOps в сообществе:]
  под GitOps обычно понимают более частный случай паттерна
  = конкретную реализацию GitOps на pull-модели.

# Второго определения будем придерживаться и мы.


*****************************
* Основные принципы GitOps: *
*****************************

  1. Декларативность.
     = Вся система должна быть описана декларативно,
       то есть с помощью конфигурационных файлов, а не набора инструкций.
       В таком случае можно положиться на Git как источник правды.

  2. Версионирование и неизменяемость.
     = Уже есть описание инфраструктуры с помощью конфигов,
       есть единый источник правды — Git, из которого происходит управление инфраструктурой.
       Это упрощает откат:
         => вы можете использовать  git revert
            чтобы вернуться к предыдущему состоянию инфраструктуры в любое время.

  3. Одобренные изменения автоматически применяются к системе.
     = После того как вы сохранили состояние в Git,
       нужно разрешить АВТОМАТИЧЕСКОЕ ПРИМЕНЕНИЕ любых изменений этого состояния к нашей системе.
       # при необходимости можно добавить ручную проверку перед деплоем,
       # НО основная цель:
       # = чтобы изменения переносились [из Git] -> [в кластер Kubernetes] БЕЗ ВМЕШАТЕЛЬСТВА ЧЕЛОВЕКА,
       #(!) если они проходят ВСЕ автоматические тесты и проверки.

  4. Непрерывное согласование:
     = настроены специальные агенты, которые
       ✓ обеспечивают актуальность инфраструктуры
       ✓ и оповещают о расхождениях, если они есть.


##########################
# Инструменты для GitOps #
##########################

  ArgoCD
    = Kubernetes-native и Open Source инструмент
      для обеспечения декларативной системы непрерывной доставки (CD).
      ArgoCD поддерживает различные инструменты управления конфигурацией.

  FluxCD
    = инструмент, похожий на ArgoCD, но реализованный с другими сущностями внутри.

  JenkinsX
    = версия Jenkins, которая воплощает подход GitOps и ориентируется на работу в Kubernetes.
    (!) В отличие от FluxCD и ArgoCD, является ИНСТРУМЕНТОМ ПОЛНОГО ЦИКЛА CI/CD.
  #-> https://jenkins-x.io/
  #-> https://habr.com/ru/companies/flant/articles/352036/
  #-> https://www.jenkins.io/blog/2018/03/19/introducing-jenkins-x/


**********
* ArgoCD *
**********

ArgoCD (CD === Continious Deployment)
  — это инструмент, который позволяет организовать работу по ДЕПЛОЮ приложений в Kubernetes,
    следуя методологии GitOps.

# где-то лежит репозиторий с манифестами Кубера,
# и основная задача ArgoCD —> привести состояние Кубера в соответствие с этим репозиторием.

ArgoCD отслеживает состояние:
  ✓ репозитория
  ✓ Kubernetes

[Об изменениях в репозитории и Kubernetes:]
  * если изменения были произведены в репозитории
    => они должны примениться в Kubernetes;

  * если изменения были внесены в Kubernetes ВРУЧНУЮ
    —> они должны быть ЗАТЁРТЫ
       и применена конфигурация из репозитория.

# Назовём подход, предусматривающий построение единого длинного пайплайна = CIOps

[GitOps vs CIOps]

# На практике помимо Git существует ещё одна точка входа в систему: Image registry

Описание работы схемы "[Continuous Integration + Delivery] + [Continuous Deployment (on Argo)]"

  1) В репозитории приложения появляются изменения.
     Разработчик создал Merge Request -> который послужил триггером к запуску GitLab CI.

  2) Выполняются unit-тесты, SAST-тесты
     и коллеги пробегают Merge Request глазами (Code Review).

  3) Собираются артефакты приложения.
       ➜ бинарные файлы приложения
       ➜ образы контейнеров.
     Артефакты публикуются в репозиториях, откуда их может забрать инфраструктурная автоматизация.

  4) В нашем GitLab CI мы дёргаем специальную "ручку" с помощью клиента ArgoCD.
     #Например, мы сообщаем ArgoCD о выпуске новой версии образа контейнера
                и просим его синхронизировать приложение с этой новой версией.


************************************************
* Установка клиента, практика под руководством *
************************************************

[!] ArgoCD управляет конфигурациями Kubernetes => 
    => поэтому ему нужно иметь доступ к текущему состоянию Kubernetes =>
    => устанавливается как набор сущностей в Kubernetes

# Репозиторий. Содержимое комплекта поставки:
#-> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml


[Некоторые компоненты ArgoCD:]

  ● argocd-server
      = сервер ArgoCD.
        ✓ предоставляет веб-интерфейс для работы,
        ✓ обрабатывает запросы от Web UI и CLI.

  ● argocd-repo-server
      = локальный репозиторий для хранения скачанных и применённых копий конфигураций приложений (манифесты и чарты).
        С этими конфигурациями в дальнейшем производится СРАВНЕНИЕ.
      [+] ещё он создаёт Kubernetes-манифесты на основе:
        ✓ URL репозитория,
        ✓ номера ревизии,
        ✓ пути до приложения
        ✓ и настроек шаблонов (values.yaml и других)
        с помощью внутренних инструментов.

  ● argocd-redis
      = сервер Redis для внутренних нужд ArgoCD.

  ● argocd-application-controller
      = компонент, который проверяет текущее состояние приложения и сравнивает с целевым.
        При необходимости и исходя из настроек «донастраивает» приложение.

  ● argocd-dex
      = компонент, с помощью которого может производиться аутентификация.


(*) Для работы с ArgoCD можно использовать:
  -> web-интерфейс
    <или>
  -> командную строку.


«Приложение» (Application)
  = это абстракция ArgoCD, которая объединяет в одном месте
    ✓ исходники развёртывания (git-репозиторий или Helm-чарт),
    ✓ целевой Kubernetes-кластер
    ✓ и параметры развёртывания
      (версия образов контейнеров, секреты — в общем, то, что ты указывал в values.yaml при установке с помощью Helm)


[Сущности внутри ArgoCD:]

  1. Repositories.
       В этом разделе можно добавлять репозитории с манифестами,
       которые предполагается синхронизировать с кластером Kubernetes.

  2. Certificates.
       Если доступ к репозиториям осуществляется с помощью сертификата,
       —> заходи сюда для добавления.

  3. GnuPG keys.
       Деплой — ответственный процесс.
       Ключи позволят проверять коммиты на целостность.

  4. Clusters.
       Один инстанс ArgoCD может работать С НЕСКОЛЬКИМИ КЛАСТЕРАМИ Кубера.
       В этом разделе можно посмотреть, какие кластеры настроены для работы.
       ДОБАВЛЕНИЕ НОВЫХ инстансов возможно ТОЛЬКО через командную строку.

  5. Projects.
       Центральная и специфичная для ArgoCD сущность.
       В проектах можно задавать:
         доступные репозитории
           и
         доступные кластеры
       и с помощью политик указывать, каким пользователям, какие проекты доступны для работы
       (есть и более тонкие настройки, например, можно разрешить синхронизацию только манифестов типа service).

  6. Accounts.
       Позволяет
       ✓ посмотреть список пользователей
       ✓ сгенерировать для них токены.


"""
  Чтобы неправильные люди не имели доступа к правильным кластерам и репозиториям,
  —> нужно быть внимательными при создании проектов.
  В нашем ArgoCD по умолчанию присутствует проект, который называется так же, как ваш логин.
  К этому проекту привязан кластер default с адресом https://kubernetes.default.svc.
  Внутри проекта можно создавать приложения.
  Откройте его и посмотрите настройки.
"""

[!] Обратите внимание!
  возможность подключения Kubernetes-кластера для вашего пользователя ограничена.
  В Web-интерфейсе ArgoCD целевой кластер для развёртывания приложений находится в настройках проекта,
  в разделе DESTINATIONS.
#(Projects -> std-017-033 -> DESTINATIONS)  

Имя кластера:    default
Адрес кластера:  https://kubernetes.default.svc

# Это кластер из предыдущих уроков, поэтому здесь вы увидите свой Namespace.

##_ С Web UI у нас всё._##

Чтобы добавить приложение в Kubernetes, нужно создать новый app в ArgoCD.

[CLI]
  Чтобы подключиться к ArgoCD с помощью CLI, нужно соблюсти два условия:
  1) Знать свой сгенерированный токен, который был опубликован в канале xx_dvs_info (xx — номер когорты).
---
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJ2aWV3OmFwaUtleSIsIm5iZiI6MTY4NjUwMDI4NCwiaWF0IjoxNjg2NTAwMjg0LCJqdGkiOiJjOTY4ZWU2ZC1lMTYwLTRmODAtOWZkMS1iNTRhZGU2YWM3ZjUifQ.X0KX9xj64eexbSYcPp92kVPUyyo0Y2t3h0zUk087OK8
---
  2) Установить утилиту argocd.

****************************
* Установка ArgoCD в Linux *
****************************

-->
curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
chmod +x /usr/local/bin/argocd
argocd version
<--
# Когда будет установлен CLI клиент — можно начать работать с ArgoCD через консоль.

[!] Токен был сгенерирован с правами только НА ПРОСМОТР


[Опции для подключения клиента ArgoCD к argo server'у:]

  --auth-token $TOKEN
    = токен пользователя, под кредами которого будут проходить все команды;

  --server $SERVER_IP:$PORT
    = наш сервер и порт, на котором он развёрнут (если порт 443, то можно указать адрес сервера без него);

  --insecure
    = если используется сервер без валидного сертификата, может понадобиться отключение его проверки.

--<Посмотреть список приложений>--
$ argocd app list --auth-token $TOKEN --server $SERVER

# --server  = Argo CD server address
# --auth-token  = Authentication token; set this or the ARGOCD_AUTH_TOKEN environment variable

# for more: https://github.com/argoproj/argo-cd/blob/master/docs/user-guide/commands/argocd_app.md

| NAME | CLUSTER | NAMESPACE | PROJECT | STATUS | HEALTH | SYNCPOLICY | CONDITIONS | REPO | PATH | TARGET |
| argocd/app | https://kubernetes.default.svc | betta-nikolay-nikolaev | nikolay-nikolaev | Unknown | Unknown | Auto | ComparisonError,DeletionError,InvalidSpecError,OrphanedResourceWarning | https://nexus.praktikum-services.ru/repository/argo-nikolaev/ | 0.1.8 |
| argocd/test  | https://kubernetes.default.svc | 02-aleksandr-pushkin | pushkin | Unknown | Healthy | <none> | ComparisonError | https://nexus.praktikum-services.ru/repository/sausage-store-Pushkin-Alexander-helm/ | 0.1.1 |
| argocd/dads | https://kubernetes.default.svc | 03-nikolai-nekrasov | nekrasov123 | OutOfSync | Missing | <none> | OrphanedResourceWarning | https://github.com/argocd-example | guestbook | HEAD |
---

--< Получение более полной информации о пользователе >--
$ argocd account get-user-info --auth-token $TOKEN --server $SERVER
Logged In: true
Username: ci
Issuer: argocd
Groups:
---

# Official Documentation: https://github.com/argoproj/argo-cd/tree/master/docs/user-guide/commands

--<EditAsYAML>--
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ''
spec:
  destination:
    name: ''
    namespace: ''
    server: ''
  source:
    path: ''
    repoURL: ''
    targetRevision: HEAD
  sources: []
  project: ''
<--#

--<argo-app.yaml>--
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # ArgoCD видит все установленные Helm-релизы в кластере,
  # (!) укажи своё имя, чтобы избежать конфликтов
  name: sausage-store-<student name>
spec:
  project: <имя твоего проекта в ArgoCD, посмотри в настройках в разделе Projects>
  destination:
    namespace: <имя твоего неймспейса в кластере Kubernetes>
    # Используй этот URL для работы с Kubernetes-кластером
    server: 'https://kubernetes.default.svc'
  source:
    path: ''
    # Это ссылка к Helm-репозиторию с Helm-чартом
    repoURL: 'https://nexus.k8s.praktikum-services.tech//repository/sausage-store-<your repo>'
    targetRevision: 0.1.0
    chart: sausage-store
    helm:
      values: |
        <содержимое твоего values.yaml>

  syncPolicy:
    automated:
      prune: false
      selfHeal: false

##//##

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Настройка соединения с репозиторием !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Производится в Settings -> Repositories

Connection method: VIA HTTPS

CONNECT REPO USING HTTPS
  Type: Helm
  Project: <заранее созданный проект> std-017-033
  Repository URL: <адрес репозитория Nexus БЕЗ ПОСЛЕДНЕГО СЛЭША!>
# https://nexus.praktikum-services.tech/repository/sausage-store-helm-max-eliseev-32
  Username: 
  Password:


########################
# Ключевые мысли урока #
########################

  * GitOps — это Iac на максималках.
    В зависимости от проекта, позволяет выстраивать красивую, понятную инфраструктуру.

  * Репозиторий с приложением и репозиторий с инфраструктурой могут быть разделены.

  * Этап деплоя может существовать отдельно от Continuous Integration.

  * ArgoCD — лёгкий в освоении инструмент CD, который обладает мощью подхода GitOps для работы с Kubernetes.


######################
# Полезные материалы #
######################

GitOps and Kubernetes. Billy Yuen, Jesse Suen, Alex Matyushentsev, Todd Ekenstam.

Официальная документация ArgoCD: https://argo-cd.readthedocs.io/en/stable/

Познакомьтесь с Workflows, Rollouts и другими продуктами Argo:
# https://argoproj.github.io/


(!) Бесплатный курс «Деплой инфраструктуры по модели gitops» от Yandex Cloud
# — если вы хотите больше узнать про работу в облаках.


[!] «Что такое GitOps и почему он (почти) бесполезен. Часть 2», статья на Хабре.
# https://habr.com/ru/company/gazprombank/blog/717098/

Список полезных ресурсов по GitOps, репозиторий в GitHub:
# https://github.com/weaveworks/awesome-gitops


## Issue:

Unable to create application: application spec for sausage-store-eliseev-max is invalid:
InvalidSpecError: repository not accessible: repositories not accessible:
&Repository{Repo: "https://gitlab.praktikum-services.ru/std-017-033/infrastructure.git", Type: "", Name: "", Project: ""}:
repo client error while testing repository: rpc error: code = Unknown desc = error testing repository connectivity:
yaml: line 3: mapping values are not allowed in this context