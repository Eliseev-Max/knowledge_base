Практика 10.2

Задание 1. Бизнес-дашборд

  На существующем дашборде Sausage Store Business создайте по одному графику трафика заказов для каждой сосиски.
# rate(sausage_orders_total{type="$sausage_type"}[5m])
  
Молочная
rate(sausage_orders_total{type="Молочная"}[5m])

Мюнхенская
rate(sausage_orders_total{type="Мюнхенская"}[5m])

Нюренбергская
rate(sausage_orders_total{type="Нюренбергская"}[5m])

Особая
rate(sausage_orders_total{type="Особая"}[5m])

Русская
rate(sausage_orders_total{type="Русская"}[5m])

Сливочная
rate(sausage_orders_total{type="Сливочная"}[5m])


Задание 2. Дашборд для мониторинга приложения
>> Создайте дашборд Sausage Store App и расположите в нём графики четырёх золотых сигналов:
  1) Задержка обработки запросов к URL /api/orders.
    Здесь нам интересно отслеживать 99 перцентиль времени обработки всех заказов.

  2) Трафик успешных запросов в секунду к бизнес-эндпоинтам бэкенда.
    В этом графике нужно ИСКЛЮЧИТЬ такие запросы как
      хелсчеки Kubernetes (/actuator/health)
      и сбор метрик Prometheus (/actuator/prometheus),
    а в качестве метрики использовать счётчик count гистограммы http_server_requests_seconds.

  3) Частота ошибок обращения к бизнес-эндпоинтам бэкенда в секунду.
  В качестве метрики можно использовать счётчик count гистограммы http_server_requests_seconds с лейблом status="404".

  4) И, наконец, график насыщения
  = общее использование памяти jvm_memory_used_bytes в процентах, как для кучи, так и для других целей.

  Посмотрите PromQL выражения в панелях Heap used и Non-Heap used дашборда JVM (Actuator)
  и постройте агрегированный график использования памяти.

(!) PromQL запросы поддерживают регулярные выражения В ЗНАЧЕНИЯХ ЛЕЙБЛОВ или ИМЁН МЕТРИК.

Например, для УСПЕШНЫХ HTTP-запросов можно указать выражение для лейбла status!~"4..".

#######################################

1) histogram_quantile(0.99, rate(http_server_requests_seconds_bucket{uri="/api/orders"}[5m]))

2) rate(http_server_requests_seconds_count{uri!="/actuator/prometheus", uri!="/actuator/health", outcome="SUCCESS"} [5m])

3)
rate(http_server_requests_seconds_count{status="404"} [5m])


4) sum(jvm_memory_used_bytes{instance="$instance"})*100/sum(jvm_memory_max_bytes{instance="$instance"})
sum(jvm_memory_used_bytes{instance="$instance"})*100/sum(jvm_memory_max_bytes{instance="$instance"})
# Heap used:
sum(jvm_memory_used_bytes{instance="$instance", area="heap"})*100/sum(jvm_memory_max_bytes{instance="$instance", area="heap"})

#Non-Heap used:
sum(jvm_memory_used_bytes{instance="$instance", area="nonheap"})*100/sum(jvm_memory_max_bytes{instance="$instance", area="nonheap"})