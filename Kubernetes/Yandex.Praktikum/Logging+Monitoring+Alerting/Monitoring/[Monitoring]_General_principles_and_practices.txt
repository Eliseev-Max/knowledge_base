Мониторинг: общие принципы и практики


Из этого урока вы узнаете:
  ● Что такое мониторинг
  ● О важности мониторинга
  ● О типах метрик и четырёх золотых сигналах


КАЧЕСТВО предоставляемых пользователям услуг необходимо определять с помощью измеримых метрик
  = численных значений ключевых характеристик приложения, таких как
   ✓ время ответа пользователю на типовой запрос
   ✓ или максимальное время, в течение которого сайт может не работать.

Эти метрики указываются в специальном документе — SLA (Service Level Agreement)
  = договоре между заказчиком услуги и её поставщиком.

Этот договор содержит
  - описание услуги,
  - права и обязанности сторон
  - [!] прописанные значения метрик качества услуги.

# Он должен быть опорой при оценке качества и работоспособности сервиса,
# а не возможностью «отсудить» у безалаберной компании неустойку, как можно подумать на первый взгляд.

Мониторинг =
  + сбор                                |
  + хранение                            |=> количественных данных о системе
  + и отображение в реальном времени    |


Количественными данными могут выступать:
  - количество запросов и типы запросов;
  - количество ошибок и типы ошибок;
  - время обработки запроса;
  - время работы сервера.


Общую задачу мониторинга можно разделить на три части:

  ● Оповещения людей, если что-то пошло не так.
      В тот момент, когда ключевые метрики достигают пороговых значений
      или когда компонент сервиса перестаёт функционировать,
      нужна помощь человека в анализе проблемы, смазке и замене запчастей.

  ● Отладка помогает находить проблемы и ошибки в системе.
      Под рукой инженера должны быть полезные и удобные инструменты
      для дебага и анализа текущей ситуации и исторических данных происходящего:
      ✓ графики утилизации ресурсов,
      ✓ визуализация прохождения запроса в сложной многоступенчатой системе.

  ● Анализ тенденций необходим для оценки изменения поведения сервиса с течением времени.
    Такой анализ имеет большую ценность
      ✓ как для предотвращения проблем и планирования ресурсов,
      ✓ так и для бизнес-аналитики.


(?) Для чего же нам нужен мониторинг?
    ✓ Строить графики и делать прогнозы на основе данных (например, расход места на диске)
    ✓ Настроить себе пачку уведомлений об ошибках и спать спокойно… пока эти уведомления об ошибках не придут
    ✓ Хранить метрики


Подход к построению процессов мониторинга сервисов можно разложить на 3 слоя:
  ● бизнес,
  ● прикладной
  ● инфраструктурный

#(!) С каждого слоя необходимо собирать метрики для комплексного анализа работоспособности приложения. 


***************
* Бизнес-слой *
***************

  — это данные, отражающие активность и опыт КОНЕЧНОГО ПОЛЬЗОВАТЕЛЯ.
  По ним формируются количественные и качественные метрики сервиса.

# Например, если говорить про нашу сосисочную, то метриками бизнес-уровня будут
 * объёмы заказов в единицу времени
 * и их разбивка по географии заказов.

Как правило, метрики этого уровня ИНДИВИДУАЛЬНЫ ДЛЯ КАЖДОГО СЕРВИСА.


*******************
* Прикладной слой *
*******************

  — данные о работе приложений, реализующих бизнес-логику сервиса.

# Например:
  * статусы и состояние модулей сервиса,
  * штатные метрики фреймворков и языков программирования.

  На этом уровне уже можно использовать готовые механизмы экспорта данных:
    ✓ библиотеки Prometheus для языков программирования
    ✓ или готовые exporters
  в систему мониторинга.
=> Это упростит интеграцию с используемыми технологиями в сервисе.

[!] Экспорт данных или метрик мониторинга — это представление значений измеряемых показателей в формате системы мониторинга.


*************************
* Инфраструктурный слой *
*************************

  — данные о работе приложений и оборудования опорной инфраструктуры.

Помимо аппаратного, этот слой имеет собственный прикладной подуровень,
так как существует целый пласт приложений, обслуживающих инфраструктуру.

В нашем случае это
  k8s,
  базы данных
  и облачная инфраструктура.

Тут так же, как и на уровне выше, применяются техники готовых интеграций сервисов мониторинга с используемым системами.


Задание 2
Сопоставьте метрики с правильными категориями:

Бизнес-метрики:
  - Заказы новых видов сосисок в день;
  - Общее количество заказов;
  - Количество заработанных денег.

Метрики приложения:
  - Время ответа сервера на типовой запрос пользователя;
  - Выделение памяти в стеке и куче;
  - Количество запросов в секунду.

Метрики инфраструктуры:
  - Свободное место на диске;
  - Утилизация сетевых интерфейсов;
  - Время ожидания процессором завершения дисковых операций


##################
# Как мониторить #
##################

Black-box и White-box мониторинг.

Black-box мониторинг:
  = заточен под симптомы и представляет собой реактивный, а не проактивный мониторинг.
    Он говорит: «Вся система прямо сейчас не работает».

White-box мониторинг:
  = подходит для причин.
    При таком подходе приложение самостоятельно отправляет в систему мониторинга данные о происходящем внутри него:
  # «Эй там, у меня утекают файловые дескрипторы, и скоро всё перестанет работать. Смекаешь?».


************************
* Black-box мониторинг *
************************

  Этот тип мониторинга относится к оценке состояния сервисов и серверов.

  Когда мы используем Black-box, то собираем метрики по: 
    * статусу приложения:
        работает или нет (up или down на дашборде);

    * использованию ресурсов процессора, диска, памяти
        (графики использования cpu, memory, disks utilization, io rate и т.д.).


'''
  SRE (Site Reliability Engineering)
    — это подход к обеспечению надёжности и доступности сервисов.
    Он основан на принципах, которые помогают сделать системы более устойчивыми к сбоям и нагрузкам.
# Объяснение терминов:
  * Надёжность — способность системы работать без сбоев и ошибок.
  * Доступность — возможность системы быть доступной для пользователей в любое время.
  * Сбои — неожиданные проблемы, которые могут привести к сбою системы.
  * Устойчивость — способность системы восстанавливаться после сбоев и сохранять свою работоспособность.
'''

SRE (Site reliability engineering)
  = популярные практики обеспечения надёжности инфраструктуры, описанные инженерами Google в одноимённой книге.
  Эти практики формировались разработчиками, на плечи которых легла ответственность за сопровождение разрабатываемых ими систем.


Классические и проверенные системы с Black-box подходом:
  ● Nagios
  ● Zabbix

В их основе лежит идея проверки системы путём запуска пользовательских скриптов для
  -> извлечения метрик   и
  -> определения состояния различных сервисов приложения.


************************
* White-box мониторинг *
************************

White-box
  = это мониторинг, основанный на метриках состояния ВНУТРЕННИХ КОМПОНЕНТОВ системы.
  
/*
Включая:
  - журналы,
  - метрики профилирования
    > виртуальной машины Java
      или
    > обработчика HTTP
    которые генерируют внутреннюю статистику.
*/

[Как работает White-box:]
  в приложение добавляется библиотека, выполняющая экспорт значений ключевых метрик, таких как
    * общее количество полученных HTTP-запросов
      <или>
    * величины задержек обращений к базе данных.

  Затем с помощью White-box становится возможным обнаруживать проблемы и неисправности до реальной аварии.

# При сборе информации для дебага необходим White-box мониторинг.
[Пример:]
  Если веб-серверы медленно реагируют на запросы, связанные с данными, вам нужно разделить проблему на две части:
  1) во-первых, определить сетевую задержку взаимодействия бэкенда с базой данных,
  2) а во-вторых, получить время обработки одного запроса в самой базе данных.

В многослойном приложении запрос может проходить через массу сервисов,
поэтому для дебага применяются техники распределённой трассировки:
  помимо библиотеки экспорта метрик, в приложение добавляются
  -> библиотеки логирования запросов.

"""
  Разработчик может отправить специально сформированный запрос для такой трассировки
  и получить его подробный маршрут прохождения ПО КАЖДОМУ СЕРВИСУ, включая метрики времени выполнения.
  Таким образом получится определить «бутылочное горлышко».
"""


#############################
# Каким образом мониторить? #
#############################

ВЫБОР МЕТРИК, необходимых для получения полноценной картины происходящего в приложении =
  = одна из главных сложностей при внедрении системы мониторинга.

"4 золотых сигнала"
#описаны в книге "Site reliability engineering (SRE)"

Четыре золотых сигнала мониторинга — это
  * задержка
  * трафик
  * ошибки 
  * насыщение

# Следует начать сбор метрик с этого квартета,
# а затем добавляйте данные по необходимости.

************
* Задержка *
************

  = это время, необходимое для обработки пользовательского запроса.

# Правило: чем меньше задержка, тем лучше

[!] Вместо среднего значения лучше использовать ПЕРЦЕНТИЛЬ как наихудшее значение задержки.

# Например, 99-тый перцентиль задержки покажет значение, большее чем у 99 запросов из 100 за единицу времени.

Перцентиль
  — это показатель из статистики, показывающий значение, ниже которого падает определённый процент наблюдений во всей группе.


**********
* Трафик *
**********

[Для веб-сервисов:] трафик = количество HTTP-запросов в секунду к значимой странице сайта или API-эндпоинту бэкенда.

# В нашем случае:
# количество запросов к главной странице сосисочной = нагрузка на фронтенд
# запросы к различным API-эндпоинтам (/api/products, /api/orders) = нагрузка на бэкенд


**********
* Ошибки *
**********

  Ошибки отображают в виде частоты неудачных запросов.
  Неудачные запросы:
    явные
      = сервер возвращает код HTTP-ответа 500,

    неявные
      = код HTTP-ответа 200, НО в тело ответа посыпятся мусорные данные.

(!) можно настроить политику, в которой ответ с задержкой > 1 с считается ошибкой.

*************
* Насыщение *
*************

  показывает:
    интенсивность использования сервиса
    и величину запаса таких ресурсов, как
      * процессор,
      * память
      * и пропускная способность диска.

Это мера системного мониторинга, выявляющая ОГРАНИЧЕННЫЕ РЕСУРСЫ.

# многие системы ухудшают производительность прежде, чем они достигают 100% использования.
# => Поэтому определение критичного уровня использования имеет важное значение.


(?) Задание 4
  "Соедините графики по 4 золотым сигналам:"
  
Задержка   --> График времени ответа бэкенда при обращении к /api/products
Трафик     --> График количества запросов в секунду к index.html фронтенда
Ошибки     --> Специальный график для запросов, которые не укладываются в 20 мс.
Насыщение  --> График времени ожидания процессором окончания дисковой операции


[!] Для предотвращения аварии нам нужно знать некоторые дополнительные показатели о системе,
    например, скорость уменьшения свободного пространства на диске.
'''
  Наблюдая за графиками скорости роста заполнения диска, мы можем спрогнозировать:
  (!) когда добавлять дисковое пространство
      (или запустить уже этот cron-скрипт ротации логов).
  Эти знания помогут решить проблемы с меньшими затратами времени и до наступления аварии.
'''

"""
  Когда система измеряет все четыре золотых сигнала
  и с одним из них возникает проблема (или в случае насыщения предвещает возникновение проблемы),
  а дежурный получает оповещение
  => можно сказать, что сервис охвачен мониторингом.
"""


########################
# Ключевые мысли урока #
########################

  Работоспособность современного сервиса можно оценить только с помощью качественного мониторинга.
  Мониторинг — это сбор, хранение и анализ данных о вашем сервисе.
  Мониторить сервис можно на разных уровнях: бизнеса, приложения и инфраструктуры.
  Выделяют два подхода мониторинга — Black-box и White-box, каждый имеет свои плюсы.
  Из большого объёма информации о вашей системе нужно выделить те метрики, которые расскажут о её состоянии.
  Отправная точка в построении мониторинга — четыре золотых сигнала.

######################
# Полезные материалы #
######################

Про мониторинг из книги SRE: 
-> https://sre.google/sre-book/monitoring-distributed-systems/

DevOps measurement: Monitoring and observability
-> https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability
  
Jaeger — популярный инструмент для распределённой трассировки.
-> https://www.jaegertracing.io/docs/

Какие ещё бывают подходы к мониторингу: RED и USE
-> https://medium.com/thron-tech/how-we-implemented-red-and-use-metrics-for-monitoring-9a7db29382af