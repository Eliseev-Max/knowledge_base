Системы оркестрации контейнеров

Из этого урока вы узнаете:
  * Для чего нужны и какие бывают системы оркестрации контейнеров.
  * Что может Kubernetes.


Какие проблемы решает контейнеризация?

  То, с чем постоянно приходится иметь дело при поддержке большой инфраструктуры
  — это нехватка ресурсов то в одном, то в другом месте.
  Под ресурсами мы понимаем:
    * процессор,
    * оперативную память
    * место на дисках.
  Достаточное количество этих ресурсов — необходимое условие работы приложений.

[?] какие проблемы помогают решить контейнеры?
      * конфликт зависимостей приложений;
      * ограничение ресурсов приложения;
      * изоляция приложения
      #>(В Linux за это отвечает один из механизмов контейнеризации — namespaces)<#

(!) возможности контейнеризации по разграничению ресурсов гораздо скромнее, чем возможности виртуальных машин.

(>) Контейнеры могут неявно «влиять» друг на друга, даже не конкурируя за ресурсы.

Для своей работы ОС использует различные «общие ресурсы»;
например,
  в ОС есть ГЛОБАЛЬНЫЕ БЛОКИРОВКИ ЯДРА:
    если один контейнер выполняет какой-то системный вызов и устанавливает блокировку,
    то другие контейнеры ждут и не могут выполнить свою часть кода,
    которому нужен для работы тот же глобальный системный вызов, что заблокировал первый контейнер.

При использовании VMs такой бы проблемы не возникло,
потому что у них «сильная изоляция» и нет такой зависимости от хостовой ОС, как у контейнера.

  Брокер сообщений         =>  обмен сообщениями между микросервисами;
  Оркестратор контейнеров  =>  унификация методов управления большим количеством контейнеров


*****************************************
* В зоопарке контейнерных оркестраторов *
*****************************************

  Микросервисная архитектура предполагает наличие большого числа небольших компонентов,
  взаимодействующих друг с другом через сеть.


[??]
  [1.А если много контейнеров?]
     (?) Как будут перемещаться сетевые пакеты,
     (?) как контейнерам находить друг друга,
     (?) какая будет задержка по сети,
     (?) как жить, если несколько инстансов одного и того же контейнера?

  [2.А если контейнеры будут жить на разных серверах?]
    ++(?) как будет чувствовать себя наше приложение, если выйдет из строя целый сервер:
       -> будет задержка
         <или>
       -> приложение потеряет работоспособность полностью?

  [3.А если сервера с контейнерами расположить в разных датацентрах,
     как тогда вся наша конструкция будет работать?
  ]


Примеры актуальных проблем и способов их решения:
[Как контейнерам находить друг друга?]
{ 
  У контейнера есть
    - свое имя
       <и>
    - IP-адрес
  !!(В РАМКАХ ХОСТА).

  Общение между контейнерами ПО ИМЕНИ возможно, если выполняются оба условия:
    1) контейнеры запущены на одном хосте;
    2) контейнеры работают в одной сети (один ID сети)

    <? А если контейнеры расположились в разных сетях, но всё ещё на одной машине ?>
    --> напишем скрипт, который добавляет с помощью iptables пачку правил,
        чтобы контейнеры могли общаться друг с другом.
}

  2) Пиковые краткосрочные || среднесрочные || сезонные нагрузки
     ("Чёрная пятница" для Маркетплейсов)
     рост нагрузки на приложение -> замедление работы приложения (со стороны пользователей)
     < Варианты решения: >
       - поднять вручную дополнительные инстансы (+hardware);
       - написать скрипт, который будет менять количество контейнеров по нашему запросу;
       - написать прослойку, которая, в зависимости от нагрузки, будет
         -> менять количество контейнеров динамически;
         -> автоматически обнаруживать контейнеры.

[!] Существует уже готовое решение:
"ОРКЕСТРАТОР КОНТЕЙНЕРОВ"


**********************************************
* Основные функции оркестратора контейнеров: *
**********************************************
  ➜ Настройка сетевой инфраструктуры.
  ➜ Перезапуск контейнеров после программных и аппаратных сбоев.
  ➜ Равномерное и эффективное распределение нагрузки на серверное железо.
  ➜ Масштабирование путём запуска или завершения копий контейнера.
  ➜ Переход на новую версию ПО (деплой).
  ➜ Обнаружение микросервисами друг друга.
  ➜ Равномерное распределение входящих запросов между копиями микросервиса.
  ➜ Доставка и тонкая настройка конфигурации микросервиса.

[-] Оркестратор контейнеров позволяет лишь запускать любые контейнеры,
    но НЕ ПРЕДОСТАВЛЯЕТ таких сервисов, как шины и базы данных. 


################
# Docker Swarm #
################

Docker Swarm
  — это оркестратор, встроенный в сам Docker.

Кластером (Cluster) называется группа связанных между собой машин, называемых узлами (англ. nodes).

[Отличительная черта Swarm:]
  после создания кластера можно продолжать пользоваться привычными командами Docker CLI.
  При этом команды будут исполняться на кластере.

[!] Docker Swarm позволяет управлять контейнерами, запущенными на РАЗНЫХ машинах,
    ИЗ ОДНОЙ ТОЧКИ.
# в этом его отличие от Docker Compose
  => Кластер для Swarm является отдельной ЕДИНИЦЕЙ АДМИНИСТРИРОВАНИЯ.

[>] В кластере Docker Swarm обычно присутствует ВЫДЕЛЕННЫЙ УЗЕЛ, отвечающий за координацию остальных узлов.


[Балансировка трафика:]
  Docker Swarm включает и балансировщик,
  причём он запущен НА КАЖДОМ УЗЛЕ.

Оркестратор — довольная сложная система, которой приходится решать множество различных задач,
              а сложные системы сбоят по причинам, сложным для понимания.



###################
# HashiCorp Nomad #
###################

[Взгляд разработчиков HashiCorp на то, чем должен обладать оркестратор:]
  * Простота в использовании.
      Только управляет кластером, а другие функции выполняются при помощи внешних инструментов:
        ➜ Consul обнаруживает контейнеры,
        ➜ Vault занимается секретами.

  * Гибкость управления как контейнерами, так и приложениями в целом.
      Nomad умеет работать с различными типами виртуализации:
        ● Docker,
        ● QEMU,
        ● Java,
        ● Exec,
        ● Podman.

[Устройство Nomad:]
  Есть клиенты и серверы.
  <Серверы>:
    ➞ выбирают лидера    и
    ➞ объединяются в кластер.
    ➞ ставят задачи (job) клиентам,
    ➞ следят, чтобы кластер находился в том состоянии, которое описано в задачах.

  <Клиенты>:
    ► на них разворачиваются приложения
    ► у них же могут быть разные драйверы
      (они говорят, будет Docker, Java или что-то другое).

  (+) это позволяет в рамках кластера, но на разных клиентах использовать:
      ● приложения в контейнерах
        <и>
      ● приложения на голом железе.

[Где может пригодиться?]
  если хотим запустить на нодах тяжёлые Java-приложения.



#########################
# Apache Mesos/Marathon #
#########################

  Apache Mesos был разработан в калифорнийском университете в Беркли.
  По задумке авторов, он должен был вобрать в себя всё лучшее в мире управления кластерами из того,
  что было создано ведущими IT компаниями. 

[Цели разработчиков Mesos:]
  * Высокий коэффициент утилизации ресурсов.
  * Поддержка как можно большего числа Mesos frameworks.
  * Стабильная работа на кластерах, состоящих из десятков тысяч узлов.

[!] Mesos выполняет ТОЛЬКО задачу разделения ресурсов.
    Он способен равномерно загрузить каждый узел кластера оптимальным для приложений образом.
    Кроме того, он имеет встроенный механизм запуска контейнеров.

[Mesos frameworks:]
  = компонент архитектуры Apache Mesos
  -> для реализации низкоуровневой логики работы с задачами:
    * запуск,
    * отслеживание состояния
    * масштабирование

[Фреймворки:]
  ■ Aurora
    — для long-runnning сервисов (приложение на серверах),
      использует преимущества
        √ масштабирования,
        √ отказоустойчивости     и
        √ изоляции
      ресурсов Mesos

  ■ Marathon
    — оркестратор контейнеров

  ■ Chronos
    — если нужна отказоустойчивая замена Cron

  ■ Ceph
    — отказоустойчивая, самовосстанавливающаяся, распределённая хранилка данных

  ■ TFMesos
    — легковесный фрейморк для распределения задач машинного обучения
  (ещё фреймворки: https://github.com/apache/mesos/blob/master/docs/frameworks.md)


************
* Marathon *
************

[Возможности:]
  -> Поддерживает контейнеры Docker и Mesos.
  -> Обеспечивает хранение данных для приложений.
  -> Имеет графический интерфейс пользователя.
  -> Разрешает пользователю контролировать размещение контейнеров на физической инфраструктуре
     (например, запускать не более одного экземпляра приложения на одном узле/машине/серверной_стойке).
  -> Предоставляет сервис обнаружения сервисов.
  -> Выполняет распределение нагрузки.
  -> Выполняет health check.
  -> Предоставляет сервис подписки на события.
  -> Снабжает метриками приложений и полный REST API.



################
################
## Kubernetes ##
################
################

Довольно популярный оркестратор контейнеров, изначально разработанный в Google
(сейчас под управлением Cloud Native Computing Foundation)
представляет собой "швейцарский нож" для
  ➜ автоматического деплоя,
  ➜ масштабирования
  ➜ управления контейнеризированными приложениями.


<+ ПРЕИМУЩЕСТВА Kubernetes +>

  + Любим сообществом
  + Есть шаблонизатор и менеджер пакетов — Helm
  + Автоматическая балансировка нагрузки
  + Наличие API для ручного управления кластером
  + Может работать с разными средами выполнения,
    лишь бы они поддерживали CRI (Container Runtime Interface):
      * containerd,
      * CRI-O,
      * Docker Engine,
      * Mirantis Container Runtime.


<- недостатки Kubernetes ->

  - обилие возможностей делает настройку кластера под себя очень сложной в поддержке
  - своя терминология, которую нужно освоить
  - документация оставляет желать лучшего


*****************************************
* Kubernetes — что может и что не может *
*****************************************

  Kubernetes
    — это платформа оркестрации контейнеров с открытым исходным кодом.
    Он позволяет пользователю описывать сложные конфигурации контейнеров с помощью ДЕКЛАРАТИВНЫХ ФАЙЛОВ КОНФИГУРАЦИИ,
    подобно тому как инфраструктура описывается в IaC.


<-- Разгадка аббревиатуры K8s -->
  Длинное название «Kubernetes» часто сокращают до аббревиатуры K8s,
  где цифра 8 заменяет 8 букв внутри слова K[ubernete]s.
---

[Pod:]
  Для описания запускаемой единицы приложения K8s использует термин Pod.
  Pod
    — группа контейнеров, взаимодействующих между собой и совместно использующих один IP-адрес.
    Pod'ы могут запускаться и завершаться в любое время.
    K8s может изменять количество подов в зависимости от имеющихся задач и нагрузки.

[ Типы кластеров K8s: ]
   ■ управляющие (англ. master/control plane)
     = предоставляют API K8s;
     = контролируют запуск всех компонент.

   ■ рабочие (англ. worker)
     = запускают контейнеры приложений;
     = обеспечивают сетевую связность.

[etcd:]
  etcd — распределённое key-value хранилище, в котором хранится СОСТОЯНИЕ всего кластера.
  Это "сердце" K8s


[Какие плюшки несёт K8s:]
  * Самоисцеление контейнеров
    (например, автоматическая замена сбоящих/неисправных экземпляров контейнеров исправными новыми).

  * Автоматическое горизонтальное масштабирование, в зависимости от нагрузки.

  * Автоматический деплоймент и откат новых версий образов контейнеров без перерывов в обслуживании.

  * Обеспечение приложений постоянным хранилищем данных.

  * Управление сетью.

  * Безопасное хранение секретной информации
    (например, имена пользователей и паролей).

---
Благодаря K8s, датацентр можно представить как один большой компьютер.
Не нужно думать, на какой конкретно сервер и как попадёт тот или иной контейнер.
---

***********************
* Нюансы работы с K8s *
***********************

  * K8s — это хитросплетение множества приложений.
      Для использования в продуктивной среде нужно понимать:
      (?) как эти приложения устроены
      (?) как они взаимодействуют между собой.

  * Такие функции K8s как
      - деплоймент,
      - масштабирование,
      - балансировка,
      - поставка логов
        <и>
      - мониторинг
      не всегда хорошо работают из коробки для каждой системы.
      Для сложных приложений вам придётся использовать специализированные инструменты.

  * K8s может запустить любое приложение, упакованное в контейнер,
      НО не может сам построить микросервисную архитектуру.
      Задача разработчиков — правильно организовать взаимодействие между сервисами.

  * K8s не включает ПО для работы с контейнерами.
      Он взаимодействует со средой выполнения контейнеров по протоколу CRI,
      например, с Docker или containerd.

[!] K8s ТРЕБУЕТ:
      + тонкой настройки
      + глубокого понимания технологий, на которых он построен.


*********************************************************
* Ключевые особенности сервисов оркестрации контейнеров *
*********************************************************

Docker Swarm
  * умеет работать ТОЛЬКО с Docker-контейнерами;
  * самый первый оркестратор контейнеров;
  * не предусмотрено автомасштабирование.

HashiCorp Nomad
  * прост, как сито;
  * умеет работать и с контейнерами, и с железом;
  * для хранения секретов нужен внешний сервис Vault.

Apache Mesos
  * лишь диспетчер, конечная функциональность зависит от фреймворков;
  * был ориентирован на работу с BigData - максимальная производительность;
  * сложная поддержика.

Kubernetes
  * стандарт де-факто для оркестрации контейнеров;
  * требуются сторонние утилиты для развёртывания минимального тестового стенда на хосте, например, Minikube
  * из коробки есть возможность работы с секретами.


*****************************************************
* Как соотносятся между собой компоненты стека K8s? *
*****************************************************

              etcd  => хранение информации о количестве экземпляров пода;
  Управляющий узел  => планирование запуска пода на свободном рабочем узле;
      Рабочий узел  => предоставление ресурсов для запуска подов;
             Docker => запуск приложения в контейнере.

(!) Kubernetes может работать и под Windows


******************************************************
* Cравнение систем оркестрации контейнеров под Linux *
******************************************************

                                        Kubernetes |  Docker Swarm  |  Apache Mesos/Marathon  |  HashiCorp Nomad
Максимальное число узлов в кластере
(теоретическое/практическое)	          5000/500 	  >1000/1000          ∞/50000	                ∞/10000
Поддержка распределённых кластеров	        Нет	         Нет	            Нет	                      Да
Сложность экслуатации                     Сложно	    Легко	        Очень сложно	           Средняя


---<_РЕЗЮМЕ_>---
На сегодняшний день Kubernetes является стандартом де-факто среди систем оркестрации контейнеров.

Идея разрабатывалась в Google
и впитывала в себя опыт развёртывания и сопровождения контейнеризированных приложений на протяжении 15 лет.

Сейчас Kubernetes
  √ активно развивается сообществом,
  √ имеет стабильный график выпуска релизов
  √ + при запуске нового проекта является лучшим выбором в качестве платформы развёртывания приложений.

{"Yandex Managed Service for Kubernetes®":
  https://yandex.cloud/ru/services/managed-kubernetes?utm_referrer=https%3A%2F%2Fpracticum.yandex.ru%2F
}
---


####################################
# Как живётся контейнеру в Windows #
####################################

[Docker Desktop:]
  Для Microsoft Windows, macOS (OS X) и Linux существует специальная версия Docker — Docker Desktop.
  В ней к уже знакомому нам CLI добавляется GUI.
(!) GUI Docker Desktop имеет и вкладку «Kubernetes».

******************************************
* Возможности Docker Desktop на Windows: *
******************************************

  * Всё, что может Docker в Linux.
  * Включает в себя Docker Compose.
  * Поддерживает Docker Swarm.
  * Включает в себя Kubernetes.
  * Имеет режим поддержки контейнеров Linux и Windows
    [!](однако, не позволяет запускать контейнеры разных типов одновременно).
  * Для Windows-контейнеров поддерживает изоляцию на уровне процессов (process isolation):
      - этот режим аналогичен контейнеризации в Linux.
  * Для Windows-контейнеров поддерживает также режим полной виртуализации с помощью Hyper-V.
  * Предоставляет доступ контейнеров к файловой системе хоста Windows.
  * Включает инструменты разработки и тесную интеграцию с Visual Studio.


**************************************
* Узлы Windows в кластере Kubernetes *
**************************************

  Windows-контейнеры, подобно контейнерам Linux, решают проблемы:
    - упаковки,
    - изоляции
    - разделения ресурсов.

  Благодаря этому любые DevOps практики без труда переносятся на Windows.


  Kubernetes может управлять Windows-контейнерами;
[!]  K8s позволяет запускать контейнеры РАЗНЫХ ОС НА ОДНОМ КЛАСТЕРЕ.

Например, Linux кластер, включающий в себя узлы на Windows Server 2019,
можно использовать для запуска Windows и Linux-контейнеров ОДНОВРЕМЕННО.


**************************************
* Запуск Linux приложений на Windows *
**************************************
  Начиная с 10-той версии, Windows  получила поддержку «подсистемы Linux» (WSL).
  WSL имеет два режима работы:
---<_Режимы_работы_WSL_>---
1) WSL версии 1
    — это эмуляция системных вызовов Linux на ядре Windows.
    WSL 1 позволяет установить консольную версию Ubuntu (и не только) на машине c Windows.

2) WSL версии 2
   -> запускает полноценное ядро Linux поверх ядра Windows.
   При этом ядра операционных систем тесно интегрированы.
   (!) К примеру, Диспетчер Задач Windows позволяет управлять процессами Linux.
   В WSL 2 можно запускать практически любые приложения Linux,
   + в том числе приложения с графическим интерфейсом.

   Так как WSL версии 2 включает в себя полноценное ядро Linux,
   на нём можно запустить версии Docker и Kubernetes для Linux.
   Это альтернатива установке приложения Docker Desktop.
   В этом случае пользователь не получит GUI и сможет использовать для управления только терминал Linux.
---

[Ключевые мысли урока:]
  √ Kubernetes — стандарт де-факто среди систем оркестрации контейнеров.
  √ Kubernetes и другие оркестраторы контейнеров позволяют создавать надёжную и масштабируемую инфраструктуру.
  √ На Windows работают все популярные инструменты контейнеризации.

<Полезные_материалы:>

  1) История рождения Kubernetes:
(https://queue.acm.org/detail.cfm?id=2898444)

  2) Apache Mesos Architecture
(https://mesos.apache.org/documentation/latest/architecture/)

  3) Docker Swarm Mode:
(https://docs.docker.com/engine/swarm/key-concepts/)

  4) HashiCorp Nomad Architecture:
(https://developer.hashicorp.com/nomad/docs/concepts/architecture)

  5) Container Isolation Gone Wrong:
(https://dzone.com/articles/container-isolation-gone-wrong)