Команды Helm

1) Создание структуры чарта:
---
helm create <chart-name>

2) Проверка валидности чарта встроенным в  Helm линтером:
---
helm lint ./<chart_name> 

3) Посмотреть, как выглядит манифест с подставленными переменными:
---
helm template ./<chart_name>

4) Создание пакета чарта (<chart_name>.tgz):
---
helm package ./<chart_name>

# Имя пакета будет иметь следующий вид: Chart.Name-Chart.Version.tgz

5) Деплой чарта Helm в Kubernetes:
---
helm install <app-name> ./<chart_name>

# Если требуется переопределить значение переменной при деплое helm-пакета:
helm install --set <имя переменной>=<значение переменной> <app-name> ./<chart_name>


6) Посмотреть информацию о шаблонах и значениях переменных, которые отправил Helm:
---
helm get all <app-name>

7) Посмотреть инфрмацию о релизах:
---
helm history <name>


8) Отправка обновлённой версии чарта в кластер:
helm upgrade <name> ./<chart_name>

9) Взять текущие переменные, которые использовались в чарте
helm get values <app-name> > [file-with-values]

#:-->
  = для команд helm install и helm upgrade:
  --values <values.file>  = указание файла, содержащего значения переменных;
  --reuse-values          = говорит Helm использовать при обновлении значения переменных из последнего релиза
<--:#


10) вывести список установленных релизов (и время их жизни):
---
helm list

11) Вывести инфрмацию о релизах:
helm history <app-name>

12) Откатиться на выбранную версию релиза:
---
helm rollback <name> revision_number

13) Уничножить релиз:
---
helm uninstall <name>

13.1) Посмотреть, какие релизы будут удалены без фактического их удаления:
---
helm uninstall --dry-run <name>

13.2) Удалить релиз с сохранением истории для возможности выполнения rollback'а:
---
helm uninstall <name> --keep-history


#########################################
# Helm. Работа с удалённым репозиторием #
#########################################

