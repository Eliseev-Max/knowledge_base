Helm. Built-in Objects
#(https://helm.sh/docs/chart_template_guide/builtin_objects/)


Объекты передаются в шаблон из шаблонизатора (template engine).
И ваш код может передавать объекты вокруг себя

Есть даже несколько способов создания новых объектов в шаблонах
# например, с помощью функции tuple, которая рассмотрена далее.

Объекты:
  - могут быть простыми и иметь только одно значение.
  - могут содержать другие объекты или функции.

# Например, объект Release содержит несколько объектов (например, Release.Name),
# а объект Files - несколько функций.

{{ .Release.Name }} используется для вставки названия релиза в шаблон.
Релиз - это один из объектов верхнего уровня, к которому вы можете обращаться в своих шаблонах.

Release:
  Этот объект описывает сам релиз.
  Внутри него есть несколько объектов:

    ● Release.Name:
      = The release name

    ● Release.Namespace:
      = The namespace to be released into (if the manifest doesn’t override)

    ● Release.IsUpgrade:
      = This is set to true if the current operation is an upgrade or rollback.

    ● Release.IsInstall:
      = This is set to true if the current operation is an install.

    ● Release.Revision:
      = The revision number for this release.
        On install, this is 1, and it is incremented with each upgrade and rollback.

    ● Release.Service:
      = Служба, предоставляющая (рендерящая) данный шаблон.
        В Helm это всегда Helm.

Values:
  Значения, передаваемые в шаблон из файла values.yaml и из файлов, предоставленных пользователем.
  По умолчанию Values пуст.

Chart:
  The contents of the Chart.yaml file.
  Any data in Chart.yaml will be accessible here.
  For example {{ .Chart.Name }}-{{ .Chart.Version }} will print out the mychart-0.1.0.
  The available fields are listed in the Charts Guide

Subcharts: This provides access to the scope (.Values, .Charts, .Releases etc.) of subcharts to the parent.
For example .Subcharts.mySubChart.myValue to access the myValue in the mySubChart chart.

Files:
  This provides access to all non-special files in a chart.
  While you cannot use it to access templates, you can use it to access other files in the chart.
  See the section Accessing Files for more.

    ● Files.Get is a function for getting a file by name (.Files.Get config.ini)
    ● Files.GetBytes is a function for getting the contents of a file as an array of bytes instead of as a string. This is useful for things like images.
    ● Files.Glob is a function that returns a list of files whose names match the given shell glob pattern.
    ● Files.Lines is a function that reads a file line-by-line. This is useful for iterating over each line in a file.
    ● Files.AsSecrets is a function that returns the file bodies as Base 64 encoded strings.
    ● Files.AsConfig is a function that returns file bodies as a YAML map.

Capabilities:
  This provides information about what capabilities the Kubernetes cluster supports.

    ● Capabilities.APIVersions is a set of versions.
    ● Capabilities.APIVersions.Has $version indicates whether a version (e.g., batch/v1) or resource (e.g., apps/v1/Deployment) is available on the cluster.
    ● Capabilities.KubeVersion and Capabilities.KubeVersion.Version is the Kubernetes version.
    ● Capabilities.KubeVersion.Major is the Kubernetes major version.
    ● Capabilities.KubeVersion.Minor is the Kubernetes minor version.
    ● Capabilities.HelmVersion is the object containing the Helm Version details, it is the same output of helm version.
    ● Capabilities.HelmVersion.Version is the current Helm version in semver format.
    ● Capabilities.HelmVersion.GitCommit is the Helm git sha1.
    ● Capabilities.HelmVersion.GitTreeState is the state of the Helm git tree.
    ● Capabilities.HelmVersion.GoVersion is the version of the Go compiler used.

Template: 
  Contains information about the current template that is being executed

    Template.Name:
      = A namespaced file path to the current template (e.g. mychart/templates/mytemplate.yaml)
    Template.BasePath:
      = The namespaced path to the templates directory of the current chart (e.g. mychart/templates).

Встроенные значения (built-in values) всегда начинаются с заглавной буквы.
(!) Это соответствует принятым в Go правилам именования.

Когда вы создаете собственные имена, вы можете использовать ту конвенцию, которая подходит вашей команде.

Некоторые команды, например те, чьи чарты вы можете увидеть на Artifact Hub,
предпочитают использовать только начальные строчные буквы, чтобы отличать локальные имена от встроенных.
# В этом руководстве мы следуем этому соглашению.

The built-in values always begin with a capital letter.
This is in keeping with Go's naming convention.
When you create your own names, you are free to use a convention that suits your team.
Some teams, like many whose charts you may see on Artifact Hub, choose to use only initial lower case letters in order to distinguish local names from those built-in. In this guide, we follow that convention.