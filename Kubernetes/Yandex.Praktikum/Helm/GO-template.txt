Go template
(https://pkg.go.dev/text/template)
(https://habr.com/ru/articles/792802/)

Пакет template реализует data-driven (управляемые данными) шаблоны для генерации текстового вывода.
Для генерации HTML-вывода см. html/template (https://pkg.go.dev/html/template),
который имеет тот же интерфейс, что и этот пакет, но автоматически защищает HTML-вывод от некоторых атак.

template'ы выполняются путем применения их к структуре данных.
Аннотации в шаблоне ссылаются на элементы структуры данных (обычно поле структуры или ключ в map'е) для управления выполнением и получения значений для отображения.

При выполнении template структура просматривается,
а курсор, представленный точкой '.' и называемый "точкой" ('dot'),
устанавливается на значение в текущем месте структуры по мере выполнения.

#[2]# символ `.` (точка) обычно используется для обращения к ТЕКУЩЕМУ КОНТЕКСТУ ДАННЫХ.
      Используем . в шаблоне ==> обращаемся к данным, которые были переданы в этот шаблон. 
      Если данные имеют вложенную структуру: работаем с этим, как с атрибутами объекта:
      .Object.attr


Входной текст для шаблона - это текст в кодировке UTF-8 в любом формате.

«Действия» ("Actions") = оценки данных или управляющие структуры =
  = разграничиваются символами „{{“ и „}}“;
  весь текст вне действий копируется на выход без изменений.

После разбора шаблон может безопасно выполняться параллельно,
хотя если параллельные выполнения используют один Writer, вывод может чередоваться.

#! Комментарий в go template:
{{/* комментарий */}}

Вот тривиальный пример, который выводит «17 предметов сделаны из шерсти».
-->

--[Example]--
type Inventory struct {
	Material string
	Count    uint
}
sweaters := Inventory{"wool", 17}
tmpl, err := template.New("test").Parse("{{.Count}} items are made of {{.Material}}")
if err != nil { panic(err) }
err = tmpl.Execute(os.Stdout, sweaters)
if err != nil { panic(err) }
<--

*******************
* Текст и пробелы *
*******************

По умолчанию при выполнении template весь текст между действиями копируется дословно.
Например, строка " items are made of " в приведенном выше примере появляется на стандартном выводе при запуске программы.

Однако для облегчения форматирования исходного кода шаблона,
[!] если за левым разделителем действия (по умолчанию "{{") СРАЗУ СЛЕДУЕТ ЗНАК МИНУС И ПРОБЕЛ (`{{- `),
    то все пробельные символы в конце текста и до вставки {{- }} обрезаются из непосредственно предшествующего текста.

    Аналогично, если правому разделителю ("}}") предшествует пробел и знак минус,
    все последующие пробельные символы обрезаются из непосредственно следующего текста.

  В этих маркерах обрезки пробелов должно присутствовать:
  "{{- 3}}" (похож на "{{3}}"), но обрезает непосредственно предшествующий текст,

  "{{-3}}" парсится как действие, содержащее число -3.

  Например, при выполнении шаблона, источником которого является
-->
"{{23 -}} < {{- 45}}"
<--
  сгенерированный вывод будет: "23<45"

Для этой обрезки к пробельным символам относятся те же символы, что и в Go:
  = пробел,
    горизонтальная табуляция,
    возврат каретки
    и новая строка.


[Условный оператор if - else]
{{ if .Night }} Надо спать {{ else }} Надо работать {{ end }}

Night может принимать значение:
  true
  0 || "" || nil || пустой массив/срез => false


{{if .Night }} Надо спать {{else if .Morning}} Надо покормить кота {{end}}

[Цикл range]

{{ range .Items }} Привет! {{ end }}

# Если в массиве .Items 5 элементов то шаблон поздоровается 5 раз.
# Цикл вызывает по очереди каждый элемент массива.
# Чтобы вывести текущий элемент массива .Items внутри цикла range, вы можете использовать встроенную переменную.

-->
{{ range .Items }}
   Привет, {{ . }}!
{{ end }}
<--

#(!) через символ точки мы обращаемся к элементу массива текущей итерации


[Создание шаблонов]

# Определяем значения для шаблонов:
{{define "Top"}} Крыша {{end}}
{{define "Bottom"}} Фундамент {{end}}

/*
  Обращаемся к стозданным шаблонам:
*/

{{template "Top"}} 
Стены
{{template "Bottom"}}

***********
* Actions *
***********

  Здесь приведен список действий.
  "Аргументы" ("Arguments") и "конвейеры" ("pipelines")
    = это оценки данных, подробно описанные в соответствующих разделах, которые следуют далее.

{{/* a comment */}}
{{- /* комментарий с обрезанными пробелами в предшествующем и последующем тексте */ -}}
	Комментарий; отбрасывается (discarded). Может содержать новые строки.
	Комментарии не вложены и должны начинаться и заканчиваться разделителями, как показано здесь.

{{pipeline}}
	На выход копируется текстовое представление по умолчанию
    (такое же, как было бы выведено с помощью fmt.Print) значения конвейера.

{{if pipeline}} T1 {{end}}
	Если значение конвейера пустое, вывод не производится;
	в противном случае выполняется T1.
    Пустыми значениями являются: false, 0, любой указатель nil (nil pointer) или значение interface,
    а также любой массив, фрагмент (slice), карта или строка нулевой длины.
	Точка не затрагивается.

{{if pipeline}} T1 {{else}} T0 {{end}}
	Если значение pipeline пусто -> выполняется T0,
    в противном случае выполняется T1.
    Точка не затрагивается.

{{if pipeline}} T1 {{else if pipeline}} T0 {{end}}
	To simplify the appearance of if-else chains, the else action
	of an if may include another if directly; the effect is exactly
	the same as writing
		{{if pipeline}} T1 {{else}}{{if pipeline}} T0 {{end}}{{end}}

{{range pipeline}} T1 {{end}}
	The value of the pipeline must be an array, slice, map, or channel.
	If the value of the pipeline has length zero, nothing is output;
	otherwise, dot is set to the successive elements of the array,
	slice, or map and T1 is executed. If the value is a map and the
	keys are of basic type with a defined order, the elements will be
	visited in sorted key order.

{{range pipeline}} T1 {{else}} T0 {{end}}
	The value of the pipeline must be an array, slice, map, or channel.
	If the value of the pipeline has length zero, dot is unaffected and
	T0 is executed; otherwise, dot is set to the successive elements
	of the array, slice, or map and T1 is executed.

{{break}}
  = Внутренний цикл {{range pipeline}} завершается досрочно, останавливая текущую итерацию и обходя все оставшиеся итерации.

{{continue}}
  = Текущая итерация самого внутреннего цикла {{range pipeline}} останавливается, и цикл начинает следующую итерацию.

{{template "name"}}
  = Шаблон с указанным именем выполняется с нулевыми данными (nil data).

{{template "name" pipeline}}
	The template with the specified name is executed with dot set
	to the value of the pipeline.

{{block "name" pipeline}} T1 {{end}}
	A block is shorthand for defining a template
		{{define "name"}} T1 {{end}}
	and then executing it in place
		{{template "name" pipeline}}
	The typical use is to define a set of root templates that are
	then customized by redefining the block templates within.

{{with pipeline}} T1 {{end}}
	If the value of the pipeline is empty, no output is generated;
	otherwise, dot is set to the value of the pipeline and T1 is
	executed.

{{with pipeline}} T1 {{else}} T0 {{end}}
	If the value of the pipeline is empty, dot is unaffected and T0
	is executed; otherwise, dot is set to the value of the pipeline
	and T1 is executed.

{{with pipeline}} T1 {{else with pipeline}} T0 {{end}}
	To simplify the appearance of with-else chains, the else action
	of a with may include another with directly; the effect is exactly
	the same as writing
		{{with pipeline}} T1 {{else}}{{with pipeline}} T0 {{end}}{{end}}


*************
* Arguments *
*************

Аргумент - это простое значение, обозначаемое одним из следующих.

  ● A boolean, string, character, integer, floating-point, imaginary or complex constant (мнимая или комплексная константа) in Go syntax.
    = These behave like Go's untyped constants.
      [!] Они ведут себя как нетипизированные константы Go. Обратите внимание, что, как и в Go,
          переполнение большой целочисленной константы при присвоении или передаче в функцию может зависеть от того, 32 или 64 бита в ints на хост-машине.

  ● The keyword nil, representing an untyped Go nil.

  ● The character '.' (period): 
    = The result is the value of dot.

  ● A variable name, which is a (possibly empty) alphanumeric string preceded by a dollar sign, such as $piOver2 or $ The result is the value of the variable. Variables are described below.

  ● The name of a field of the data, which must be a struct, preceded by a period, such as .Field The result is the value of the field. Field invocations may be chained: .Field1.Field2 Fields can also be evaluated on variables, including chaining: $x.Field1.Field2

  ● The name of a key of the data, which must be a map, preceded by a period, such as .Key The result is the map element value indexed by the key. Key invocations may be chained and combined with fields to any depth: .Field1.Key1.Field2.Key2 Although the key must be an alphanumeric identifier, unlike with field names they do not need to start with an upper case letter. Keys can also be evaluated on variables, including chaining: $x.key1.key2

  ● The name of a niladic method of the data, preceded by a period, such as .Method The result is the value of invoking the method with dot as the receiver, dot.Method(). Such a method must have one return value (of any type) or two return values, the second of which is an error. If it has two and the returned error is non-nil, execution terminates and an error is returned to the caller as the value of Execute. Method invocations may be chained and combined with fields and keys to any depth: .Field1.Key1.Method1.Field2.Key2.Method2 Methods can also be evaluated on variables, including chaining: $x.Method1.Field

  ●The name of a niladic function, such as fun The result is the value of invoking the function, fun(). The return types and values behave as in methods. Functions and function names are described below.

  ● A parenthesized instance of one the above, for grouping. The result may be accessed by a field or map key invocation. print (.F1 arg1) (.F2 arg2) (.StructValuedMethod "arg").Field

Аргументы могут оцениваться по любому типу;
  если они являются указателями (pointers), реализация автоматически перенаправляет их к базовому типу, когда это необходимо.
  Если оценка дает значение функции, например, поле struct с функциональным значением,
  функция НЕ ВЫЗЫВАЕТСЯ АВТОМАТИЧЕСКИ, но может быть использована в качестве значения истинности для действия if и т. п.
  (!) Чтобы вызвать ее, используйте функцию call, определенную ниже.


Pipelines

Pipeline (конвейер) - это возможная последовательность «команд».
Команда - это простое значение (аргумент) или вызов функции || метода, возможно, с несколькими аргументами:

Argument
	The result is the value of evaluating the argument.
.Method [Argument...]
	The method can be alone or the last element of a chain but,
	unlike methods in the middle of a chain, it can take arguments.
	The result is the value of calling the method with the
	arguments:
		dot.Method(Argument1, etc.)
functionName [Argument...]
	The result is the value of calling the function associated
	with the name:
		function(Argument1, etc.)
	Functions and function names are described below.
A pipeline may be "chained" by separating a sequence of commands with pipeline characters '|'. In a chained pipeline, the result of each command is passed as the last argument of the following command. The output of the final command in the pipeline is the value of the pipeline.

The output of a command will be either one value or two values, the second of which has type error. If that second value is present and evaluates to non-nil, execution terminates and the error is returned to the caller of Execute.

Variables ¶
A pipeline inside an action may initialize a variable to capture the result. The initialization has syntax

$variable := pipeline
where $variable is the name of the variable. An action that declares a variable produces no output.

Variables previously declared can also be assigned, using the syntax

$variable = pipeline
If a "range" action initializes a variable, the variable is set to the successive elements of the iteration. Also, a "range" may declare two variables, separated by a comma:

range $index, $element := pipeline
in which case $index and $element are set to the successive values of the array/slice index or map key and element, respectively. Note that if there is only one variable, it is assigned the element; this is opposite to the convention in Go range clauses.

A variable's scope extends to the "end" action of the control structure ("if", "with", or "range") in which it is declared, or to the end of the template if there is no such control structure. A template invocation does not inherit variables from the point of its invocation.

When execution begins, $ is set to the data argument passed to Execute, that is, to the starting value of dot.