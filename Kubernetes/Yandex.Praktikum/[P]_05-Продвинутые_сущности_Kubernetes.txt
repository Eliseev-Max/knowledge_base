
Добавим проверку живучести в backend-service сосисочной
  <и>
  создадим несколько манифестов.

--[backend-pod.yaml]--
---
apiVersion: v1
kind: Pod
metadata:
  name: backend
spec:
  containers:
    - image: gitlab.praktikum-services.ru:5050/<путь к репозиторию образа>:<тег образа>
      name: backend
      imagePullPolicy: IfNotPresent
      env:
        - name: VAULT_HOST
          value: <student vault host>
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault
              key: vault_token
      ports:
        - name: backend
          containerPort: 8080
      livenessProbe:
        # проверка живучести выполнит запрос HTTP GET       
        httpGet:
          # путь к запросу в HTTP-запросе          
          path: /health
          # порт, к которому должна подключиться проверка        
          port: 8080
        # перед исполнением первой проверки подождать 15 секунд, пока стартанёт бэкенд          
        initialDelaySeconds: 15
        # период выполнения проверки
        periodSeconds: 30
        # максимальное время выполнения проверки (по умолчанию 1 раз)
        timeoutSeconds: 2
        # сколько раз пробовать попытку, если она провалилась (по умолчанию 1 раз)
        failureThreshold: 6
  # чтобы Кубер мог скачивать образы из нашего GitLab Registry  
  imagePullSecrets:
    - name: docker-config-secret

####----####----####
---{MY-backend-pod.yaml}---
---
apiVersion: v1
kind: Pod
metadata:
  name: backend
spec:
  containers:
    - image: gitlab.praktikum-services.ru:5050/<путь к репозиторию образа>:<тег образа>
      name: backend
      imagePullPolicy: IfNotPresent
      env:
        - name: VAULT_HOST
          value: <student vault host>
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault
              key: vault_token
      ports:
        - name: backend
          containerPort: 8080
      livenessProbe:
        # проверка живучести выполнит запрос HTTP GET       
        httpGet:
          # путь к запросу в HTTP-запросе          
          path: /health
          # порт, к которому должна подключиться проверка        
          port: 8080
        # перед исполнением первой проверки подождать 15 секунд, пока стартанёт бэкенд          
        initialDelaySeconds: 15
        # период выполнения проверки
        periodSeconds: 30
        # максимальное время выполнения проверки (по умолчанию 1 раз)
        timeoutSeconds: 2
        # сколько раз пробовать попытку, если она провалилась (по умолчанию 1 раз)
        failureThreshold: 6
  # чтобы Кубер мог скачивать образы из нашего GitLab Registry  
  imagePullSecrets:
    - name: docker-config-secret


####----####----####

--[backend-service.yaml]--
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: backend
####----####----####


---{MY-backend-service.yaml}---
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: backend

####----####----####


--[backend-secrets.yaml]--
# Секрет, необходимый, чтобы соединяться с Vault и получать креды для БД:
---
apiVersion: v1
kind: Secret
metadata:
  name: vault
  labels:
    app: vault
data:
  vault_token: <ваш vault-token>
type: Opaque

# Секрет, необходимый, чтобы взаимодействовать с Docker Registry в GitLab:
---
kind: Secret
apiVersion: v1
metadata:
  name: docker-config-secret
data:
  .dockerconfigjson: >-
    ewoJImF1dGhzIjogewoJCSJnaXRsYWIucHJha3Rpa3VtLXNlcnZpY2VzLnJ1OjUwNTAiOiB7CgkJCSJhdXRoIjogIlpYSmhhMmh0WlhSNmVXRnViM1k2TlZrNWNESnlSM05RUVcxSFVIST0iCgkJfQoJfQp9
type: kubernetes.io/dockerconfigjson
####----####----####


---{MY-backend-secrets.yaml}---
---
apiVersion: v1
kind: Secret
metadata:
  name: vault
  labels:
    app: vault
data:
  vault_token: <ваш vault-token>
type: Opaque

# Секрет, необходимый, чтобы взаимодействовать с Docker Registry в GitLab:
---
kind: Secret
apiVersion: v1
metadata:
  name: docker-config-secret
data:
  .dockerconfigjson: >-
    ewoJImF1dGhzIjogewoJCSJnaXRsYWIucHJha3Rpa3VtLXNlcnZpY2VzLnJ1OjUwNTAiOiB7CgkJCSJhdXRoIjogIlpYSmhhMmh0WlhSNmVXRnViM1k2TlZrNWNESnlSM05RUVcxSFVIST0iCgkJfQoJfQp9
type: kubernetes.io/dockerconfigjson

####----####----####

