Ingress Controllers

#=> "Ingress": https://kubernetes.io/docs/concepts/services-networking/ingress/

# Здесь перечислены распространенные контроллеры ингресса, которые можно развернуть.
(https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)



Для того, чтобы ресурс Ingress работал в вашем кластере, должен быть запущен Ingress-контроллер (Ingress Controller).
Вам нужно выбрать хотя бы один Ingress Controller и убедиться, что он настроен в вашем кластере.


[!] В отличие от других типов контроллеров, которые запускаются как часть бинарного файла kube-controller-manager,
    контроллеры Ingress не запускаются автоматически вместе с кластером.


Kubernetes как проект поддерживает и обслуживает Ingress-контроллеры:
  AWS,
  GCE
  и nginx.


[Additional Controllers] {
  Примечание: В этом разделе приведены ссылки на сторонние проекты, обеспечивающие функциональность, необходимую Kubernetes.
  Авторы проекта Kubernetes не несут ответственности за эти проекты, которые перечислены в алфавитном порядке.
  Чтобы добавить проект в этот список, прочитайте руководство по содержанию, прежде чем отправлять изменения.
  Дополнительная информация.
}

[Использование нескольких контроллеров Ingress]

Вы можете развернуть в кластере любое количество контроллеров Ingress с помощью класса ingress.
(ingress class: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)

**<Ingress class>**
  Ingress'ы могут быть реализованы разными контроллерами, часто с разной конфигурацией.
  Каждый ингресс должен определять класс, ссылку на ресурс IngressClass, который содержит дополнительную конфигурацию,
  включая имя контроллера, который должен реализовать класс.

--<service/networking/external-lb.yaml>--
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: external-lb
spec:
  controller: example.com/ingress-controller
  parameters:
    apiGroup: k8s.example.com
    kind: IngressParameters
    name: external-lb

# поле .spec.parameters класса IngressClass:
    = позволяет вам ссылаться на другой ресурс, предоставляющий конфигурацию, связанную с этим классом IngressClass.
    Конкретный тип используемых параметров зависит от контроллера ингресса,
    который вы указали в поле .spec.controller класса IngressClass.


# Обратите внимание на .metadata.name вашего ресурса класса ingress.
При создании Ingress вам понадобится это имя для указания поля ingressClassName в объекте Ingress (см. справочник IngressSpec v1).

ingressClassName - это замена старого метода аннотации.
Если вы не указали IngressClass для Ingress, а в вашем кластере есть только один IngressClass, помеченный как класс по умолчанию,
то Kubernetes применит к ingress'у IngressClass по умолчанию кластера.
Вы отмечаете IngressClass по умолчанию, устанавливая аннотацию:
ingressclass.kubernetes.io/is-default-class
  для этого IngressClass со строковым значением "true".

# В идеале все контроллеры Ingress должны соответствовать этой спецификации,
# НО различные контроллеры Ingress работают немного по-разному.


###########
# Ingress #
###########

#(https://kubernetes.io/docs/concepts/services-networking/ingress/)

"""
  Сделайте свой сетевой сервис HTTP (|| HTTPS) доступным с помощью механизма конфигурирования с учетом протокола,
  который понимает такие веб-концепции, как URI, имена хостов, пути (paths) и многое другое.

(!) Концепция Ingress позволяет направлять трафик на различные бэкенды на основе правил,
    задаваемых через Kubernetes API.
"""

[!] ЗАМЕЧАНИЕ:
  Ingress заморожен.
  В API шлюза добавляются новые функции.


[Терминология:]

# Для ясности в этом руководстве даны следующие определения:

  Node:
    = Рабочая машина в Kubernetes, входящая в состав кластера.

  Cluster:
    = Набор Nodes, на которых выполняются контейнерные приложения, управляемые Kubernetes.
      В данном примере и в большинстве обычных deployments Kubernetes nodes в кластере не являются частью публичного интернета.

  Edge router (Пограничный маршрутизатор):
    = Маршрутизатор, обеспечивающий соблюдение политики брандмауэра для вашего кластера.
      Это может быть шлюз, управляемый облачным провайдером, или физический элемент оборудования.

  Cluster network:
    =  Набор связей (links), логических или физических, которые обеспечивают взаимодействие внутри кластера в соответствии с сетевой моделью Kubernetes.

  Service:
    = Service Kubernetes, который идентифицирует набор Pod'ов с помощью selector'ных меток (label selectors).
      Если не указано иное, предполагается, что Service'ы имеют виртуальные IP-адреса, маршрутизируемые ТОЛЬКО В ПРЕДЕЛАХ кластерной сети.
      

********************
* What is Ingress? *
********************

  Ingress открывает HTTP- и HTTPS-маршруты извне кластера к Service'ам внутри кластера.
  Маршрутизация трафика контролируется правилами, определенными на ресурсе Ingress.

  Вот простой пример, в котором Ingress отправляет весь свой трафик одному сервису:
#(см. картинку)

  Ingress может быть настроен на
    предоставление Service'ам внешних URL-адресов,
    балансировку нагрузки,
    терминирование (завершение) SSL / TLS
    и предоставление виртуального хостинга на основе имен.

  Контроллер Ingress отвечает за выполнение Ingress, обычно с помощью балансировщика нагрузки,
  хотя он также может настроить пограничный маршрутизатор или дополнительные фронтенды для обработки трафика.

[!] Ingress не открывает произвольные порты или протоколы.

  Для передачи в интернет сервисов, отличных от HTTP и HTTPS, обычно используется Service типа
    Service.Type=NodePort
      (https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
      <или>
    Service.Type=LoadBalancer
      (https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer)

