Kubernetes Cluster Networking

[sources:]
1) "Cluster Networking": https://kubernetes.io/docs/concepts/cluster-administration/networking/
2) "Services, Load Balancing, and Networking": https://kubernetes.io/docs/concepts/services-networking/
3) "Kubernetes Networking: сервисы, Ingress и Network Policies": https://habr.com/ru/companies/T1Holding/articles/767056/


Четыре сетевые проблемы, которые необходимо решить:
  1. Коммуникации container-to-container (=между контейнерами) с высокой степенью связности (highly-coupled):
    => эта проблема решается с помощью связей Pod'ов и localhost.

  2. Коммуникации Pod-to-Pod (=между Pod'ами):
    => этот вопрос является основным в данном документе.

  3. Коммуникации Pod-to-Service (между Pod'ами и Service'ами):
    => этот вопрос решается с помощью Service'ов.

  4. Коммуникации External-to-Service (между внешними пользователями и Service'ами):
    => этот вопрос также решается с помощью сервисов.

Kubernetes - это совместное использование машин приложениями.

Как правило, для совместного использования машин требуется обеспечить,
чтобы два приложения не пытались использовать одни и те же порты.
Координировать порты между несколькими разработчиками
  - очень сложно в масштабе 
  - подвергает пользователей риску возникновения проблем на уровне кластера, которые они не могут контролировать.

Динамическое распределение портов вносит в систему множество сложностей:
  * каждое приложение должно принимать порты как флаги,
  * серверы API должны знать, как вставлять динамические номера портов в конфигурационные блоки,
  * service'ы должны знать, как найти друг друга,
  ...и так далее.

Вместо того чтобы разбираться с этим, Kubernetes использует другой подход.

# О сетевой модели Kubernetes читайте здесь: [2]


********************************
* Kubernetes IP address ranges *
********************************

  Кластеры Kubernetes должны выделять непересекающиеся IP-адреса для Pod'ов, Service'ов и Nodes из ряда доступных адресов,
  настроенных в следующих компонентах:
    ● Сетевой плагин (network plugin) настроен на назначение IP-адресов Pod'ам.
    ● kube-apiserver настроен на назначение IP-адресов Services'ам.
    ● The kubelet || the cloud-controller-manager настроены на назначение IP-адресов Node'ам.

****************************
* Cluster networking types *
****************************

Кластеры Kubernetes, в зависимости от настроенных семейств IP-адресов, можно разделить на категории:
  ● IPv4 only:
    = Сетевой плагин, kube-apiserver и kubelet/cloud-controller-manager настроены на назначение только IPv4-адресов

  ● IPv6 only:
    = Сетевой плагин, kube-apiserver и kubelet/cloud-controller-manager настроены на назначение только IPv6-адресов.

  ● IPv4/IPv6 или IPv6/IPv4 dual-stack:
    ○ network plugin настроен на назначение IPv4 и IPv6 адресов.
    ○ kube-apiserver настроен на назначение IPv4 и IPv6 адресов.
    ○ kubelet или cloud-controller-manager настроены на назначение IPv4 и IPv6 адресов.
    ○ Все компоненты должны согласовать конфигурацию основного семейства IP-адресов.

Кластеры Kubernetes учитывают только семейства IP-адресов, присутствующие на объектах
  ✓ Pods,
  ✓ Services
  ✓ и Nodes,
  независимо от существующих IP-адресов представленных объектов.

[Например:]
  сервер или Pod может иметь несколько IP-адресов на своих интерфейсах,
(!) но ТОЛЬКО IP-адреса в
node.status.addresses
  <или>
pod.status.ips учитываются при реализации сетевой модели Kubernetes и определении типа кластера.


*********************************************
* Как реализовать сетевую модель Kubernetes *
*********************************************

  Сетевая модель реализуется container runtime на каждой Node.
  Наиболее распространенные container runtimes используют плагины Container Network Interface (CNI) для управления сетью и возможностями безопасности.
  Существует множество различных плагинов CNI от разных производителей.
  Некоторые из них предоставляют только базовые возможности добавления и удаления сетевых интерфейсов,
  в то время как другие предлагают более сложные решения, такие как
    интеграция с другими системами оркестрации контейнеров,
    запуск нескольких CNI-плагинов,
    расширенные функции IPAM
    и т. д.

# Неполный список сетевых аддонов, поддерживаемых Kubernetes, приведен на этой странице:
#-> https://kubernetes.io/docs/concepts/cluster-administration/addons/#networking-and-network-policy


#[2]
********************************
* The Kubernetes network model *
********************************

Сетевая модель Kubernetes состоит из нескольких частей:

  ✔ Каждый pod в кластере получает свой уникальный IP-адрес в масштабах всего кластера.
      ● у pod'а есть собственное частное сетевое пространство имен (namespace),
      которое разделяется всеми контейнерами внутри pod'а.
    [!] Процессы, запущенные в разных контейнерах одного pod'а, могут взаимодействовать друг с другом через localhost.

  ✔ Pod network (также называемая кластерной сетью, cluster network) управляет взаимодействием между pod'ами.
     Она гарантирует, что (за исключением преднамеренной сегментации сети):
      ● Все pod'ы могут взаимодействовать со всеми другими pod'ами,
        независимо от того, находятся ли они на одном Node или на разных Node'ах.

      ● Pod'ы могут взаимодействовать друг с другом НАПРЯМУЮ,
        без использования прокси-серверов или трансляции адресов (NAT).
        # В Windows это правило не применяется к host-network pods.

      ● Агенты на Node (например, системные демоны или kubelet) могут взаимодействовать со всеми pod'ами на этом Node.

  ✔ API Service позволяет вам предоставить стабильный (долгоживущий) IP-адрес или имя хоста для сервиса,
      реализуемого одним или несколькими внутренними pod'ами,
      при этом отдельные pod'ы, составляющие Service, могут меняться со временем.
      
      ● Kubernetes автоматически управляет объектами EndpointSlice для предоставления информации о pod'ах,
        которые в данный момент поддерживают Service.

      ● Реализация сервисного прокси отслеживает набор объектов Service и EndpointSlice
        и программирует плоскость данных (data plane) для маршрутизации трафика service к своим бэкендам,
        используя API операционной системы или облачного провайдера для перехвата или переписывания пакетов.

  ✔ Gateway API (или его предшественник Ingress) позволяет сделать Service'ы доступными для клиентов,
     находящихся за пределами кластера.
      ● Более простой, но менее настраиваемый механизм проникновения в кластер доступен через тип Service API:
        type: LoadBalancer
        если используется поддерживаемый облачный провайдер.

  ✔ NetworkPolicy - это встроенный Kubernetes API,
       который позволяет контролировать трафик между pod'ами или между pod'ами и внешним миром.


In older container systems, there was no automatic connectivity between containers on different hosts, and so it was often necessary to explicitly create links between containers, or to map container ports to host ports to make them reachable by containers on other hosts. This is not needed in Kubernetes; Kubernetes's model is that pods can be treated much like VMs or physical hosts from the perspectives of port allocation, naming, service discovery, load balancing, application configuration, and migration.

Only a few parts of this model are implemented by Kubernetes itself. For the other parts, Kubernetes defines the APIs, but the corresponding functionality is provided by external components, some of which are optional:

Pod network namespace setup is handled by system-level software implementing the Container Runtime Interface.

The pod network itself is managed by a pod network implementation. On Linux, most container runtimes use the Container Networking Interface (CNI) to interact with the pod network implementation, so these implementations are often called CNI plugins.

Kubernetes provides a default implementation of service proxying, called kube-proxy, but some pod network implementations instead use their own service proxy that is more tightly integrated with the rest of the implementation.

NetworkPolicy is generally also implemented by the pod network implementation. (Some simpler pod network implementations don't implement NetworkPolicy, or an administrator may choose to configure the pod network without NetworkPolicy support. In these cases, the API will still be present, but it will have no effect.)

There are many implementations of the Gateway API, some of which are specific to particular cloud environments, some more focused on "bare metal" environments, and others more generic.

What's next
The Connecting Applications with Services tutorial lets you learn about Services and Kubernetes networking with a hands-on example.

Cluster Networking explains how to set up networking for your cluster, and also provides an overview of the technologies involved.