Использование Service для раскрытия вашего приложения
(Using a Service to Expose Your App)
#●✓✔✕✘➜

// Understand how labels and selectors relate to a Service. | Понять, как labels и selectors связаны с Service.
// Expose an application outside a Kubernetes cluster. | Вывод приложения за пределы кластера Kubernetes.


############################
# Обзор Kubernetes Service #
############################

  ✔ Pod'ы Kubernetes смертны.
  ✔ Pod'ы имеют жизненный цикл.

  Когда worker node (рабочий узел) "умирает", Pod'ы, запущенные на этом node, также теряются.

  ReplicaSet может динамически возвращать кластер в нужное состояние путем создания новых Pod'ов,
  чтобы приложение продолжало работать.

[ПРИМЕР:]
  рассмотрим бэкенд для обработки изображений (image-processing backend) с 3 репликами.
  Эти реплики взаимозаменяемы;
  внешняя система не должна заботиться
  ➜ о репликах бэкенда
    <или>
  ➜ даже о том, теряется ли Pod и создается ли он заново.

[!] КАЖДЫЙ Pod в кластере Kubernetes имеет УНИКАЛЬНЫЙ IP-адрес,
  (!) даже Pod на одном node,
  => поэтому необходимо предусмотреть способ автоматического согласования изменений между Pod'ами,
  чтобы ваши приложения продолжали работать.

  Service в Kubernetes - это абстракция, определяющая логический набор Pod'ов и политику доступа к ним.
  Service'ы обеспечивают свободное взаимодействие между зависимыми Pod'ами.

  Service определяется с помощью YAML || JSON, как и все объектные манифесты Kubernetes.

  Набор Pod'ов, на которые нацелен Service, обычно определяется селектором меток (label selector).
  (в некоторых случаях Service может не включать selector в spec).

  Хотя каждый Pod имеет уникальный IP-адрес, эти IP-адреса НЕ ВЫСТАВЛЯЮТСЯ ЗА ПРЕДЕЛЫ кластера без Service'а.

  Service'ы позволяют вашим приложениям получать трафик.

  Service'ы могут быть открыты различными способами путем указания type в spec Service'а:

Types of Services:  
  ● ClusterIP (default)
    = Предоставляет Service на ВНУТРЕННЕМ IP-адресе кластера.
      Этот тип делает Service доступным только изнутри кластера.

  ● NodePort
    = Открывает (Exposes) Service на одном и том же порту каждой выбранной Node в кластере с помощью NAT.
      Делает Service доступным извне кластера, используя <NodeIP>:<NodePort>.
      Надстройка (Суперсет, Superset) of ClusterIP.

  ● LoadBalancer
    = Создает внешний балансировщик нагрузки в текущем облаке (если поддерживается)
      и назначает фиксированный внешний IP-адрес для Service.
      Является надстройкой над NodePort.

  ● ExternalName
    = Сопоставляет Service с содержимым поля externalName
      (например, foo.bar.example.com),
      возвращая запись CNAME с его значением.
    (!) Никакого проксирования не устанавливается.
      Для этого типа требуется
        версия 1.7 или выше kube-dns,
      или
        CoreDNS версии 0.0.8 или выше.

# Более подробную информацию о различных типах служб можно найти в учебном пособии "Использование исходного IP":
#-> "Using Source IP": https://kubernetes.io/docs/tutorials/services/source-ip/
# + смотри раздел:
#-> "Connecting Applications with Services": https://kubernetes.io/docs/tutorials/services/connect-applications-service/

[+обратите внимание+]
  есть некоторые случаи использования Service'ов, которые не предполагают определения selector в spec.
(!) Service, созданный без selector'а, также НЕ СОЗДАСТ соответствующий объект Endpoints.

  Это позволяет пользователям вручную сопоставлять (map) Service с определенными Endpoints.

  Другая возможность отсутствия selector заключается в том,
  что вы строго используете type: ExternalName.

***********************
* Services and Labels *
***********************

  Service маршрутизирует трафик между набором Pod'ов.
  Service'ы - это абстракция, которая позволяет Pod'ам умирать и реплицироваться в Kubernetes БЕЗ УЩЕРБА ДЛЯ ПРИЛОЖЕНИЯ.

  Обнаружение (discovery) и маршрутизация (routing) между зависимыми Pod'ами
  (например, фронтенд и бэкенд-компоненты в приложении)
  осуществляются с помощью Kubernetes Services.

  Service'ы сопоставляют (match) набор Pod'ов с помощью label'ов и selector'ов
  = примитивов группировки, которые позволяют логически оперировать объектами в Kubernetes.
  Labels (Метки) - это пары ключ/значение, прикрепленные к объектам, и могут использоваться любым способом:
    ● Назначают объекты для development, test, and production
    ● Встраивают метки версий
    ● Классифицируют объект с помощью тегов

  Labels можно прикрепить к объектам в момент создания или позже.
  Они могут быть изменены В ЛЮБОЕ ВРЕМЯ.
