Метки и селекторы
(Labels and selectors)

[sources:]
1) "Знакомство с Kubernetes. Часть 9: Метки и селекторы": https://ealebed.github.io/posts/2018/%D0%B7%D0%BD%D0%B0%D0%BA%D0%BE%D0%BC%D1%81%D1%82%D0%B2%D0%BE-%D1%81-kubernetes-%D1%87%D0%B0%D1%81%D1%82%D1%8C-9-%D0%BC%D0%B5%D1%82%D0%BA%D0%B8-%D0%B8-%D1%81%D0%B5%D0%BB%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D1%8B/
2) "Labels and Selectors": https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/


##################
# Метки (labels) #
##################

Метки (labels) представляют собой пары ключ/значение, которые назначаются объектам (например, Pod'ам) в кластере Kubernetes.

[Назначение labels:]
  для указания идентифицирующих атрибутов объектов, осмысленных и имеющих отношение к пользователям.

# Атрибуты в labels:
# * являются значимыми и важными для пользователей
# * не несут прямой семантики для основной системы.

Метки чаще всего используются для выбора подмножеств и организации объектов в кластере.
В данном случае “организация” = возможность пользователей сопоставлять свои собственные организационные структуры и системные объекты,
не требуя от клиентов хранить эти сопоставления.

[!] Метки могут прикрепляться к объектам:
    во время создания
    или же добавляться (и изменяться) в любое время.

  Каждый объект в кластере Kubernetes может иметь собственный набор ключей/значений.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Каждый ключ должен быть УНИКАЛЬНЫМ ДЛЯ ДАННОГО ОБЪЕКТА: !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

---<Пример_1 *.json>---
"metadata": {
  "labels": {
    "key1" : "value1",
    "key2" : "value2"
  }
}
---

---<Пример_2 *.yaml>---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: nginx
---

[Как помогают labels в Continuous Deployment?]
  * с помощью меток можно "задокументировать" запущенные в кластере объекты в понятном для пользователя формате;
  * использование меток в селекторах существенно упрощает управление инфраструктурой.

{
   Развертывания сервисов и конвейеры пакетной обработки часто представляют собой многомерные сущности
   (например, несколько разделов или деплоев,
              несколько релизов,
              несколько уровней,
              несколько микросервисов на уровень
    ).
  Для управления часто требуются сквозные операции,
  что нарушает инкапсуляцию строго иерархических представлений,
  особенно жестких иерархий, ОПРЕДЕЛЯЕМЫХ ИНФРАСТРУКТУРОЙ, а не пользователями.
}

#Пример наиболее часто используемых меток:
---
metadata: {
  labels: {
    "release" : "stable",
    #"release" : "canary"

  }
}

key: value
"environment": "dev",
"environment": "qa",
"environment" : "production"

"tier" : "frontend",
"tier" : "backend",
"tier" : "cache"

"track" : "daily",
"track" : "weekly"


Корректные имена ключей в метках состоят из двух сегментов:
  1) опционального префикса
  2) имени
  разделенных символом /.

Имя:
  ✓ обязательная часть;
  ✓ должно начинаться и заканчиваться буквенно-цифровым символом ([a-z0-9A-Z]);
  ✓ может содержать в себе дефисы (-), подчеркивания (_) и точки (.)
  ✓ Максимально допустимая длина имени ключа - 63 символа.

Опциональный префикс (если определен):
  ✓ должен быть DNS-поддоменом (разрешается использование точек)
  ✓ не длиннее 253 символов;
  ✓ заканчиваться символом /.

(!) Например, префикс kubernetes.io/ зарезервирован для основных компонентов Kubernetes.

  Значения меток (labels), так же как и имена ключей,
    + должны начинаться и заканчиваться буквенно-цифровым символом ([a-z0-9A-Z]),
    + содержать в себе дефисы (-), подчеркивания (_) и точки (.).
    + Максимально допустимая длина значения метки - 63 символа.

  С использованием селектора меток (label selector) в кластере Kubernetes пользователь может идентифицировать набор объектов.
  Селектор (selector) - это примитив основной группировки в Kubernetes.
  В данный момент API поддерживает два вида селекторов:
    ✓ основанных на точном соответствии (equality-based)
    ✓ и на соответствии набору (set-based).

  Если в селекторе указывается несколько соответствий, то они должны быть перечислены ЧЕРЕЗ ЗАПЯТУЮ
  - в данном случае для их объединения будет использоваться логический оператор AND (&&).

  Селектор, основанный на ТОЧНОМ СООТВЕТСТВИИ, поддерживает только три возможных оператора сравнения:
    ✓ =,
    ✓ ==
    ✓ и != 
  - первые два из них означают равенство, третий - неравенство.
  Например:
-->
environment = production
tier != frontend
<--

  В данном примере селектор выберет
    ✓ все ресурсы, у который ключ environment соответствует значению production,
    ✓ а также те ресурсы, у которых ключ tier НЕ РАВЕН frontend
    + (в том числе ресурсы, у которых нет ключа tier).

  Селектор, основанный на СООТВЕТСТВИИ НАБОРУ, также поддерживает три возможных оператора
    ✓ in,
    ✓ notin
    ✓ и exists
  # (последний используется только для проверки наличия/отсутствия ключа).

Например:
-->
environment in (production, qa)
tier notin (frontend, backend)
partition
!partition
<--