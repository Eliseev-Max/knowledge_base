Именование в Python 3
	• Имена классов начинаются с БОЛЬШОЙ буквы, все остальные идентификаторы - с маленькой.
	• Использования знака подчеркивания в качестве первого символа идентификатора означает, что данный идентификатор является частным (закрытым от использования вне класса).
	    Имена, начинающиеся с символа подчёркивания (_), не импортироуются из модуля с помощью инструкции from module import *
	• Если идентификатор начинается и заканчивается двумя знаками подчеркивания (например, __init__ ) это означает, что он является специальным именем, определенным внутри языка.

Последовательности:
	строки	[str]
	списки	[list]
	кортежи	[tuple]
	диапазоны [range]
	тип bytes	#неизменяемая последовательность байтов
	тип bytearray	#изменяемая последовательность байтов
Отображения:
	словари [dict]
Последовательности и отображения поддерживают механизм итераторов, позволяющий произвести обход всех элементов с помощью
	метода __next__()
	функции next()
Функция iter() преобразует последовательность и отображение в итератор
	>>> li = [1,2,3]
	>>> print(type(li))
	<class 'list'>
	>>> iterLi = iter(li)
	>>> print(type(iterLi))
	<class 'list_iterator'>
iter(tuple) -> class 'tuple_iterator'
iter(str) -> class 'str_iterator'

Последовательности поддерживают также:
	► обращение к элементу по индексу
	► получение среза
	► конкатенацию ("+")
	► повторение ("*")
	► проверку на вхождение (оператор in)

Групповое присваивание
>>> x = y = 10
>>> x, y		# 10, 10
! НЕЛЬЗЯ использовать для изменяемых объектов (например, списков)!
Изменения в одном изменяемом объекте приведут к изменениям и в другом
! Интерпретатор производит КЕШИРОВАНИЕ малых целых чисел и небольших строк.

Позиционное присваивание
>>> x, y = 1, 2

! По обе стороны оператора  = могут быть указаны последовательности
	>>> x, y, z = "123"
	>>> x, y, z					# ('1', '2', '3')
	>>> x, y, z = [1,2,3]
	>>> x, y, z					#(1, 2, 3)
! Количество элементов справа и слева от оператора = должно совпадать
!! Переменная, перед которой указана звёздочка, содержит список при позиционном присваивании
	>>> x, y, *z = 1, 2, 3, 4
	>>> x, y, z					#(1, 2, [3, 4])
	>>> x, y, *z = 1, 2
	>>> x, y, z					#(1, 2, [])
	