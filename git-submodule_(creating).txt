{ sources:
https://www.atlassian.com/git/tutorials/git-submodule
git-scm:docs
	en: https://git-scm.com/docs/gitsubmodules
	ru: https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%BE%D0%B4%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8
}
Пример создания git submodule:

1. Создадим директорию git-submodule-demo и проинициализируем её как новый репозиторий:
	$ mkdir git-submodule-demo
	$ cd git-submodule-demo
	$ git init
	> Initialized empty Git repository in /path/to/git-submodule-demo/.git/

2. Добавим подмодуль в созданный репозиторий
	|$ git submodule add <URL репозитория> <директория>|
	
	$ git submodule add https://bitbucket.org/username/repo
	
	# Команда git submodule add принимает параметр URL, который указывает на репозиторий git.
	# Можем просмотреть текущее состояние репозитория: $ git status
	# В репозитории появилось 2 новых файла:
	# .gitmodules
	# директория /repo
	# Просмотр содержимого .gitmodules показывает новое отображение подмодулей
	
	# По умолчанию подмодуль сохраняется в каталог с именем репозитория.
	# Изменить каталог сохранения подмодуля можно указав путь к нему в конце команды.
	
		$ git status
		> On branch master
		...
		new file:    .gitmodules		# конфигурационный файл
		# в нём хранится соответствие между URL проекта и локальным подкаталогом, в который вы его выкачали
		new file:    repo				# каталог проекта (директорий подмодуля)
	
		$ git diff --cached repo
	
	# Git распознает repo как подмодуль и не отслеживает его содержимое, пока мы не перейдём в него.
	# Вместо этого, Git видит repo как конкретный коммит этого репозитория.
		
		$ git diff --submodule 			# более понятный вывод
	
	# Права доступа каталога подмодуля имеют идентификатор типа 160000
	# Это специальные права доступа в Git, которые означают, что мы сохраняем коммит как элемент каталога, а не как подкаталог или файл

При клонировании проекта, содержащего подмодули, мы получаем каталоги, содержащие подмодули, но они пустые.
Чтобы получить содержимое каталога подмодуля, необходимо:
	1. проинициализировать локальный конфигурационный файл
		$ git submodule init
	
	2. получить все данные этого проекта и извлечь соответствующий коммит, указанный в основном проекте
		$ git submodule update

Можно объединить шаги 1 и 2, запустив команду:
	$ git submodule update --init
	или более безопасную команду
	$ git submodule update --init --recursive

‼ Более простой способ получения данных подмодуля:
	$ git clone --recurse-submodules

Получение изменений подмодуля из удалённого репозитория
	Проверить наличие изменений в подмодуле:
		1. Перейти в каталог подмодуля
		2. Выполнить git fetch
		3. Выполнить git merge origin/master
	
	Более простой способ получить изменения подмодуля (не извлекая и не сливая изменения в подкаталог):
		$ git submodule update --remote repo
	# Эта команда по умолчанию предполагает, что вы хотите обновить локальную копию до состояния ветки master из репозитория подмодуля.
	
	Как задать другую ветку подмодуля:
		Например, требуется отслеживать ветку stable:
			$ git config -f .gitmodules submodule.repo.branch stable
			$ git submodule update --remote
	# Если опустить -f .gitmodules, то команда сделает изменения локальном файле .git/config
	
	Отображать краткое резюме об изменениях в подмодулях:
		$ git config status.submodulesummary 1

[https://git-scm.com/book/ru/v2/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%BE%D0%B4%D0%BC%D0%BE%D0%B4%D1%83%D0%BB%D0%B8]