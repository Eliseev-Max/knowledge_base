Postgres. The DockerOfficial Image
(https://hub.docker.com/_/postgres)

#●✓✔✕✘➜

#######################
# What is PostgreSQL? #
#######################

PostgreSQL, часто просто «Postgres»,
  - это объектно-реляционная система управления базами данных (object-relational database management system, ORDBMS),
  в которой особое внимание уделяется расширяемости и соответствию стандартам.

[!] Основная функция PostgreSQL как сервера баз данных заключается в
    * безопасном хранении данных
      <и>
    * их последующем извлечении по запросам других программных приложений,
      как на том же компьютере, так и на другом компьютере по сети (включая Интернет).

  Он может работать с различными нагрузками:
    - от небольших приложений для одной машины
    - до крупных приложений для работы в Интернете с большим количеством одновременно работающих пользователей.

  Последние версии также обеспечивают репликацию самой базы данных для обеспечения безопасности и масштабируемости.


PostgreSQL:
  ✓ реализует большинство стандартов SQL:2011,
  ✓ соответствует стандарту ACID
  ✓ является транзакционной (включая большинство операторов DDL),
    избегая проблем блокировки с помощью многоверсионного управления параллелизмом (MVCC),
    обеспечивает устойчивость к "грязному чтению" (dirty reads) и полную сериализуемость (full serializability);

  ✓ обрабатывает сложные SQL-запросы, используя множество методов индексирования, недоступных в других базах данных;
  ✓ имеет:
    ● обновляемые представления (updateable views),
    ● материализованные представления (materialized views),
    ● триггеры (triggers),
    ● внешние ключи (foreign keys);

  ✓ поддерживает функции и хранимые процедуры,
    а также другие возможности расширения,
    и имеет большое количество расширений, написанных сторонними разработчиками.

  Помимо возможности работы с основными ПРОПРИЕТАРНЫМИ и ОТКРЫТЫМИ базами данных,
  PostgreSQL ПОДДЕРЖИВАЕТ МИГРАЦИЮ С НИХ, благодаря
  ✓ широкой поддержке стандартного SQL
    и
  ✓ доступным инструментам миграции.

  А если использовались проприетарные расширения,
  то за счет своей расширяемости, которая может эмулировать многие из них с помощью встроенных и сторонних расширений совместимости с открытым исходным кодом,
  например, для Oracle.

#Wiki: https://en.wikipedia.org/wiki/PostgreSQL


###############################
# Использование docker-образа #
###############################

#(!) Пользователь postgres и база данных по умолчанию создаются в точке входа (entrypoint) с помощью initdb.

---<Start-pg-instance>---
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
>---<

---<Start-pg-via-psql>---
docker run -it --rm --network some-network postgres psql -h some-postgres -U postgres
# -h, --hostname = Container host name
>---<


---<Compose-file>---
# Use postgres/example user/password credentials
version: '3.9'

services:

  db:
    image: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      POSTGRES_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
>---<

# 1) Run
#   a) $ docker stack deploy -c stack.yml postgres
#   b) (or $ docker-compose -f stack.yml up),
# 2) wait for it to initialize completely,
# 3) and visit http://swarm-ip:8080, http://localhost:8080, or http://host-ip:8080 (as appropriate).

*************************
* Environment Variables *
*************************

  В образе PostgreSQL используется несколько переменных окружения.
[!] Единственная ОБЯЗАТЕЛЬНАЯ переменная = POSTGRES_PASSWORD,
    остальные необязательны.

[ВНИМАНИЕ:]
  переменные, специфичные для Docker, будут иметь эффект только в том случае,
  если вы запустите контейнер с пустым каталогом данных;
  ЛЮБАЯ СУЩЕСТВУЮЩАЯ БАЗА ДАННЫХ будет оставлена нетронутой при запуске контейнера.


POSTGRES_PASSWORD
  = эта переменная окружения НЕОБХОДИМА для использования образа PostgreSQL.
(!) Она НЕ ДОЛЖНА БЫТЬ пустой или неопределенной.
  Эта переменная окружения задает пароль суперпользователя для PostgreSQL.
  Суперпользователь по умолчанию определяется переменной окружения POSTGRES_USER.

[Примечание 1:]
  Образ PostgreSQL устанавливает доверительную аутентификацию локально,
    => пароль не требуется при подключении с localhost (внутри того же контейнера).
    => Однако при подключении с другого хоста/контейнера ПАРОЛЬ БУДЕТ НЕОБХОДИМ.

[Примечание 2:]
  = эта переменная определяет пароль суперпользователя в экземпляре PostgreSQL,
  установленный скриптом initdb при начальном запуске контейнера.

(!) Она НЕ ВЛИЯЕТ на переменную окружения PGPASSWORD,
    которая может быть использована клиентом psql во время выполнения,
## (как описано на https://www.postgresql.org/docs/14/libpq-envars.html ).
  PGPASSWORD, если она используется, будет указана как отдельная переменная окружения.

POSTGRES_USER
  = эта необязательная переменная окружения используется вместе с POSTGRES_PASSWORD для задания пользователя и его пароля.
  Эта переменная создаст:
    * указанного пользователя с правами суперпользователя
    * и базу данных с тем же именем.

  Если она НЕ УКАЗАНА, то будет использован пользователь postgres по умолчанию.

[Имейте в виду:]
  если этот параметр указан, то при инициализации PostgreSQL все равно будет показывать:
#>"The files belonging to this database system will be owned by user "postgres" "

  Это относится к системному пользователю Linux (из /etc/passwd в образе),
  от имени которого работает демон postgres,
  и как таковой НЕ СВЯЗАН с параметром POSTGRES_USER.

# (Более подробную информацию см. в разделе "Arbitrary --user Notes").


POSTGRES_DB
  = Эта необязательная переменная окружения может использоваться для определения другого имени базы данных по умолчанию,
    которая создается при первом запуске образа.
    Если она не указана, то будет использоваться значение POSTGRES_USER.

#POSTGRES_INITDB_ARGS
#POSTGRES_INITDB_WALDIR
#POSTGRES_HOST_AUTH_METHOD


PGDATA
/*
[Important Note:]
  when mounting a volume to /var/lib/postgresql,
  the /var/lib/postgresql/data path is a local volume from the container runtime,
  thus data is not persisted on the mounted volume.
*/
  = эта необязательная переменная может быть использована для определения другого места
    (например, подкаталога) для файлов базы данных.
    По умолчанию это /var/lib/postgresql/data.

  Если используемый data volume представляет собой
  ➜ точку монтирования файловой системы
    #(как в случае с постоянными дисками GCE),
  ➜ или удаленную папку, которая не может быть доступна пользователю postgres
    #(как в некоторых монтированиях NFS),
  ➜ или содержит папки/файлы (например, lost+found),

  Postgres initdb ТРЕБУЕТ СОЗДАНИЯ ПОДКАТАЛОГА в точке монтирования для хранения данных.

#For example:
-->
$ docker run -d \
	--name some-postgres \
	-e POSTGRES_PASSWORD=mysecretpassword \
	-e PGDATA=/var/lib/postgresql/data/pgdata \
	-v /custom/mount:/var/lib/postgresql/data \
	postgres
<--

[!] Это переменная окружения, которая НЕ ЯВЛЯЕТСЯ специфической для Docker.
    Поскольку переменная используется двоичным файлом сервера postgres (postgres server binary)
# (см. документацию PostgreSQL: https://www.postgresql.org/docs/14/app-postgres.html#id-1.9.5.14.7),
    сценарий точки входа учитывает ее.