
NAME
apt-secure - Archive authentication support for APT

DESCRIPTION
Starting with version 0.6, APT contains code that does signature checking of the Release file for all repositories. This ensures that data like packages in the archive can't be modified by people who have no access to the Release file signing key. Starting with version 1.1 APT requires repositories to provide recent authentication information for unimpeded usage of the repository. Since version 1.5 changes in the information contained in the Release file about the repository need to be confirmed before APT continues to apply updates from this repository.

Note: All APT-based package management front-ends like apt-get(8), aptitude(8) and synaptic(8) support this authentication feature, so this manpage uses APT to refer to them all for simplicity only.

UNSIGNED REPOSITORIES
If an archive has an unsigned Release file or no Release file at all current APT versions will refuse to download data from them by default in update operations and even if forced to
download front-ends like apt-get(8) will require explicit confirmation if an installation request includes a package from such an unauthenticated archive.

You can force all APT clients to raise only warnings by setting the configuration option Acquire::AllowInsecureRepositories to true. Individual repositories can also be allowed to be
insecure via the sources.list(5) option allow-insecure=yes. Note that insecure repositories are strongly discouraged and all options to force apt to continue supporting them will
eventually be removed. Users also have the Trusted option available to disable even the warnings, but be sure to understand the implications as detailed in sources.list(5).

A repository which previously was authenticated but would loose this state in an update operation raises an error in all APT clients irrespective of the option to allow or forbid usage of insecure repositories. The error can be overcome by additionally setting Acquire::AllowDowngradeToInsecureRepositories to true or for Individual repositories with the sources.list(5) option allow-downgrade-to-insecure=yes.

SIGNED REPOSITORIES
The chain of trust from an APT archive to the end user is made up of several steps.  apt-secure is the last step in this chain; trusting an archive does not mean that you trust its packages not to contain malicious code, but means that you trust the archive maintainer. It's the archive maintainer's responsibility to ensure that the archive's integrity is preserved.

apt-secure does not review signatures at a package level. If you require tools to do this you should look at debsig-verify and debsign (provided in the debsig-verify and devscripts packages respectively).

The chain of trust in Debian starts (e.g.) when a maintainer uploads a new package or a new version of a package to the Debian archive. In order to become effective, this upload
needs to be signed by a key contained in one of the Debian package maintainer keyrings (available in the debian-keyring package). Maintainers' keys are signed by other maintainers
following pre-established procedures to ensure the identity of the key holder. Similar procedures exist in all Debian-based distributions.

Once the uploaded package is verified and included in the archive, the maintainer signature is stripped off, and checksums of the package are computed and put in the Packages file.
The checksums of all of the Packages files are then computed and put into the Release file. The Release file is then signed by the archive key for this Ubuntu release, and
distributed alongside the packages and the Packages files on Ubuntu mirrors. The keys are in the Ubuntu archive keyring available in the ubuntu-keyring package.

End users can check the signature of the Release file, extract a checksum of a package from it and compare it with the checksum of the package they downloaded by hand - or rely on
APT doing this automatically.

Notice that this is distinct from checking signatures on a per package basis. It is designed to prevent two possible attacks:

•   Network "man in the middle" attacks. Without signature checking, malicious agents can introduce themselves into the package download process and provide malicious software either
    by controlling a network element (router, switch, etc.) or by redirecting traffic to a rogue server (through ARP or DNS spoofing attacks).

•   Mirror network compromise. Without signature checking, a malicious agent can compromise a mirror host and modify the files in it to propagate malicious software to all users
    downloading packages from that host.

However, it does not defend against a compromise of the master server itself (which signs the packages) or against a compromise of the key used to sign the Release files. In any
case, this mechanism can complement a per-package signature.
