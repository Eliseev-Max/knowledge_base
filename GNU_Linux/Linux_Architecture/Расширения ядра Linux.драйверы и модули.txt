Выдержки из книги Олега Цилюрика "Расширения ядра Linux: драйверы и модули"


# Глава 1 - "Модули с высоты птичьего полёта..."
# Linux и GNU

Linux - это всё, что касаемо ядра, а GNU - это та огромная часть, что относится к программированию пространства пользователя.

Ядро Linux монолитное...

На современных процессорах программный код ядра, в отличие от любого пользовательского кода, выпольняется в совершенно другом режиме - это привилегированный режим (иногда называемый режимом супервизора).
В этом режиме коду разрешается выполнять ряд действий, недопустимых в пользовательском режиме:
  * обработку аппаратных прерываний,
  * переразметку памяти, опреации ввода/вывода,
  * некоторое число привилегированных команд...

Весь остальной программный код всех приложений, GNU и сторонних разработчиков, выполняется только в пользовательском режиме (с ограниченными аппаратными привилегиями - не путать с программным разграничением привилегий: "root и другие").

Код привилегированного режима (ядра) выполняется в другом, отдельном адресном пространстве (виртуальном).
Коды всех пользовательских процессов выполняются, в противоположность, каждый в своём отдельном виртуальном адресном пространстве (каждый в своём).

На самых ранних (инициативных) этапах разработки система Linux была не только монолитной, но и цельно компилируемой: все компоненты системы, драйверы и другие функциональности, должны были компилироваться в единый монолит со всем остальным кодом ядра.
...
Модули - это некоторый набор функциональных компонентов ядра, на манер детского конструктора, которые альтернативно могут загружаться (или выгружаться) динамически в состав монолитного ядра в процессе загрузки или даже позже, в любой момент выполнения системы.
(В некотором смысле система модулей - это своего рода подобие архитектуры приложений пользовательского пространства, называемых оверлейными.)


FAQ

A: Для написания драйверов (модулей ядра) не нужно иметь в своей рабочей системе исходные коды ядра.
   Но нужно иметь заголовочные файлы (хедер-файлы, .h) ядра.

Q: Можно ли в программировании модулей ядра использовать какой-то другой язык программирования, кроме языка C?
A: Нет. Само ядро Linux написано на языке C, поэтому и модули ядра (являющиеся, по сути, плагинами к ядру) должны готовиться на языке C.

Q: Может ли в работе с модулями ядра использоваться компилятор, отличный от GCC?
A: В принципе, и само ядро, и модули к нему должны компилироваться компилятором GCC. Но есть сообщения, что ядро Linux (а значит, и модули ядра) успешно компилировались более новым компилятором Clang из проекта LLVM.
   В общем случае никакие другие компиляторы, кроме GCC, не должны использоваться для компиляции модулей ядра.

Q: Могут ли в Linux быть бинарные драйверы, "готовые" к инсталляции, независимо от версии ядра?
A: Нет, не могут. Драйверы, являющиеся модулями ядра, связываются с экспортируемыми именами ядра (вызываемыми функциями API или объектами данных) по их абсолютным адресам, изменяющимся не только при изменении версии ядра, но даже при пересборке ядра с изменёнными конфигурационными параметрами.
   Поэтому драйверы Linux могут предоставляться только в виде исходных кодов на языке C, которые требуется компилировать для использования.

