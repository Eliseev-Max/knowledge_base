sources:
  GNU Grep 3.8: {https://www.gnu.org/software/grep/manual/grep.html}
  ‼ Команда grep: опции, регулярные выражения и примеры использования: {https://zalinux.ru/?p=1270}
  Поиск текста в файлах Linux: {https://losst.pro/gerp-poisk-vnutri-fajlov-v-linux}
  Regular expressions in grep ( regex ) with examples {https://www.cyberciti.biz/faq/grep-regular-expressions/}

Название команды grep расшифровывается как "search globally for lines matching the regular expression, and print them"

Синтаксис команды:
  Общий вид:
  $  grep [опции] шаблон [/путь/к/файлу/или/папке...]
  
  Варианты запуска по версии https://zalinux.ru/?p=1270
    $ grep [ОПЦИИ] ШАБЛОН [ФАЙЛ...]
	
    $ grep [ОПЦИИ] -e ШАБЛОН... [ФАЙЛ...]
	## -e, --regexp=ШАБЛОН    использовать ШАБЛОН для поиска
    $ grep [ОПЦИИ] -f ФАЙЛ... [ФАЙЛ...]
	## брать ШАБЛОН из ФАЙЛа
	
  Фильтрация стандартного вывода команды:
    $ команда | grep [опции] шаблон
	
  • Опции - это дополнительные параметры, с помощью которых указываются различные настройки поиска и вывода,
    (например количество строк или режим инверсии)
  • Шаблон - это любая строка или регулярное выражение, по которому будет выполняться поиск.
  • Имя файла или папки - это то место, где будет выполняться поиск. 
  
  * grep позволяет искать в нескольких файлах;
  * grep позволяет искать каталоге, используя рекурсивный режим
    -r, --recursive
	  или
	-d =recurse (| --directories=recurse)
	

Шаблон выбора и его интерпретация:
  -E, --extended-regexp  ШАБЛОН — расширенное регулярное выражение
  -F, --fixed-regexp     ШАБЛОН — строки, разделённые символом новой строки
  -G, --basic-regexp     ШАБЛОН — простое регулярное выражение (по умолчанию)
  -P, --perl-regexp      ШАБЛОН — регулярное выражения языка Perl
  -e, --regexp=ШАБЛОН    использовать ШАБЛОН для поиска
  -f, --file=ФАЙЛ        брать ШАБЛОН из ФАЙЛа
  -i, --ignore-case      игнорировать различие регистра
  -w, --word-regexp      ШАБЛОН должен подходить ко всем словам
  -x, --line-regexp      ШАБЛОН должен подходить ко всей строке
  -z, --null-data        строки разделяются байтом с нулевым значением, а не
                         символом конца строки
 
Разное:
  -s, --no-messages         не показывать сообщения об ошибках
  
  -v, --invert-match        выбирать не подходящие строки (антифильтр, всё, кроме указанного)
  
  -V, --version             показать информацию о версии и закончить работу
      --help                показать эту справку и закончить работу
 
Управление выводом:
  -m, --max-count=ЧИСЛО     остановиться после указанного
                            ЧИСЛА выбранных строк
  -b, --byte-offset         печатать вместе с выходными строками смещение в
                            байтах
  -n, --line-number         печатать номер строки вместе с выходными строками
      --line-buffered       сбрасывать буфер после каждой строки
  -H, --with-filename       печатать имя файла для каждой выводимой строки
  -h, --no-filename         не начинать вывод с имени файла
      --label=МЕТКА         использовать МЕТКУ в качестве имени файла для
                            стандартного ввода
  -o, --only-matching       показывать только часть строки, совпадающей с ШАБЛОНОМ
  -q, --quiet, --silent     подавлять весь обычный вывод
      --binary-files=ТИП    считать, что двоичный файл имеет ТИП:
                            «binary», «text» или «without-match».
  -a, --text                то же что и --binary-files=text
  -I                        то же, что и --binary-files=without-match
  -d, --directories=ДЕЙСТВ  как обрабатывать каталоги
                            ДЕЙСТВИЕ может быть «read» (читать),
                            «recurse» (рекурсивно) или «skip» (пропускать).
  -D, --devices=ДЕЙСТВ      как обрабатывать устройства, FIFO и сокеты
                            ДЕЙСТВИЕ может быть «read» или «skip»
  -r, --recursive           то же, что и --directories=recurse
  -R, --dereference-recursive                             тоже, но с переходом по всем символьным ссылкам
      --include=Ф_ШАБЛОН    обработать только файлы, подпадающие под Ф_ШАБЛОН
      --exclude=Ф_ШАБЛОН    пропустить файлы и каталоги,
                            подпадающие под Ф_ШАБЛОН
      --exclude-from=ФАЙЛ   пропустить файлы, подпадающие под шаблон
                            файлов из ФАЙЛА
      --exclude-dir=ШАБЛОН  каталоги, подпадающие под ШАБЛОН,
                            будут пропущены
  -L, --files-without-match печатать только имена ФАЙЛОВ без выбранных строк
  -l, --files-with-matches  печатать только имена ФАЙЛОВ с выбранными строками
  -c, --count               печатать только количество выбранных
                            строк на ФАЙЛ
  -T, --initial-tab         выравнивать табуляцией (если нужно)
  -Z, --null                печатать байт 0 после имени ФАЙЛА
 
Управление контекстом:
  -B, --before-context=ЧИС  печатать ЧИСЛО строк предшествующего контекста
  -A, --after-context=ЧИС   печатать ЧИСЛО строк последующего контекста
  -C, --context[=ЧИС]       печатать ЧИСЛО строк контекста
  -ЧИСЛО                    то же, что и --context=ЧИСЛО
      --color[=КОГДА],
      --colour[=КОГДА]      использовать маркеры для различия совпадающих
                            строк; КОГДА может быть «always» (всегда),
                            «never» (никогда) или «auto» (автоматически)
  -U, --binary              не удалять символы CR в конце строки
                            (MSDOS/Windows)
 
► Если в качестве ФАЙЛА указан символ «-», то читается стандартный ввод.
► Если ФАЙЛ не указан и задан параметр командной строки -r,
  то читается   текущий каталог «.»  и «-» в противном случае.
  Если указано менее двух ФАЙЛОВ, то предполагается -h.
  
  При нахождении совпадений любой строки, кодом завершения программы будет 0, и 1, если ничего не совпало.
  При возникновении ошибок и если не указан параметр -q, кодом завершения будет 2.

#######################################################
# -d, --directories=ACT  - как обрабатывать каталоги: #
	  ,где ACT - действие
	  ACT==read - читать
	  ACT==recurse - рекурсивно
#	  ACT==skip  - пропускать                         #
#######################################################