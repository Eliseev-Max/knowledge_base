xargs
{ sources:
	1. xargs(1) — Linux manual page:: https://man7.org/linux/man-pages/man1/xargs.1.html
	2. Ubuntu manuals. xargs:: https://manpages.ubuntu.com/manpages/trusty/man1/xargs.1.html
	3. https://losst.pro/komanda-xargs-linux
	4. https://www.opennet.ru/man.shtml?topic=xargs&category=1&russian=5
    __с-примерами__
	5. Команда Xargs для начинающих с примерами:: http://rus-linux.net/MyLDP/consol/Linux_Xargs_Command.html
	6. Xargs: многообразие вариантов использования:: https://habr.com/ru/companies/selectel/articles/248207/
}

С помощью утилиты xargs вывод предыдущей команды можно передать в аргументы следующей.
В мануале по xargs сказано:
	xargs считывает элементы из стандартного ввода, разграниченные пробелами (которые могут быть защищены двойными или одинарными кавычками или обратной косой чертой)
	или новыми строками, и выполняет команду (по умолчанию echo) один или несколько раз с любыми начальными аргументами,
	за которыми следуют элементы, считанные из стандартного ввода.
	Пустые строки на стандартном вводе игнорируются.
	Командная строка для команды наращивается до тех пор, пока не достигнет определенного системой предела (если не используются опции -n и -L).
	Указанная команда будет вызвана столько раз, сколько необходимо для использования списка элементов ввода.
	Как правило, количество вызовов команды будет намного меньше, чем количество элементов во входных данных.
	Обычно это дает значительный выигрыш в производительности.
	Некоторые команды могут выполняться параллельно (см. опцию -P).

► Если миена файлов содержат пробелы и новые строки
  → такие имена файлов неправильно обрабатываются xargs.
  В таких ситуациях лучше использовать опцию -0, которая предотвращает подобные проблемы.
  ‼ При использовании этой опции нужно убедиться, что программа, которая создает входные данные для xargs, 
  также использует НУЛЕВОЙ СИМВОЛ в качестве разделителя.
  * Если такой программой является, например, GNU find, то опция -print0 сделает это за вас.

► Если любой вызов команды завершается со статусом 255
  → xargs немедленно останавливается, не считывая дальнейший ввод. В этом случае на stderr будет выдано сообщение об ошибке.


Синтаксис команды
	$ первая_команда | xargs опции вторая_команда аргументы

Принцип работы команды xargs:
	1. выполняется любая первая команда
	2. весь вывод первой команды по туннелю передается в xargs
	3. вывод разбивается на строки
	4. для каждой строки вызывается вторая команда, а полученная строка передаётся ей в аргументах

Опции команды:
	-0, --null - использовать в качестве разделителя нулевой символ.
		         Обычно он находится в конце строки.
				 По умолчанию, в качестве разделителя используются
				   • пробел,
				   • перевод строки или
				   • табуляция;
				   
    -a, --arg-file - Считывание элементов из файла вместо стандартного ввода.
					 Если использовать эту опцию, stdin остается неизменным, когда команды выполняются.
					 В противном случае stdin перенаправляется из /dev/null.;
	
    -d, --delimiter - Элементы ввода завершаются указанным символом.
					  Указанный разделитель может быть
					    • одним символом,
						• символом в стиле C-style, таким как \n,
						• восьмеричным или шестнадцатеричным кодом.
					  Восьмеричные и шестнадцатеричные управляющие коды понимаются как для команды printf.
					  Многобайтовые символы не поддерживаются.
					  При обработке ввода кавычки и обратная косая черта не являются специальными; каждый символ во вводе воспринимается буквально.
					  Опция -d отключает любую строку конца файла, которая рассматривается как любой другой аргумент.
					  Вы можете использовать эту опцию, когда входные данные состоят просто из элементов, разделенных новыми строками,
					  хотя почти всегда лучше разработать программу так, чтобы использовать --null, когда это возможно.
	
    -E <eof-str>  - Установить конец строки файла в eof-str.
					Если строка конца файла встречается в строке ввода, остальная часть ввода игнорируется.
					Если не используется ни -E, ни -e, строка конца файла не используется.

    -e[eof-str], --eof[=eof-str]  - Эта опция является синонимом опции -E.
								    Вместо нее используйте -E, поскольку она совместима с POSIX, а эта опция - нет.
									Если параметр eof-str опущен, то строка конца файла не используется.
									Если не используется ни -E, ни -e, строка конца файла не используется.

    -L <max-lines>  - использовать не более max-lines непустых строк ввода в командной строке.
					Пробелы в конце строки ввода заставляют логически продолжить строку ввода на следующей строке ввода.
					Подразумевает -x.
	
	-l[max-lines], --max-lines[=max-lines] - Синоним опции -L.
											В отличие от -L, аргумент max-lines является необязательным.
											Если max-lines не указан, по умолчанию он равен единице.
											Опция -l УСТАРЕЛА, поскольку стандарт POSIX вместо нее определяет -L
	
	-s max-chars, --max-chars=max-chars - использовать не более max-chars символов в командной строке,
									      включая команду и начальные аргументы, а также завершающие нули в конце строк аргументов.
										  Наибольшее допустимое значение зависит от системы и рассчитывается как ограничение длины аргументов для exec, минус размер вашей среды, минус 2048 байт запаса.
										Если это значение больше 128КиБ, 128КиБ используется как значение по умолчанию;
										в противном случае значение по умолчанию является максимальным.
										1KiB - это 1024 байта. xargs автоматически адаптируется к более жестким ограничениям.
	
	-x, --exit  - выйти, если превышен размер (см. опцию -s)
	
    -n, --max-args - количество параметров, которые передаются в одну команду (по умолчанию все);
	
    -o, --open-tty - открывать новый терминал для дочерних процессов;
	
    -p, --interactive - спрашивать пользователя о запуске каждой следующей команды;
	
    -r, --no-run-if-empty - если входной поток данных пустой, команда не будет выполнена;
    --show-limits - посмотреть ограничения на длину параметров в командной строке;
	
    -t, --verbose - максимально подробный вывод утилиты.

##########################################
## Примеры использования команды xargs: ##
##########################################

1. Самый простой пример - передать несколько строк, разделенных пробелами, с помощью канала в xargs 
   и запустить команду, которая будет использовать эти строки в качестве аргументов:
   
	  $ echo "file1 file2 file3" | xargs touch
	  # то же самое, что и $ touch file1 file2 file3

2. Перед выполнением вывести команду в терминал:

	  $ echo  "file1 file2 file3" | xargs -t touch
	  > touch file1 file2 file3

3. Запрос подтверждения выполнения команды (параметр -p (--interactive))

	  $ echo  "file1 file2 file3" | xargs -p touch
	  > $ touch file1 file2 file3 ?...					# ввести y или Y

4. Ограничим количество аргументов [-n]
   # По умолчанию количество аргументов, передаваемых команде, определяется системным лимитом.
   # Опция -n (--max-args) указывает количество аргументов, передаваемых данной команде.
   # Xargs будет запускать указанную команду столько раз, сколько необходимо, пока не будут исчерпаны все аргументы.
   
	   $ $ echo  "file1 file2 file3" |  xargs -n 1 -t touch
	   > touch file1
	   > touch file2
	   > touch file3
	
5. 