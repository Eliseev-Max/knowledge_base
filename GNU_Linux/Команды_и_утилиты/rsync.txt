Rsync

[sources:]
  "rsync(1) - Linux man page": https://linux.die.net/man/1/rsync,
  "Установка, настройка и примеры синхронизации Rsync": https://selectel.ru/blog/rsync-guide/,
  "Примеры синхронизации Rsync": https://losst.pro/rsync-primery-sinhronizatsii
  "rsync command in Linux with Examples": https://www.geeksforgeeks.org/rsync-command-in-linux-with-examples/
  "wiki.opennet.ru - Rsync": http://wiki.opennet.ru/Rsync
  "Создание бэкапа удалённого сервера при помощи Rsync": https://jino.ru/spravka/articles/rsync2.html#nastroyka-servera-klienta

"""
lq == left quote == "
rq == right quote == "
"""

rsync - быстрый, универсальный, удаленный (и локальный) инструмент для копирования файлов.

Обзор синтаксиса возможных команд

#Local:
rsync [OPTION...] SRC... [DEST]

# Access via remote shell (Доступ через удаленную оболочку):
## Pull ([remote host] -> [my_host]):
rsync [OPTION...] [USER@]HOST:SRC... [DEST]

## Push ([my_host] -> [remote host]):
rsync [OPTION...] SRC... [USER@]HOST:DEST
  
# Access via rsync daemon (Доступ через демон rsync):
##  Pull:
rsync [OPTION...] [USER@]HOST::SRC... [DEST]
rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]

##  Push:
rsync [OPTION...] SRC... [USER@]HOST::DEST
rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST

(*) При использовании только с одним аргументом SRC и без аргумента DEST:
    вместо копирования исходных файлов будет выводиться список исходных файлов.

[!] Если на конце директории SRC есть '/' (SRC/),         => копируется содержимое директории (DEST/<содержимое SRC>)
    Если на конце директории SRC отсутствует '/' (SRC)    => копируется сама директория SRC (DEST/SRC)


************
* ОПИСАНИЕ *
************

  Rsync - это быстрый и необычайно универсальный инструмент для копирования файлов.
  Он может копировать
    ✓ локально,
    ✓ на/из другого хоста через любую удаленную оболочку
    ✓ или на/из удаленного демона rsync.

  Он предлагает большое количество опций, которые контролируют каждый аспект его поведения
  (!) и позволяют очень гибко определять набор файлов для копирования.

[!]  Он известен своим алгоритмом дельта-передачи.

--< Суть алгоритма дельта-передачи: >--
  отправляются ТОЛЬКО РАЗЛИЧИЯ между исходными файлами и существующими файлами в месте назначения.
  => уменьшение объема данных, передаваемых по сети.


Rsync широко используется для
  ✓ резервного копирования и зеркалирования,
  ✓ как улучшенная команда копирования для повседневного использования.


Rsync находит файлы, которые необходимо передать, используя алгоритм "quick check" (по умолчанию),
который ищет файлы, изменившиеся по размеру или по времени последнего изменения.
Любые изменения в других сохраненных атрибутах (в соответствии с запросами опций) производятся непосредственно в файле назначения,
когда быстрая проверка показывает, что данные файла не нуждаются в обновлении.


Некоторые из дополнительных возможностей rsync:
  ✓ поддержка копирования ссылок, устройств, владельцев, групп и разрешений 
  ✓ опции exclude и exclude-from, аналогичные GNU tar 
  ✓ режим исключения CVS для игнорирования тех же файлов, которые игнорирует CVS 
  ✓ может использовать любую прозрачную удаленную оболочку, включая ssh или rsh 
  ✓ не требует привилегий суперпользователя 
  ✓ конвейеризация передачи файлов для минимизации затрат на задержку 
  ✓ поддержка анонимных или аутентифицированных демонов rsync (идеально подходит для зеркалирования)
  

******************
* ОБЩИЕ СВЕДЕНИЯ *
******************

Rsync копирует файлы либо на или с удаленного хоста, либо локально на текущем хосте

[‼] НЕ ПОДДЕРЖИВАЕТ копирование файлов между двумя удаленными хостами.

Существует два различных способа связи rsync с удаленной системой:
  1. использование программы remote-shell в качестве транспорта (например, ssh или rsh)
	   = используется, когда путь к источнику или получателю содержит одно двоеточие (:) после спецификации хоста
	  
  2. прямой контакт с демоном rsync через TCP.
	   = происходит, когда путь source или destination содержит двойное двоеточие (::) после спецификации хоста,
	     <ИЛИ>
         когда указан URL rsync:// 
#‼ (см. также раздел "USING RSYNC-DAEMON FEATURES VIA A REMOTE-SHELL CONNECTION" для исключения из последнего правила).


(*) В качестве особого случая, если указан один исходный аргумент (source) без destination,
    файлы перечисляются в выходном формате, аналогичном "ls -l"


ОЖИДАЕМО: если ни в исходном, ни в конечном пути не указан удаленный хост, копирование происходит локально 

#! (см. также опцию --list-only).


Обозначение сторон передачи данных в Rsync:
  локальная сторона (local side) == client
  удаленная сторона (remote side) == server


[!] НЕ ПУТАЙТЕ "server" с демоном rsync!
    демон всегда является сервером,
    а сервер может быть как демоном, так и порожденным процессом remote-shell.


*********
* ОПЦИИ *
*********

  -a, --archive
    = режим архивации;
      == эквивалентно -rlptgoD (нет -H,-A,-X)
      == быстрый способ сказать, что
        + вам нужна рекурсия
        + и вы хотите сохранить почти все
{
  рекурсивное копирование файлов,
  сохранение практически всего
    (например,
      ✓ символических ссылок,
      ✓ прав доступа к файлам,
      ✓ прав собственности пользователей и групп
      ✓ временных меток
    )
}
    (при этом -H (= сохранять жесткие ссылки =) является заметным упущением).

      Единственным ИСКЛЮЧЕНИЕМ из приведенной выше эквивалентности является указание --files-from,
        в этом случае -r НЕ ПОДРАЗУМЕВАЕТСЯ.

[!] Обратите внимание, что -a НЕ СОХРАНЯЕТ ЖЕСТКИЕ ССЫЛКИ,
    поскольку поиск многократно связанных файлов требует больших затрат.
    Вы должны ОТДЕЛЬНО указать -H (|| --hard-links).

  -z, --compress   = сжимать данные файла во время передачи

  -r, --recursive  = recurse into directories

  -R, --relative   = использовать относительные имена путей

  -o, --owner      = preserve owner (super-user only)

  -g, --group      = сохранять группы
      --devices    = сохранять файлы устройств (devices) (super-user only)
      --specials   = сохранять special files

  -D               = same as --devices --specials

  -t, --times      = preserve modification times

  -m, --prune-empty-dirs = prune empty directory chains from file-list
## подробнее: ↓

  -A, --acls
    = сохранять ACL (подразумевает -p)
      Эта опция заставляет rsync обновлять ACL адресата так, чтобы они совпадали с ACL источника.
      Опция также подразумевает --perms.
      Для правильной работы этой опции source и destination (целевая) системы должны иметь совместимые записи ACL.
      Способ резервного копирования и восстановления несовместимых ACL см. в опции --fake-super.

  -p, --perms
    = preserve permissions
      эта опция заставляет принимающий rsync устанавливать разрешения назначения (destination permissions) такими же,
      как разрешения источника (source permissions).
      (См. также опцию --chmod для изменения того, что rsync считает разрешениями источника).
    <!> (*1) Подробнее </!>

  -h, --human-readable
    = вывод чисел в человекочитаемом формате

  -P  (== --partial --progress)
    = Параметр -P эквивалентен параметам "--partial --progress".
      Его цель - значительно упростить указание этих двух параметров для длительной передачи, которая может быть прервана.

  --partial
    = сохранять частично переданные файлы
      По умолчанию rsync удалит любой частично переданный файл, если передача будет прервана.
      В некоторых случаях более желательно сохранить частично переданные файлы.
      Использование параметра --partial указывает rsync сохранить частичный файл,
      => что должно значительно ускорить последующую передачу остальной части файла.

  --progress
    = show progress during transfer

  -v, --verbose
    = увеличить многословность (количество предоставляемой во время передачи информации)
      По умолчанию rsync работает silently.
      При использовании одного параметра -v
        -> вы получите информацию о том, какие файлы передаются, и краткое резюме в конце.
      Два параметра -v
        -> дадут вам информацию о том, какие файлы пропускаются, и немного больше информации в конце.
      Более двух опций -v следует использовать только при отладке rsync.
## подробнее: ↓

  -X, --xattrs
## == preserve extended attributes
    = сохранять расширенные атрибуты
      Эта опция заставляет rsync обновлять расширенные атрибуты места назначения (destination extended attributes) так,
      чтобы они совпадали с атрибутами источника (source).

/*
## Чтобы иметь возможность создавать резервные копии и восстанавливать не пользовательские пространства имен от имени обычного пользователя,
## см. параметр --fake-super.
*/
## подробнее: ↓


  --exclude=PATTERN
    = исключить файлы, соответствующие PATTERN
/*
# ЗАМЕЧАНИЕ:
  Если требуется исключить некоторые директории
    // как в случае с копированием /var/jenkins_home мы исключаем тяжеловесные $JENKINS_HOME/jobs и $JENKINS_HOME/workspace
  достаточно просто указать в качестве значения опции --exclude название директории,

# Например:
```
$ rsync -aAvz --exclude 'workspace' --exclude 'jobs' /jenkins username@<remote-host>:/path/to/target/dir/
```

#[!] В таком случае содержимое директории /jenkins скопируется за исключением директорий '/jenkins/jobs' и '/jenkins/workspace'
#    в директорию '/path/to/target/dir/jenkins' на удалённом сервере


#[*1] подробнее об опции --perms

  Когда эта опция ВЫКЛЮЧЕНА, разрешения устанавливаются следующим образом:
    * существующие файлы (включая обновленные) сохраняют свои разрешения,
      хотя опция --executability может изменить только разрешение на выполнение файла.

    * для новых файлов биты разрешения "normal" устанавливаются в разрешения исходного файла,
      маскируемые разрешениями по умолчанию принимающего каталога
      (либо umask принимающего процесса, либо разрешения, указанные в ACL по умолчанию принимающего каталога),
      а их специальные биты разрешений отключены, за исключением случаев, когда новый каталог наследует бит setgid от своего родительского каталога.

  Таким образом, если отключены --perms и --executability,
  => поведение rsync аналогично поведению других утилит копирования файлов, таких как cp(1) и tar(1).

Итак, чтобы назначить конечным файлам (как старым, так и новым) исходные разрешения, используйте --perms.
Чтобы назначить новым файлам разрешения по умолчанию (оставив при этом существующие файлы неизменными), убедитесь, что опция --perms ВЫКЛЮЧЕНА,
и используйте --chmod=ugo=rwX
  ( = это гарантирует, что все немаскируемые биты будут включены).

Если вы хотите сделать это поведение более простым, вы можете определить для него псевдоним popt,
например, поместить эту строку в файл ~/.popt
(ниже определяется опция -Z и включается --no-g для использования группы по умолчанию в каталоге назначения):
-->
rsync alias -Z --no-p --no-g --chmod=ugo=rwX
<--

Затем вы можете использовать эту новую опцию в команде, подобной этой:
-->
rsync -avZ src/ dest/
<--

(Оговорка: убедитесь, что за -a не следует -Z, иначе это снова включит две вышеупомянутые опции --no-*).

## В rsync 2.6.7 добавлено сохранение бита setgid получателя для вновь созданных каталогов при выключенной опции --perms.
## Более ранние версии rsync ошибочно сохраняли три бита специальных разрешений для вновь созданных файлов при выключенном --perms,
## при этом переопределяя настройки бита setgid получателя для вновь созданного каталога.

## В патч ACL для rsync 2.6.7 было добавлено соблюдение ACL по умолчанию, поэтому старые (или не поддерживающие ACL) rsyncs используют umask,
## даже если ACL по умолчанию присутствуют.
[!] (Имейте в виду, что на это поведение влияет версия принимающего rsync).


  --acls, -A
    = Эта опция заставляет rsync обновлять ACL назначения так, чтобы они совпадали с ACL источника.
      Эта опция также подразумевает --perms.

      Для правильной работы этой опции исходная и целевая системы должны иметь совместимые записи ACL.
      # Способ резервного копирования и восстановления несовместимых ACL см. в опции --fake-super.


****************
* --xattrs, -X *
****************

Для систем, поддерживающих пространства имен с расширенными атрибутами,
  -> копирование, выполняемое суперпользователем, копирует все пространства имен, КРОМЕ system.*.
  -> Обычный пользователь копирует только пространство имен user.*.

Вышеуказанную фильтрацию имен можно отменить, используя один или несколько параметров фильтра с модификатором `x`.

Когда вы указываете правило фильтрации, влияющее на xattr, rsync требует, чтобы вы выполнили собственную фильтрацию системы/пользователя,
а также любую дополнительную фильтрацию того, какие имена xattr копируются и какие имена разрешено удалять.

Например, чтобы пропустить (skip) системное пространство имен (system namespace), можно указать:

```
  --filter='-x system.*'
```

Чтобы пропустить (skip) все пространства имен, кроме пространства имен пользователя,
можно указать соответствие negated-user:

```
  --filter='-x! user.*'
```

Чтобы предотвратить удаление любых атрибутов, можно задать правило «только для получателей», исключающее все имена:

```
  --filter='-xr *'
```

Обратите внимание, что опция -X !НЕ КОПИРУЕТ! специальные xattr-значения rsync
#(например, используемые опцией --fake-super),
  если вы НЕ ПОВТОРИТЕ ОПЦИЮ (например, -XX).
  Этот режим «копирования всех xattr» НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ с `--fake-super`


*****************
* --verbose, -v *
*****************

Этот параметр увеличивает количество информации, предоставляемой во время передачи.
По умолчанию rsync работает silently.

[Одиночная опция -v (-v)]
  -> даст вам информацию о том, какие файлы передаются, и краткое резюме в конце.

[Два параметра -v (-vv)]
  -> дадут вам информацию о том, какие файлы пропускаются, и немного больше информации в конце.

[Более двух опций -v (-vvv ...)]
  -> следует использовать только при отладке rsync.

В сводке по завершению выполнения указаны:
  - количество байт, отправленных на удаленный rsync (который является принимающей стороной локальной копии),
  - количество байт, полученных от удаленного хоста,
  - и среднее количество байт в секунду передаваемых данных, вычисленное за весь период выполнения rsync.

The end-of-run summary tells you
  - the number of bytes sent to the remote rsync (which is the receiving side on a local copy),
  - the number of bytes received from the remote host,
  - and the average bytes per second of the transferred data computed over the entire length of the rsync run.

Во второй строке показан общий размер (в байтах), который представляет собой сумму всех размеров файлов, которые rsync рассматривал для передачи.
(+) Он также показывает значение "ускорения", которое представляет собой отношение общего размера файла к сумме отправленных и полученных байт
    (что на самом деле является просто приятным для восприятия числом "чем больше, тем лучше").

[!] Обратите внимание, что эти байтовые значения можно сделать более (или менее) удобочитаемыми для человека,
    используя опции --human-readable (или --no-human-readable).

В современном rsync параметр -v эквивалентен настройке групп параметров --info и --debug.
  Вы можете использовать эти новые опции в дополнение к --verbose или вместо него,
  поскольку любые детализированные настройки переопределяют подразумеваемые настройки -v.

  И в --info, и в --debug есть способ обратиться за помощью, который точно сообщает вам,
  какие флаги установлены для каждого увеличения детализации.

(!) Однако имейте в виду, что настройка демона "max verbosity" ("максимальная детализация") ограничивает уровень,
    на который могут быть установлены различные индивидуальные флаги на стороне демона.

[Например:]
  если максимальное значение равно 2,
  то любая информация и/или флаг отладки, для которых установлено более высокое значение, чем то, которое было бы установлено с помощью -vv,
  будет понижено до уровня -vv в журнале демона.


******
* -P *
******

  Существует также опция --info=progress2, которая выводит статистику на основе всей передачи, а не отдельных файлов.
  Используйте этот флаг без ввода имени файла (например, избегайте -v или укажите --info=name0),
  если вы хотите увидеть, как происходит передача, не прокручивая экран с большим количеством имен.

[!] (Вам НЕ НУЖНО указывать параметр --progress, чтобы использовать --info=progress2.)

  Наконец, вы можете получить мгновенный отчет о ходе выполнения, отправив rsync сигнал SIGINFO или SIGVTALRM.

[В системах BSD:]
    SIGINFO генерируется нажатием клавиш Ctrl+T

[В Linux:]
    в настоящее время не поддерживает сигнал SIGINFO.

  Когда клиентский процесс получает один из этих сигналов, он устанавливает флаг для вывода единственного отчета о ходе выполнения,
  который выводится по завершении текущей передачи файла
  (так что это может занять некоторое время, если при поступлении сигнала обрабатывается большой файл).

  Имя файла выводится (при необходимости), следуя формату --info=progress2 информации о процессе (ходе выполнения).

  Если вы не знаете, какой из 3 процессов rsync является клиентским процессом,
  можно подать сигнал на все из них (поскольку неклиентские процессы игнорируют сигнал).

[!] ВНИМАНИЕ: отправка SIGVTALRM на более старую rsync (до версии 3.2.0) приведет к ее отключению.


**************************
* -m, --prune-empty-dirs *
**************************

Этот параметр указывает принимающему rsync удалить пустые каталоги из списка файлов,
  + включая вложенные каталоги, у которых нет дочерних каталогов, отличных от каталогов.

Это полезно для предотвращения создания кучи бесполезных каталогов, когда отправляющий rsync-код рекурсивно сканирует иерархию файлов,
используя правила включения/исключения/фильтрации (include/exclude/filter).

[!] Обратите внимание, что использование правил переноса (transfer rules), таких как параметр --min-size,
    НЕ ВЛИЯЕТ на то, что попадает в список файлов, => не оставляет каталоги пустыми, даже если ни один из файлов в каталоге не соответствует правилу переноса.

Поскольку список файлов фактически сокращается, этот параметр также влияет на то, какие каталоги удаляются при активном удалении.

(!) Однако имейте в виду, что исключенные файлы и каталоги могут предотвратить удаление существующих элементов из-за того,
    что исключение скрывает исходные файлы и защищает целевые файлы.

#>> Как этого избежать, смотрите в разделе "Правило фильтрации по скоропортящимся файлам (perishable filter-rule)".

Вы можете предотвратить удаление определенных пустых каталогов из списка файлов, используя глобальный фильтр "protect".
Например, этот параметр гарантирует, что каталог "emptydir" будет сохранен в списке файлов:
```
--filter 'protect emptydir/'
```

Вот пример, который
  + копирует все файлы .pdf в иерархическом порядке,
    создавая только необходимые каталоги назначения для хранения файлов .pdf,

  + и гарантирует, что все лишние файлы и каталоги в месте назначения (DEST) будут УДАЛЕНЫ

#(!) обратите внимание, что вместо фильтра исключения используется фильтр скрытия не каталогов:

```
rsync -avm --del --include='*.pdf' -f 'hide,! */' src/ dest
```

Если вы НЕ ХОТИТЕ УДАЛЯТЬ лишние целевые файлы,
  -> более проверенные временем опции  "--include='*/' --exclude='*'" будут отлично работать вместо скрытого фильтра
     (если это для вас более естественно).


###########
# ПРИМЕРЫ #
###########

1) Если указан только путь к источнику, его содержимое будет перечислено в формате, аналогичном `ls -l`
  # ls -l == use a long listing format

```
rsync foo/ 
```
# Приведенная выше команда выведет список файлов и каталогов, присутствующих в каталоге foo.

2) Копирование/синхронизация файлов и каталогов локально
  # Если ни в пути источника, ни в пути назначения не указан удаленный хост,
  # команды rsync ведут себя как команды копирования.

```
rsync -avh foo/ bar/ 
```
# Приведенная выше команда скопирует/синхронизирует все файлы и каталоги, находящиеся в каталоге foo, в каталог bar.
# Если каталог назначения отсутствует (здесь bar), rsync автоматически создаст его и скопирует в него все данные.

3) Rsync с использованием ssh

Существует два различных способа связи rsync с удаленной системой:
  1. Использование программы remote-shell в качестве транспорта (например, ssh (Secure Shell) или rsh (Remote Shell)).
  2. Обращение к демону rsync напрямую через TCP.

# Здесь мы будем обсуждать rsync через ssh.

```
rsync -avhze ssh /foo user@remote-host:/tmp/
```
# Чтобы указать тип используемого протокола, используется опция -e.

4) Rsync с определенными правами доступа к файлам
  # Если мы хотим синхронизировать файлы на локальном или удаленном хосте с правами доступа (permissions) к изменяемым файлам.
  # Необходимо использовать следующую команду.

```
rsync -avhe ssh --chown=USER:GROUP /foo user@remote-host:/tmp/
```
# ↑ синхронизирует все файлы, находящиеся в каталоге /foo, с файлами, находящимися в каталоге /tmp на удаленном хосте,
# причем все файлы будут принадлежать USER с группой GROUP.
# [!] Примечание: Пользователь user и группа group должны быть уже созданы на удаленном хосте.


5) Rsync with --ignore-existing-files
  # Мы также можем пропустить уже существующие файлы в destination.
  # Обычно это можно использовать при выполнении резервного копирования с помощью параметра -link-dest,
  # продолжая прерванное резервное копирование.

```
rsync --ignore-existing -avhe /foo user@remote-host:/tmp/
```
  # Таким образом, все файлы, которые не существуют в месте назначения, будут скопированы.
  # [!] При этом НЕ ИГНОРИРУЮТСЯ существующие каталоги, иначе ничего не будет сделано.
  # Даже если в файле на локальном хосте произошли изменения,
  # !!! он все равно НЕ БУДЕТ синхронизирован, если он присутствует на удаленном хосте.

...
6)-> Show progress during transfer
```
rsync -avhe ssh --progress /foo user@remote-host:/tmp/
```
...


7) Автоматическое удаление файлов с локального хоста после успешной передачи

```
rsync -avhe ssh --remove-source-files /foo user@backup-server:/tmp
```

8) Выполнение Dry run с помощью `rsync`

  # Dry run заставляет `rsync` выполнить пробный запуск, который
  # -> не вносит никаких изменений
  # -> и выводит почти те же результаты, что и при реальном запуске.

  #(!) Обычно используется вместе с опциями -v, --verbose и/или -i, -itemize-changes,
  #    чтобы увидеть, что будет делать команда `rsync`, прежде чем выполнять ее на самом деле.

```
rsync -avhe ssh --dry-run --chown=USER:GROUP /foo user@remote-host:/
```


Examples:

1. Типовой пример создания бэкапа с указанием даты создания и сохранением OUTPUT-лога в файл:

```
rsync -azvh <b_user>@<ip_сосисочной>:/home/jarservice/sausage-store.jar <b_user>@<ip_бэкапочной>:/mnt/sausage_backup/$(date +"%m-%d-%Y")/ > /var/log/sausage-store.log
```

2. Бэкап с исключением системных директорий:
   # rsync -aAXv --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /папка/назначения

```
rsync -aAXv --exclude={"/dev/*","/proc/*","/sys/*","/var/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / /mnt/backups
```

3. Резервное копирование $JENKINS_HOME:

```
# local backuping
rsync -avh --exclude 'workspace' --exclude 'jobs' $JENKINS_HOME /path/to/the/bind-mount-dir

# remote backuping
rsync -avzhP --exclude 'workspace' --exclude 'jobs' $JENKINS_HOME user@remote-server:/target/path
```