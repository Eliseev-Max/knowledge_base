BASH-скрипты бегло

bash-скрипт - набор команд программной оболочки (shell), объединённых в файл с целью автоматизации некоторых операций, производимых в консоли.
Команды объединяет некая общая цель, общий замысел.

Командная строка (командный интерпретатор) позволяет выполнить несколько команд за один раз, введя их через точку с запятой.
Максимальное количество аргументов, которое можно передать программе, ограниченно. Определить это ограничение можно с помощью такой команды:
  $ getconf ARG_MAX

Первая строка bash-скрипта:
#!/bin/bash        ## последовательность символов #! - это шебанг

#:Когда скрипт с шебангом выполняется как программа в Unix-подобных операционных системах,
загрузчик программ рассматривает остаток строки после шебанга как имя файла программы-интерпретатора.
Загрузчик запускает эту программу и передаёт ей в качестве параметра имя файла скрипта с шебангом.

В других строках этого файла символ # используется для обозначения комментариев, которые оболочка не обрабатывает.

И в командной строке, и в bash-скрипте можно записывать команды в одной строке, разделяя точкой с запятой.
Однако, если писать команды на разных строках, файл легче читать.

Если не настроить режим запуска для нового файла bash-скрипта (не сделать файл исполняемым),
получим ошибку вместо запуска: Permission denied!

Сделать файл исполняемым:
  $ chmod +x ./myscript

# Запуск файла на исполненение:
  $ ./myscript

Специальная переменная окружения IFS (Internal Field Separator):
  - позволяет указывать разделители полей.
  По умолчанию оболочка bash считает разделителями полей следующие символы:
    * пробел
    * знак табуляции
    * знак перевода строки

Если bash встречает в данных любой из этих символов, он считает, что перед ним следующее самостоятельное значение списка.
Настройка поведения:
  • IFS=$'\n'

Пример:
#!/bin/bash
file="/etc/passwd"
IFS=$'\n'
for var in $(cat $file)
do
echo " $var"
done

У bash-скриптов есть возможность:
  * извлекать информацию из вывода команд и назначать её переменным,
  что позволяет использовать эту информацию где угодно в файле сценария.

Сделать это можно двумя способами.
  1. с помощью значка обратного апострофа «`» 
    $ MYDIR=`pwd`               # устарело
  2. с помощью конструкции $() 
    $ MYDIR=$(pwd)              # предпочтительно!




#### Продолжить усвоение:
https://habr.com/ru/companies/ruvds/articles/325522/

#### Изучить циклы:
https://habr.com/ru/companies/ruvds/articles/325928/


