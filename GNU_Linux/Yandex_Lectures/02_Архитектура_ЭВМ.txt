Лекция № 2  "Архитектура ЭВМ"

План лекции:
	► История компьютеров
	► Устройство ЭВМ
	► Процессор x86
	► Защищённый режим
	
[00:10:53]  Каким был первый компьютер
	
	Можно считать машину Беббиджа (была сначала спроектирована, а сконструирована позже)
	Машина Тьюринга. Тьюринг-полный компьютер.
	Первенство в построении компьютера (работающего) принадлежит немцам.
	Сконструировали релейный компьютер.

[00:19:18]  Архитектура Фон-Неймана
	
		╔   				   ╗
		║        ПАМЯТЬ        ║
		╚   				   ╝
	      ↑↓              ↑↓
	║ Устройство  ║ → ║  АЛУ  ║
	║ управления  ║ ← ║       ║
						↑  ↓
					[ввод] [вывод]
	
	Чем отличается архитектура Фон-Неймана от других (например, от Гарвардской)
		► Память для данных и для команд одна и та же.
		Это может создавать проблемы для безопасности.
	
[00:21:00]  Какими бывают современные компьютеры

	Процессорные архитектуры. Классификация:
	
		RISC (Redused Instruction Set Computer)
			- MIPS - игровые консоли, маршрутизаторы
			- ARM - планшеты, телефоны, плееры,...
			- Power - серверы, игровые консоли, SAN
			- SPARC - серверы
		CISC (Complex Instruction Set Computer)
			- Pentium
		
		CRISC
			- PentiumPro+
		
		VLIW
			- Itanium2
	
	Преимущества RISC:
	+ можно увеличить скорость обработки, можно быстро наращивать тактовую частоту
	  (абсурдная реализация - процессоры, которые "не умеют" умножать)
	
	В CISC тактовая частота наращивается сложнее.
	Современные процессоры Intel не CISC. В них содержатся RISC-процессоры и есть микропрограмма,
	которая занимается декодированием сложных инструкций и разложением их на несколько простых.
	Ядрам отдаются команды на обработку полученных простых инструкций.
	+ = возможность обновления микропрограммы и устранения ошибок процессора.
	
	Проблема процессоров Pentium (90-е годы): F00F bug (ошибка F00F)
	Пользовательская программа без привелегий, начинавшаяся с двух байтов F0 0F полностью ОСТАНАВЛИВАЛА процессор.
	
	Процессоры Transmeta ( → Intel)
	  Идея процессоров: в них так же присутствует микропрограмма, но внутрь процессора засунули целый Linux.
	  Зачем? → Регулировать тепловыделение за счёт плавного замедления процессора, когда он несильно нагружен.
	  Технология Intel Speed Step (плавное изменение частоты процессора).
	  До этого у процессоров Intel было всего 2 частоты: высокая и низкая.
	
	64-разрядные инструкции - это разработка AMD.
	
[00:29:17]  Распространённые архитектуры процессоров
	
	x86  -  процессоры линейки 8086 (80286, 386,...)
		начиная с 80386 - 32-разрядные
		Проблема 32-разрядного набора инструкций: возможность оперировать только 4 Гб памяти.
	  ► AMD64
	  ► EMT64 (Extended Memory Technology)
	x86_64, x86_32
	    В чём проблема x86_64:
		  Если на ПК доступно 3 Гб памяти (RAM), и мы устанавливаем x64 ОС,
		  то мы ничего не выигрываем. ОС и процессы быстрее расходуют память в x64 OS.
		  Например, на один вызов подпрограммы сразу же выделяется 64 байта в стэк, независимо от количества аргументов.
		  Каждое число и каждый указатель = 64 бита (не 32), поэтому памяти расходуется в 2 раза больше (быстрее).

	[RISC]:	преимущество = низкое энергопотребление, низкое тепловыделение.
	  Целевое направление - мобильные устройства.
	  ARM:    мобильные телефоны.
	  MIPS:   маршрутизаторы
	...

[00:34:00]  Что у компьютера внутри?
	
	Разделение на Северный и Южный мосты, как следствие разной пропускной способности.
	В Северный мост выносили контроллер памяти, а с контроллером памяти нужно работать как можно быстрее.
	PCI-e вытеснил AGP

[00:39:20]  Что происходит после включения кx86-x64 компьютера?
	
	Он начинает тестировать устройства.
	- Кто опрашивает устройства?
	Микросхема памяти (постоянной, перепрограммируемой). Существует соглашение (например, Intel),
	по какому адресу передавать управление после включения компьютера.
	.S - файл ассемблера
	.c - файл с исходным кодом на языке C
	.C - файл с исходным кодом на языке C++
	
	Process state codes:
		D  -  uninterruptible sleep (usually IO)										# непрерываемый сон
		R  -  running or runnable (on run queue)										# 
		S  -  interruptible sleep (waiting for an event to complete)					# прерываемый сон
		T  -  stopped, either by a job control signal or because it is being traced
		W  -  paging (not valid since the 2.6.xx kernel)								# пейджинг
		X  -  dead (should never be seen)
		Z  -  defunct ("zombie") process, terminated but not reaped by its parent
		
[00:44:00]  Сборка ядра. Файлы с исходными кодами ассемблера и C/C++
			   Сборка с помощью make. В помощь нам файл README (иногда бывает файл с именем INSTALL)
			   Если запустить make без параметров, то утилита
			   ► пробегается компилятором в соответствии с правилами, заключенными в утилиту,
			   ► собирает из каждого файла с исходными текстами объектный (промежуточный) файл
			   ► использует программу-линкер (ld (loader)) для того, чтобы получить окончательный файл ядра
			.asm → .sym (.sym, символьный файл, формируется для отладчика)

[00:48:20] Параметры qemu (make qemu-gdb)
	
	qemu-gdb    состоит в следующем:
		• собрать образ файловой системы (fs.img);
		• собрать образ ядра, с которого будет выполняться загрузка (например, xv6.img);
		• запустить отладчик (gdb)
		• запустить QEMU (эмулятор компьютера)
	
	Ctrl + Z - 
	Ctrl + C - прерывание (останов) выполняемого процесса
	
	stty -a = set teletype (установить телетайп).
	
	Две команды: bg (=background) и fg (front ground)
	bg [%номер_задачи] - работать в фоновом режиме (не захватывая терминал)
	например, $bg %1 - продолжить выполнение задачи 1 (с кодом выполнения T) в фоновом режиме
	fg - работать в главном терминале.
	Команда jobs показывает, какие задачи из этой оболочки были запущены
	
	Вывод команды: info registers [all] (вывод информации о регистрах общего назначения процессора x86)
	eax		0x0		0			(extended accumulator) расширенный (32-разрядный) регистр-аккумулятор, куда заносятся вычисления
	ecx		0x0		0			counter = счётчик
	edx		0x633	1587		data = данные для вычисления
	ebx		0x0		0			база для смещения при адресации внутри, например, массива
	esp		0x0		0x0			stack pointer, указатель на вершину стека
	ebp		0x0		0x0			базовый адрес стека
	esi		0x0		0			extended source index			для операций, обрабатывающих цепочки данных
	edi		0x0		0			extended destination index		для операций, обрабатывающих цепочки данных
	eip		0xe05b	0			extended instruction pointer	указатель инструкций
	eflags	0x2		[]			указывает, чем завершилась предыдущая операция
	# сегменты/селекторы, отвечающие за ссылку на опред.сегмент
	cs		0xf000	61440		code
	ss							stack
	ds							data
	es
	fs
	gs
	(gdb)
	
	Стек определяется двумя указателями: esp и ebp.
	
	* вектор прерывания
	
	BIOS - это программа, которая располагается по заданному адресу.
	CMOS = КМОП (Комплиментарный металл-оксидный проводник)
	У CMOS своя отдельная шина (отдельно от шины RAM, BIOS, Video, IDE)
	Это шина ISA - шина ввода-вывода устройств; она не расходует адресного пространства (по сути CMOS эмулируется).
	BIOS взаимодействует с CMOS через порты (80, 81 - INPUT, OUTPUT). Можно считывать и записывать.
	Сколько ячеек в CMOS: 64 байта
	Именно в этих 64 байтах содержится указатель на устройство, с которого будет производиться загрузка ПУ.
	
	Ctrl+S = STOP = Scroll Lock (в UNIX и в Windows)
	в Windows Scroll Lock не работает.
	
[01:26:03]  POST: Power On Self Test

	1. Что в памяти?
	2. Как BIOS получает управление?
	3. Как BIOS передаёт управление?
	
	BIOS проецируется на определённые 64 кбайта
	В оперативной памяти (энергозависимой) нули. НО если выключить компьютер и тут же включить, то
	в RAM не нули, а предыдущая запись.
	ТЕХНИЧЕСКИ каждый бит RAM - это микроскопический конденсатор, который теряет заряд.
	Периодически нужно считывать данные из RAM и перезаписать, чтобы перезарядить конденсаторы.
	(если планку памяти быстро выдернуть и поместить в жидкий азот, то она будет долго хранить своё содержимое).
	
	Шина FireWire. Устройство, подключенное к этой шине, может до загрузки ОС отдать команду на прямой доступ к памяти
	и может прочитать содержимое памяти.
	Поэтому FireWire и Thunderbolt - это проблема с точки зрения безопасности информации.
	
	Современные BIOS
		- EFI32		(Extended Firmware Interface)
		- EFI64
		- UEFI
	
	BIOS (современный) может иметь файловую систему.
	UEFI может содержать не только FS, но и приложения, встроенный интерпретатор команд, встроенный загрузчик.
	В таком случае, где хранятся настройки и данные UEFI?
		Микросхема NVRAM (память). В ней хранятся переменные (в частности переменная может хранить указатель на загрузчик)

	
	F0000 - FFFFF		System BIOS
	E0000 - EFFFF		Extended BIOS
	D0000 - DFFFF		Option ROMS	(на платах)
	C0000 - CFFFF		Video BIOS
	A0000 - BFFFF		Video Memory Addresses (экранный буфер)
	_____________
	[Low memory]
	[640 кбайт ]
	
	Первое, что делает ОС, когда загрузчик загрузит ядро:
		► переключается в защищённый режим.

[01:34:53]  Загрузчик жёсткого диска (MBR = Master Boot Record)
	
	Располагается в нулевом секторе.
	В начале сектора лежит загрузчик (Bootloader); занимает не более, чем 446 байтов.
	В конце сектора лежит таблица разделов (Primary), где помещается не более 4 строчек,
	разделяющий диск на логические разделы.
	В такой конфигурации диск может быть не более 2 ТБ.
	
	Для дисков более 2 ТБ используют GPT-таблицу разделов.
	
	