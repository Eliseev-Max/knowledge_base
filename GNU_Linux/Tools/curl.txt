curl
{https://curl.se/docs/manpage.html}
  - это инструмент для передачи данных с сервера или на сервер, используя один из поддерживаемых протоколов.
  - Это набор библиотек, в которых реализуются базовые возможности работы с URL страницами и передачи файлов.
Поддерживаемые протоколы:
	♦ HTTP,
	♦ HTTPS,
	♦ FTP,
	♦ FTPS,
	♦ SCP,
	♦ SFTP,
	♦ TFTP,
	♦ DICT,
	♦ TELNET,
	♦ LDAP
	♦ FILE
	
полезные возможности, предоставляемые curl: 
	• поддержка прокси,
	• аутентификация пользователя,
	• загрузка на FTP,
	• отправка HTTP,
	• SSL-соединения,
	• cookies,
	• возобновление передачи файлов  и пр.

Часто используемые опции:
	-f - не выводить сообщения об ошибках сервера
	-s - бесшумный или тихий режим. Не показывает счетчик прогресса или сообщения об ошибках.
	-S - выводить сообщения об ошибках;
	-L - принимать и обрабатывать перенаправления
	-o, --output <file> - записать вывод в <file> вместо STDOUT;
	    если используются {} или [] для получения нескольких документов, нужно заключить URL в кавычки,
		а в спецификаторе <file> можно использовать '#', за которым следует число.
		Эта переменная будет заменена текущей строкой для получаемого URL.
#### curl "http://{one,two}.example.com" -o "file_#1.txt"
    -O, --remote-name - записать вывод в локальный файл с именем, подобным имени удаленного файла, который мы получаем.
	  (Используется только файловая часть удаленного файла, путь отсекается).
	  (Имя удаленного файла, используемое для сохранения, извлекается из заданного URL, ничего больше)
      (Можно использовать эту опцию столько раз, сколько у нас URL)
    	
Подробнее:
  -f, --fail
    В основном это делается для того, чтобы скрипты и т.д. могли лучше справляться с неудачными попытками.
	В обычных случаях, когда HTTP-серверу не удается доставить документ, он возвращает HTML-документ,
	сообщающий об этом (в котором часто также описывается причина и многое другое).
	Этот флаг не позволит curl вывести этот документ и вернет ошибку 22.
	Этот метод не является безотказным, и бывают случаи, когда не успешные коды ответа будут проскальзывать,
	особенно при аутентификации (коды ответа 401 и 407).

  -s, --silent
    Делает Curl беззвучным. 
	Он по-прежнему будет выводить данные, которые вы запрашиваете, возможно даже в терминал/stdout, если вы не перенаправите их.
	В сочетании с "-S, --show-error" отключает индикатор выполнения, но при этом показывает сообщения об ошибках.

  -L, --location
    (HTTP) Если сервер сообщает, что запрошенная страница переместилась в другое место (на это указывает заголовок Location:
	и кодом ответа 3XX), эта опция заставит curl повторить запрос на новом месте.
	Если используется вместе с "-i, --include" или "-I, --head", будут показаны заголовки всех запрошенных страниц.
	Когда используется аутентификация, curl отправляет свои учетные данные только на начальный хост.
	Если перенаправление приведет curl на другой хост, он не сможет перехватить пользователь+пароль.
	Вы можете ограничить количество перенаправлений с помощью опции --max-redirs.
	Когда curl следует за перенаправлением и если запрос является POST, он отправит следующий запрос с GET, если HTTP был 301, 302 или 303.
	Если код ответа был любым другим кодом 3xx, curl повторно пошлёт следующий запрос, используя тот же немодифицированный метод.
	Вы можете указать curl не менять POST-запросы на GET после ответа 30x, используя для этого специальные опции:
	--post301, --post302 и --post303. 
	Метод, установленный с помощью -X, --request, переопределяет метод, который curl в противном случае выбрал бы для использования

Аутентификация curl

	Если на сервере требуется аутентификация одного из распространенных типов, например, HTTP Basic или FTP,
	то curl очень просто может справиться с такой задачей.
	Для указания данных аутентификации просто укажите их через двоеточие в опции -u (--user)
	(получение файла с HTTP-сервера, который требует логин и пароль):
	Отменяет параметры -n/--netrc и --netrc-optional. 
	(-u/--user <user:password>)
		$ curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt
	
	Некоторые прокси-серверы требуют специальной аутентификации (параметр -U):
	-U/--proxy-user <user:password>
	Укажите имя пользователя и пароль, которые будут использоваться для аутентификации прокси.
	Если вы используете двоичный файл curl с поддержкой SSPI и выполняете аутентификацию NTLM,
	вы можете заставить curl взять имя пользователя и пароль из вашей среды, просто указав одно двоеточие с этой опцией:
	"-U :"
<На testserver сработал curl -U m.eliseev:***** -x 172.25.200.200:3128 https://prosoftsystems.ru/>
		
https://losst.ru/kak-polzovatsya-curl#%D0%90%D1%83%D1%82%D0%B5%D0%BD%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F_curl

https://www.opennet.ru/man.shtml?topic=curl&category=1&russian=3

https://linux.die.net/man/1/curl

https://curl.se/docs/manual.html

Proxy:
172.25.200.200:3128
user: m.eliseev
password: domain_user_password

Jenkins (web):
172.29.24.32:8080

(HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location:
header and a 3XX response code), this option will make curl redo the request on the new place. If used together
with -i, --include or -I, --head, headers from all requested pages will be shown. When authentication is
used, curl only sends its credentials to the initial host.
If a redirect takes curl to a different host, it won't be able to intercept the user+password. See also --location-
trusted on how to change this. You can limit the amount of redirects to follow by using the --max-redirs option.

When curl follows a redirect and if the request is a POST, it will send the following request with a GET if the HTTP
response was 301, 302, or 303. If the response code was any other 3xx code, curl will re-send the following
request using the same unmodified method.

You can tell curl to not change POST requests to GET after a 30x response by using the dedicated options for that:
--post301, --post302 and --post303. 
The method set with -X, --request overrides the method curl would otherwise select to use.