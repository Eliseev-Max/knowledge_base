Java Keystore. Java keytool.
Usage. Export and Import certificates

[source:]
  1) "keytool export cert – Export a certificate with Java keytool": https://www.misterpki.com/keytool-export-cert/
  2) "How to export .key and .crt from keystore": https://stackoverflow.com/questions/23087537/how-to-export-key-and-crt-from-keystore
  3) "Common Java Keytool Commands": https://knowledge.digicert.com/quovadis/ssl-certificates/ssl-general-topics/common-java-keytool-commands
  4) "Specifying a keystore file": https://www.ibm.com/docs/en/netcoolomnibus/8?topic=probe-specifying-keystore-file
  5) "Generating keystore files": https://www.ibm.com/docs/en/rational-change/5.3.0?topic=https-generating-keystore-files
  6) "Keystore в Java": https://javadev.ru/https/ssl-keystore-java/
  7) "keystore.jks и как его трогать": https://www.tune-it.ru/web/asddsa1137/home/-/blogs/keystore-jks-i-kak-ego-trogat-
- 8) "Generating keystore files": https://www.ibm.com/docs/en/rational-change/5.3.0?topic=https-generating-keystore-files


*********************************************
* Ознакомиться с генерацией файлов keystore *
*********************************************


<? Что такое keytool ?>

  Java keytool - это утилита командной строки, используемая для управления хранилищами ключей различных форматов,
  содержащими
    + ключи
      &&
    + сертификаты.

  Вы можете использовать java keytool для ЭКСПОРТА сертификата из хранилища ключей.
  Во многих отношениях java keytool является конкурирующей утилитой с openssl
    ✓ для хранения ключей,
    ✓ управления ключами и сертификатами.


<? Случай использования для экспорта сертификата из хранилища ключей ?>

  В некоторых случаях
    - вы можете захотеть переместить сертификат в другое хранилище ключей,
    - или третьему лицу может понадобиться ваш открытый ключ.

  В этом случае (если вы не хранили сертификат вне хранилища ключей)
  -> необходимо экспортировать сертификат из хранилища.

(!) Вы НЕ ЗАХОТИТЕ ДЕЛИТЬСЯ хранилищем ключей, если оно содержит ЗАКРЫТЫЙ КЛЮЧ,
    а скорее сертификатом, содержащим открытый ключ.

<? What keytool command do I use to export a cert from a keystore? ?>

  Используйте эту команду для экспорта сертификата из хранилища ключей с помощью java keytool.
  Результатом будет сертификат X.509 в формате PEM.
  Если опция -rfc не задана, результат будет в двоичном формате.

```
keytool -exportcert \
 -rfc \
 -alias example \
 -file cert.pem \
 -keystore example.p12 \
 -storepass changeit \
 -storetype PKCS12 \
 -v
```

  -rfc
    = Will output in PEM format as defined by RFC 1421.

  -alias
    = The alias of the entry encapsulated in the keystore. The chosen value should enhance the readability of the keystore entries, especially when the keystore contains multiple entries.

  -file
    = The file to contain the exported X.509 certificate.

  -keystore
    = The filename of the keystore.

  -storepass
    = The current keystore password. We recommend leaving this option off and letting keytool prompt you instead of writing your password in plain text here.

  -storetype
    = Recommended keystore types include PKCS12 and JKS. In this case, the keystore was of type PKCS12.

  -v
    = Verbose output.


Keytool (available in JDK) allows you to export certificates to a file:

```
keytool -exportcert -keystore [keystore] -alias [alias] -file [cert_file]
```

To export regular keys you should use -importkeystore command (surprise):

```
keytool -importkeystore -srckeystore [keystore] -destkeystore [target-keystore] -deststoretype PKCS12
```


--<Script_Example>--
```
#!/usr/bin/env bash

set -e

# Extracts the private key and certificate from a Java keystore and saves them
#
# Ouputs:
#   <keystore>.p12: private key and certificate in PKCS12 format
#   <keystore>.pem: private key and certificate in PEM format
#   <keystore>.crt: certificate only
#   <keystore>.key: private key only

# Usage:
#   jks2pem.sh <keystore>

# Example:
#   jks2pem.sh keystore.jks

if [ -z "$1" ]; then
    echo "Usage: jks2pem.sh <keystore>.jks"
    exit 1
fi

base_name=$(basename "$1" .jks)
temp_password="changeit"

keytool -importkeystore -srckeystore "$1" -srcstoretype jks \
    -destkeystore "$base_name.p12" -deststoretype PKCS12 \
    -deststorepass "$temp_password"

# Export the private key and certificate as a PEM file without a password
openssl pkcs12 -nodes -in "$base_name.p12" -out "$base_name.pem" -passin pass:"$temp_password"

# Export the certificate as a PEM file
openssl pkcs12 -nokeys -in "$base_name.p12" -out "$base_name.crt" -passin pass:"$temp_password"

# Export the private key as a PEM file
openssl pkcs12 -nocerts -nodes -in "$base_name.p12" -out "$base_name.key" -passin pass:"$temp_password"
```


############################
# Что такое Java Keystore? #
############################

Keystore используется для хранения собственных приватных ключей и сертификатов сервера или клиента.
#(*7*) по сути хранилище keystore является бинарным файлом.
#  keystore.jks -  для хранения сертификатов пользователя и ключей
#  truststore.jks - для хранения доверенных сертификатов.

"""
  В чём состоит разница между файлами .keystore и .jks ?
  jks === "Java keystore"
  и .keystore, и .jks являются способом хранения пар ключ/значение.

>> В конечном счете, .keystore и .jks - это просто расширения файлов:
   вам решать, как разумно называть свои файлы.

Некоторые приложения используют файл keystore, хранящийся в $HOME/.keystore:
  обычно подразумевается, что это файл JKS, поскольку JKS был типом keystore по умолчанию в поставщике безопасности Sun/Oracle Java, вплоть до Java 8.
  Не все используют расширение .jks для файлов JKS, потому что оно подразумевалось по умолчанию.
  Начиная с Java 9 формат по умолчанию - PKCS#12 (часто с расширениями .p12 или pfx), но неясно, все ли приложения успели учесть это изменение.


В Java слово «keystore» может иметь одно из следующих значений, в зависимости от контекста:

API: https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/security/KeyStore.html
файл (или другой механизм), который может быть использован для поддержки этого API
хранилище ключей в отличие от хранилища трастов, как описано здесь: https://stackoverflow.com/a/6341566/372643.

Если говорить о файле и хранилище, то это не совсем хранилище для пар ключ/значение (для этого существует множество других форматов).
Скорее, это контейнер для хранения криптографических ключей и сертификатов (думаю, некоторые из них могут хранить и пароли).
Как правило, эти файлы шифруются и защищаются паролем, чтобы не допустить доступа к этим данным посторонних лиц.

Java использует свой класс KeyStore и соответствующий API для использования хранилища ключей (независимо от того, основано оно на файлах или нет).
JKS - это формат файла, специфичный для Java, но API может использоваться и с другими типами файлов, обычно PKCS#12.
Когда вы хотите загрузить хранилище ключей, вы должны указать его тип.

Обычные расширения будут такими:
  .jks для типа «JKS»,
  .p12 или .pfx для типа "PKCS12"
    (имя спецификации - PKCS#12, но # не используется в имени типа Java keystore).

Кроме того, BouncyCastle также предоставляет свои реализации, в частности BKS (обычно с расширением .bks),
который часто используется в приложениях для Android.


Ultimately, .keystore and .jks are just file extensions: it's up to you to name your files sensibly.

Some application use a keystore file stored in $HOME/.keystore: it was usually implied that it was JKS file, since JKS was the default keystore type in the Sun/Oracle Java security provider, up to Java 8. Not everyone uses the .jks extension for JKS files, because it was implied as the default. Since Java 9, the default format is PKCS#12 (often with .p12 or pfx extensions), but it's not clear whether all applications have caught up with that change. I'd recommend using the extension, just to remember which type to specify (if you need).

When talking about the file and storage, this is not really a storage facility for key/value pairs (there are plenty or other formats for this). Rather, it's a container to store cryptographic keys and certificates (I believe some of them can also store passwords). Generally, these files are encrypted and password-protected so as not to let this data available to unauthorized parties.


"""


[Client]<-{SSL/TLS connection}->[Server]

  Для аутентификации:=> требуются привтные ключи и сертификаты.

[Односторонняя аутентификация]:
  keystore нужен только на серверной стороне.

[Двусторонняя аутентификация]:
  и клиент и сервер обмениваются сертификатами,
  => и у сервера, и у клиента должен быть keystore с парой:
  ✓ приватный ключ/публичный ключ
  ✓ + сертификат.

Т.е. иными словами Keystore используется для хранения ключей и сертификатов,
использующихся ДЛЯ ИДЕНТИФИКАЦИИ ВЛАДЕЛЬЦА КЛЮЧА (клиента или сервера).


***************
* Trust Store *
***************

Второй тип keystore применяется для хранения trusted сертификатов.
В него кладутся ключи trusted certificate authorities CA.
# в trusted store может класться самоподписанный сертификат.

Trust Store = это тоже keystore, но в Java он называется trusted store.

Форматы Keystore поддерживаемые Java

#[!] keystore = контейнер, используемый для хранения ключей и сертификатов.

Java поддерживает два формата keystore:
  1. JKS (Java Key Store) – Java format
  2. PKCS12 — this is an industry standard

Тип keystore, используемый по-умолчанию, задается в Java security properties файле свойством keystore.type.

Если приложение обращается к key store файлу без явного указания его типа -> используется JKS формат.

(*) Java security properties файл расположен в каталоге lib/ внутри инсталляционного директория с Java по пути:
```
/lib/security/java.security
```

Для работы с keystore в java дистрибутиве есть специальная утилита keytool.

'''
  Keytool вполне достаточно для операций с ключами в Java.
  Однако JKS формат является ПРОПИЕТАРНЫМ и ЗАКРЫТЫМ.
  => поэтому часто для разнообразных конвертаций и взаимодействия со сторонними разработчиками могут использоваться утилиты,
     поставляемые в комплекте с библиотекой OpenSSL.
'''

  Если планируется использовать ключи исключительно в Java, keystore в формате JKS вполне подойдет.

**********
* Алиасы *
**********

Keystore (по крайней мере в JKS формате), позволяет хранить несколько пар ключей и сертификатов.

(!) ДЛЯ ИДЕНТИФИКАЦИИ каждой пары || отдельного сертификата используется алиас.

Алиас указывается в исходном коде при доступе к соответствующему ключу || сертификату.

(*) Доступ к каждому алиасу ограничивается паролем.

*********************
* Создание keystore *
*********************

Процесс генерации keystore (JKS или PKS12) включает
  -> генерацию пары ключей (приватного и публичного);
  -> затем получение от Certificate Authority (CA) ПОДПИСИ к публичному ключу
     и связанной с ним ИДЕНТИФИЦИРУЮЩЕЙ ИНФОРМАЦИИ в виде СЕРТИФИКАТА.

[!] Certificate authority генерирует сертификат на основе
  > публичного ключа
  > и идентификационной информации, переданной ему в виде CSR.

# CA выдает сертификат, привязывающий публичный ключ к указанному Distinguished Name
# (это может быть имя хоста (hostname, имя пользователя или название приложения).

Шаги по созданию keystore представляющего пользователя, приложение или хост следующие:

  1. Сгенерировать пару ключей (public / private key)
       В java при генерации пары ключей с помощью keytool сразу создается самоподписанный self-signed сертификат,
       который можно немедленно использовать для тестирования.

    Следующие шаги, таким образом, нужны только для создания ПОЛНОЦЕННОГО ОФИЦИАЛЬНОГО СЕРТИФИКАТА.
      1) сгенерировать запрос на получение сертификата (Certificate Signing Request (CSR)).
      2) получить CSR, подписанный доверенным CA (output of this is a certificate)
      3) импортировать сертификат, сделанный CA в ваш key store.
      4) импортировать сертификат CA в ваш truststore как trusted certificate

***************************
* Java’s Default Keystore *
***************************
  Веб-сервер или приложение может сказать Java использовать заданный keystore файл установкой свойства javax.net.ssl.keyStore.
  (указывается путь к файлу keystore).
  Если приложение не укажет keystore property, тогда загружается keystore по-умолчанию.

  Keystore по-умолчанию хранится в файле .keystore в $HOME ( = пользовательском домашнем директории),
  определяемом в свою очередь системным свойством user.home.


*****************************
* Java’s Default Truststore *
*****************************

  Приложение может указать Java использовать определенный truststore файл установкой свойства
```
javax.net.ssl.trustStore
```

  Если приложение не указывает явно truststore, тогда truststore по-умолчанию загружается и используется.

[по умолчанию]
  java truststore находится в /lib/security/cacerts
  пароль по-умолчанию: 'changeit'.

Файлы truststore == обычные keystore файлы, содержащие один или более сертификатов trusted CA (Certificate Authorities).


***********
* Keytool *
***********

  Для облегчения создания и управления keystore файлами в дистрибутив Java входит утилита keytool,
  позволяющая создавать JKS файлы.

  Keytool позволяет УПРАВЛЕНИЕ сертификатами и парами публичных приватных ключей.

С опцией -genkey, keytool
  > генерирует новую пару public/private ключей,
  > и для public ключа создает self-signed сертификат.

```
keytool -genkey -keystore server.jks -dname "CN=localhost, OU=dev64, O=dev64-wordpress, L=Unknown, ST=Unknown, C=RU" -storepass storepass -alias server-test -keypass serverpass
```

Сертификат создается в формате X.509.
В этом формате в качестве идентификатора владельца используется Distinquished Name или просто DN в формате X.500.

(!) Точно такой же формат идентификации объектов используется, например в LDAP-протоколе или в SNMP.

  Distinquished Name задается в виде разделенных через запятую атрибутов:
  «CN=Andrey Chesnokov, OU=dev64, O=dev64-wordpress, L=Unknown, ST=Unknown, C=RU».

Здесь отдельные атрибуты расшифровываются так:
  * CN — common name = имя владельца
  * OU — organizationUnit (e.g, department or division) = департамент или отдел
  * O — organizationName — large organization name, e.g., «ABCSystems, Inc.»
  * L — localityName — locality (city) name, e.g., «Palo Alto» = местоположение (город)
  * ST — stateName — state or province name, e.g., «California»
  * C — country — two-letter country code, e.g., «CH»

Часть из атрибутов могут быть пропущены,
в данном случае им присвоено значение Unknown.

При генерации ТЕСТОВОГО keystore, значения можно присваивать ЛЮБЫЕ.

При получении ОФИЦИАЛЬНОГО сертификата, данные регламентируются и проверяются Certificate Authority организацией.

Внутри каждого сертификата в формате X.509 хранится ПАРА Distinqueshed Names (DN):
  один DN принадлежит владельцу сертификата,
  а второй DN указывает идентификатор CA, подписавшей сертификат.

  # В случае с self-signed сертификатом, оба эти DN указывают на владельца сертификата.

Distinquished Name задается keytool с помощью опции -dname.
Если опцию dname не указать, тогда keytool запросит все необходимые поля из командной строки.

Опция keystore задает имя keystore файла.
Если её пропустить, тогда keytool создаст файл с именем .keystore в домашнем директории пользователя.

Доступ к keystore защищается паролем.
Соответственно опция -keypass указывает пароль для доступа к keystore целиком.
Этот пароль необходим для возможности чтения || модификации keystore.

Второй пароль, как уже говорилось выше, необходим для доступа к отдельному алиасу внутри keystore.
Этот второй пароль указывается с помощью опции -keypass.

Т.о. с помощью одной команды получается
  -> keystore
    -> с парой ключей
    -> и сертификатом,

:=> остается этот keystore взять и подложить в нужный каталог к своей программе.


1. Создание хранилищ, ключей и CSR

## Создание Java keystore и пары ключей. 
```
keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -storepass password
```

## Создание CSR для существующего alias'а
```
keytool -certreq -alias mydomain -keystore keystore.jks -storepass password -file mydomain.csr
```

## Создание keystore и самоподписанного сертификата
```
keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360
```


2. Импортирование сертификатов

## Импортирование корневого или промежуточного сертификата
```
keytool -import -trustcacerts -alias root -file CA.crt -keystore keystore.jks -storepass password
```

## Импортирование подписанного сертификата пользователя в существующее хранилище
```
keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore keystore.jks -storepass password


3. Экспортирование сертификатов

```
keytool -export -alias mydomain -file mydomain.crt -keystore keystore.jks -storepass password
```


4. Простмотр данных о сертификате или хранилища

## Просмотр данных об отдельном сертификате
```
keytool -printcert -v -file mydomain.crt
```

## Вывести список сертификатов в хранилище
```
keytool -list -v -keystore keystore.jks -storepass password
```

## Вывести данные о конкретном сертификате в хранилище
```
keytool -list -v -keystore keystore.jks -storepass password -alias mydomain
```


5. Удаление сертификатов из хранилища

```
keytool -delete -alias mydomain -keystore keystore.jks -storepass password
```


6. Изменение паролей

## Изменение пароля хранилища
```
keytool -storepasswd -new new_storepass -keystore keystore.jks -storepass password
```

# Example
```
keytool -storepasswd -new ${NEW_KEYSTORE_PASSWORD} -keystore  $JENKINS_HOME/.keystore/cacerts -storepass ${OLD_KEYSTORE_PASSWORD}
```

## Изменение пароля приватного ключа
```
keytool -keypasswd -alias client -keypass old_password -new new_password -keystore client.jks -storepass password
```

