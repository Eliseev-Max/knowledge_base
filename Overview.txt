Сборка представляет собой параметризованный пайплайн.
Основная задача сборки - запуск тестов, написанных на Python 3.6 (и свежее) с применением фреймворка Pytest (v.>=6.2.4) в автоматически настраиваемой среде исполнения контейнера Docker и представление отчёта в удобном для анализа виде с помощью плагина Allure
Пайплайн определён посредством файла Jenkinsfile, находящегося в репозитории создания среды исполнения (https://bucket.prosyst.ru/scm/~m.eliseev/docker_env.git)
Тип пайплайна по синтаксису написания: Scripted Pipeline.
Этапы (stages) пайплайна:
1. checkout - клонирование репозитория, содержащего всё необходимое для создания среды исполнения
2. build_image - сборка образа Docker по инструкции, описанной в Dockerfile
3. run_container_with_tests - запуск контейнера на основе собранного образа
4. report-allure - генерация отчёта Allure
---
Параметры запуска пайплайна:
IP - IP адрес тестируемого контроллера;
BUCKETSRC - ссылка на репозиторий, содержащий тесты pytest
REPOSITORY - имя репозитория (каталога) с тестами

Задача = Item

Процедура автоматизированного функционального тестирования контроллеров ARIS в среде Jenkins включает в себя две последовательно выполняющиеся задачи:
1. 01_clone_tests_from_repo - клонирование и архивирование автотестов из указанного репозитория системы контроля версий (Bitbucket).

2. 02_build_docker_img_and_run_container - основная задача, состоящая из следующих этапов:
	• клонирование из репозитория в рабочее пространство файлов, необходимых для построения образа Docker;
	• копирование в рабочее пространство и разархивирование тестов из предшествующей задачи;
	• создание образа Docker;
	• запуск контейнера с тестовым окружением и тестами;
	• построение отчёта по итогам проведённого тестирования средствами плагина Allure Report

Задача №2 будет запущена автоматически только в случае успешного выполнения задачи №1.

Что следует учесть при запуске задач:
	Задача №1:
		• при выборе репозитория с тестами убедитесь в наличии доступа к репозиторию и прав на операцию клонирования
		(для репозиториев, не являющихся общедоступными, должны быть настроены учётные данные (Credentials))
		• файлы тестов, конфигурационные файлы и файл conftest.py, находящиеся в репозитории (задача №1) должны соответствовать правилам, установленным во фреймворке conftest.py
	
	Задача №2:
		

Правила составления тестов
	Автотесты написаны на языке программирования Python (версии >= 3.6) с использованием фреймворка Pytest (версия >=6.2.4).
	Общий вид единичного теста:
	@allure.title("Название теста")
	@allure.description("Описание теста")
	def test_name_of_test(ssh_connection, channel_indicator):
		тело теста
	
	♦ Замечание: вместо фикстуры @allure.description может использовать строку документации теста. Описание строки документации будет отображено в отчёте allure.
	Допускается использование декораторов @pytest.mark.parametrize, @pytest.mark.skip, @pytest.mark.xfail и т.д.
	Это расширяет функциональность и гибкость тестов, а также позволяет маркировать тесты для обозначения их принадлежности определённым группам.
	Декораторы pytest прописываются после фикстур @allure
	
		