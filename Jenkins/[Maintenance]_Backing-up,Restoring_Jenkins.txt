Backing-up/Restoring Jenkins
(https://www.jenkins.io/doc/book/system-administration/backing-up/)


Наличие хороших резервных копий контроллера Jenkins ОЧЕНЬ ВАЖНО.

Резервные копии используются для:
  ✓ аварийного восстановления (Disaster recovery);

  ✓ восстановления старой конфигурации (Recovering an older configuration)
    (случайное изменение конфигурации может быть не обнаружено в течение некоторого времени);

  ✓ восстановления поврежденного или случайно удаленного файла
    (Recovering a file that is corrupted or was deleted accidentally)

Рассмотрим следующее:
  ● Как создать резервную копию
  ● Файлы, которые следует резервировать
  ● Как проверить резервную копию, чтобы убедиться, что она пригодна для использования


###################
# СОЗДАНИЕ БЭКАПА #
###################


Для создания резервных копий можно использовать различные схемы.
Они рассматриваются в этом разделе:
  ● Filesystem snapshots
  ● Plugins for backup
  ● Write a shell script that backs up the Jenkins controller


************************
* Filesystem snapshots *
************************

  Снимки файловой системы
    + обеспечивают максимальную согласованность резервных копий.
    + выполняются быстрее, чем живые резервные копии (live backups),
  что снижает вероятность копирования разных данных в разные моменты времени.

  Их поддерживают:
    ✓ The Linux Logical Volume Manager (LVM)
    ✓ Linux btrfs
    ✓ Solaris ZFS (which also supports incremental backups)
    ✓ FreeBSD ZFS
    ✓ OpenZFS on Linux
    ✓ Some other file system architectures
    ✓ Many cloud providers
    ✓ Some separate storage devices also let you create snapshots at the storage level.
      # (Некоторые отдельные устройства хранения также позволяют создавать моментальные снимки на уровне хранилища).


**********************
* Plugins for backup *
**********************

  Для резервного копирования доступно несколько плагинов.
  В главном меню выберите:
    Manage Jenkins -> Plugins -> Available: найдите backup.

  Обратите внимание, что в настоящее время из плагинов с открытым исходным кодом поддерживается только плагин
---
ThinBackup
(https://plugins.jenkins.io/thinBackup/)
plugin_id: thinBackup:2.1.2
---

(*) Вы можете попробовать другие плагины, но у вас могут возникнуть проблемы с ними.


**************************************
* Writing a shell script for backups *
**************************************

  Вы можете написать собственный shell script, который будет копировать соответствующие файлы и каталоги в место хранения резервных копий.
  Используйте cron, чтобы запланировать запуск сценария резервного копирования.

(!) убедитесь, что у вас есть права на запись в каталог для backup'ов

(!) Резервное копирование в /tmp не рекомендуется, поскольку /tmp может быть очищен при перезагрузке.

(*) Запись файлов в локальную ФС - самый быстрый способ создания backup'а.
    Рассмотрите возможность копирования готовой резервной копии
      -> на удаленный сервер резервного копирования
    <или>
      -> устройство для долгосрочного хранения.


****************************************************
* Резервное копирование ключа контроллера отдельно *
*       Back up the Controller Key Separately      *
****************************************************

[!] НИКОГДА НЕ ВКЛЮЧАЙТЕ КЛЮЧ КОНТРОЛЛЕРА В РЕЗЕРВНУЮ КОПИЮ JENKINS!

(!) Ключ контроллера используется для шифрования данных в каталоге  secrets/, обеспечивающем безопасность credentials.

Он хранится
  - в файле:

```
$JENKINS_HOME/secrets/hudson.util.Secret
```
  - в каталоге `$JENKINS_HOME/secrets/`

  - и шифруется с помощью master.key

  Если вам понадобится восстановить систему из резервной копии, вам понадобится этот файл.
  И если кто-то другой получит доступ к вашим резервным копиям и будет иметь этот ключ,
(!) -> он получит полный доступ ко всей вашей информации.

[!] Вы должны обращаться с ключом контроллера так же, как с закрытым ключом SSH,
    и НИКОГДА НЕ ВКЛЮЧАТЬ ЕГО В ОБЫЧНУЮ РЕЗЕРВНУЮ КОПИЮ.

  Вместо этого создайте резервную копию файла master.key ОТДЕЛЬНО и храните его в ОЧЕНЬ НАДЕЖНОМ МЕСТЕ,
  вдали от других резервных копий.

  Это очень маленький файл, который РЕДКО ИЗМЕНЯЕТСЯ.

  Если вам нужно выполнить ПОЛНОЕ ВОССТАНОВЛЕНИЕ СИСТЕМЫ, вам нужно будет
    1) восстановить всю остальную систему,
    2) а затем отдельно применить резервную копию файла master.key.


************************************
* Which Files Should Be Backed Up? *
************************************

[$JENKINS_HOME]
  При резервном копировании всего каталога $JENKINS_HOME сохраняется весь контроллер Jenkins.
  Чтобы восстановить систему, просто скопируйте всю резервную копию в новую систему.

[*Обратите внимание*]
  JENKINS_HOME включает в себя ряд файлов, которые на самом деле НЕ НУЖНО РЕЗЕРВИРОВАТЬ.

  Выбор конкретных каталогов и файлов для резервного копирования
    "+" дает меньший объем резервных копий,
    "-" но может потребовать больших усилий для восстановления системы.

(*) Один из подходов заключается в резервном копировании разных каталогов по разным расписаниям.


***********************
* Configuration files *
***********************

  Файлы конфигурации хранятся непосредственно в директории $JENKINS_HOME.

./config.xml
  = это основной файл конфигурации Jenkins.

  Другие файлы конфигурации также имеют суффикс .xml.

  (!) Укажите $JENKINS_HOME/*.xml для резервного копирования всех файлов конфигурации.

  (*) Файлы конфигурации можно также хранить в репозитории SCM.
      В нем хранятся копии всех предыдущих версий каждого файла, которые можно извлечь с помощью стандартных средств SCM.


[./jobs Subdirectory]

  Каталог $JENKINS_HOME/jobs содержит информацию обо всех заданиях (jobs), которые вы создаете в Jenkins.

  ● ./builds
      = Содержит записи о сборке

  ● ./builds/archive
      = содержит заархивированные артефакты
        Создайте резервную копию, если важно сохранить эти артефакты в долгосрочной перспективе.
        (!) Они могут быть ОЧЕНЬ БОЛЬШИМИ и могут сделать ваши резервные копии очень большими

  ● ./workspace
      = Содержит файлы, checked out из SCM
        Обычно НЕТ НЕОБХОДИМОСТИ создавать резервные копии этих файлов.
        Вы можете выполнить clean checkout после восстановления системы.

  ● ./plugins/*.hpi
      = Пакеты плагинов с определенными версиями, используемыми в вашей системе

  ● ./plugins/*.jpi
      = Пакеты плагинов с определенными версиями, используемыми в вашей системе


############################################
# Что может не потребоваться резервировать #
#     What may not need to be backed up    #
############################################

"""
  Следующие файлы и каталоги обычно НЕ НУЖНО включать в каждую обычную резервную копию,
  поскольку при восстановлении системы можно загрузить последнюю версию.

(!) Однако некоторые эксперты по аварийному восстановлению НЕ РЕКОМЕНДУЮТ выполнять какие-либо ОБНОВЛЕНИЯ во время восстановления системы,
    чтобы избежать задержек, вызванных проблемами совместимости, которые могут возникнуть.

    Если в вашем плане аварийного восстановления указано,
    что для восстановления системы необходимо использовать те же версии программного обеспечения, которые были запущены ранее,
    вы можете сделать нечастую резервную копию системы и всех загруженных инструментов
    и использовать ее для восстановления системы.
"""

--<НЕ_КОПИРУЕМ>--

  ./war
    = Exploded war file
      Чтобы восстановить систему, загрузите ПОСЛЕДНЮЮ ВЕРСИЮ war file.


  ./cache
    = Загруженные инструменты
      Чтобы восстановить систему, загрузите текущую версию tools (инструментов)

  ./tools
    = Извлеченные инструменты
      Чтобы восстановить систему, снова извлеките tools (инструменты).

  ./plugins/xxx
    = Подкаталоги установленных плагинов
      Они будут автоматически заполнены при следующем перезапуске.
\\


***********************************
* Проверка резервного копирования *
*       Validating a backup       *
***********************************

  Стратегия резервного копирования должна включать проверку каждой резервной копии.
# Вы же не хотите узнать, что ваша резервная копия никуда не годится, когда она вам понадобится!

  Простой способ проверить полную резервную копию - восстановить ее во временное место (temporary location).

  1. Создайте каталог для тестовой проверки (например, /mnt/backup-test)
  2. Восстановите резервную копию в этот каталог.
  3. Установите $JENKINS_HOME для указания на этот каталог, указав произвольный HTTP-порт,
     чтобы не столкнуться с реальным контроллером Jenkins:

--[CMD]--
```
export JENKINS_HOME=/mnt/backup-test
```

  4. Теперь запустите восстановленный контроллер Jenkins:

```
java -jar jenkins.war --httpPort=9999
```


[Рекомендовано к ознакомлению:]
* "Why Smart, Efficient Backup and Restore Techniques are Essential with Jenkins Production Server":
## Почему умные и эффективные методы резервного копирования и восстановления крайне важны для производственного сервера Jenkins

#-> https://www.cloudbees.com/blog/why-smart-efficient-backup-and-restore-techniques-are-essential-jenkins-production-server


BACKUP PLANNING

  Jenkins хранит все в домашнем каталоге Jenkins Home, $JENKINS_HOME
# (чтобы найти расположение $JENKINS_HOME, перейдите в меню Configure System),
  -> самый простой способ создать резервную копию - это просто создать резервную копию всего каталога $JENKINS_HOME.
  Даже если у вас распределенная установка Jenkins, вам НЕ НУЖНО создавать резервные копии НА СТОРОНЕ АГЕНТА.


?????????????????????????????????????????????????????????
? Можно ли делать резервные копии на живых экземплярах, ?
? не выводя Jenkins в автономный режим                  ?
?????????????????????????????????????????????????????????

К счастью, Jenkins спроектирован таким образом, что РЕЗЕРВНОЕ КОПИРОВАНИЕ В РЕАЛЬНОМ ВРЕМЕНИ РАБОТАЕТ НОРМАЛЬНО
  - изменения конфигурации атомарны, поэтому резервное копирование можно выполнять, не затрагивая работающий экземпляр.

Теперь давайте рассмотрим, как можно оптимизировать резервное копирование.

Оптимизация №1: Back up a subset of $JENKINS_HOME

  Хотя $JENKINS_HOME - это ЕДИНСТВЕННЫЙ каталог, который нужно резервировать, есть одна загвоздка:
(!)  этот каталог может стать довольно большим.

  Чтобы сэкономить место
    1) подумайте, какие части этого каталога вам действительно нужны для резервного копирования,
    2) и создавайте резервные копии выборочно.

  Основная часть ваших данных, включая конфигурацию заданий и прошлые записи, хранится в каталоге /jobs.
  В каталоге /jobs хранится информация, относящаяся ко всем заданиям, которые вы создаете в Jenkins.
  Структура каталога выглядит следующим образом:
```
#${JENKINS_HOME}:

  /jobs/*
    builds (build records)
    builds/*/archive (archived artifacts)
    workspace (checked out workspace)
```

  В каталоге /builds хранятся записи о прошлых сборках.
  Поэтому если вас интересует ТОЛЬКО КОНФИГУРАЦИЯ, не делайте резервных копий сборок.
  Или, возможно, вам нужно хранить записи о сборках, но вы можете позволить себе выбросить архивные артефакты
  (которые на самом деле являются готовыми двоичными файлами (binaries)).
  => Вы можете сделать это, исключив builds/*/archive;
  (!) обратите внимание, что эти артефакты могут быть довольно большими, и их исключение может дать существенную экономию.

[!] Обратите внимание, что следующие каталоги содержат биты, которые могут быть легко воссозданы,
    => поэтому их не нужно включать в резервную копию:

## DO NOT BACKUP
```
  /war (exploded war)
  /cache (downloaded tools)
  /tools (extracted tools)
```

  Наконец, каталог workspace содержит файлы, которые вы проверяете (check out) для систем контроля версий.
  Обычно эти каталоги можно СМЕЛО ВЫБРАСЫВАТЬ.
  Если вам нужно восстановиться, Jenkins всегда может выполнить чистую проверку (clean checkout),
  поэтому обычно нет необходимости создавать резервные копии workspace.


Оптимизация №2: Use OS-level Snapshots

  Если вам нужна максимальная согласованность (consistency) резервных копий,
  используйте возможность моментальных снимков (snapshots) в файловой системе.
  Хотя вы можете создавать резервные копии в реальном времени, их выполнение занимает много времени,
  => поэтому вы рискуете получить разные данные в разные моменты времени... что может быть или не быть реальной проблемой.
  Снэпшоты решают эту проблему.

  Многие файловые системы позволяют делать моментальные снимки, включая
    + Linux Logical Volume Manager (LVM)
    + и Solaris ZFS (которая также позволяет делать инкрементные резервные копии).

  Некоторые отдельные устройства хранения также позволяют создавать снэпшоты на уровне хранилища.

  Теперь давайте протестируем и восстановим.

#! Проверять работоспособность бэкапов обязательно нужно, дабы не быть застигнутым врасплох, когда бэкап действительно потребуется.

(!) Каталог JENKINS_HOME является «перемещаемым»!
    Это значит, что вы можете извлечь его в любое место, и он все равно будет работать.

# Вот самый простой способ проверить восстановление:

  1) Скопируйте резервный каталог Home куда-нибудь на машину,
     например ~/backup_test.

  2) Установите JENKINS_HOME в качестве свойства окружения и укажите на backup_test;

# например,

```
export JENKINS_HOME=~/backup_test
```


  3) Run
```
java -jar jenkins.war --httpPort=9999
```

Эта последовательность команд подхватит новый JENKINS_HOME с каталогом backup_test.
Вы можете использовать этот экземпляр Jenkins, чтобы убедиться, что ваша резервная копия работает.

(!) Не забудьте указать случайный HTTP-порт, чтобы не столкнуться с реальным - иначе сервер не запустится!

  Хотя Jenkins несложно установить или настроить, вы
    + получите лучшие результаты,
    + поддержите больше проектов и
    + сэкономите время администрирования,
  если будете знать советы, хитрости и оптимальные настройки, которые позволят вашей установке работать наиболее эффективно.

