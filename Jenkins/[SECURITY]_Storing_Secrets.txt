Jenkins. Storing Secrets
#-> https://www.jenkins.io/doc/developer/security/secrets/#storing-secrets


Плагины обычно хранят
  - учетные данные пользователей
  и подобные секреты:
    - ключи API,
    - токены доступа
    - или просто имена пользователей и пароли,
  для взаимодействия с другими системами и сервисами.

Плагины, хранящие такие секреты, должны быть внимательны к тому, как они их хранят.

[!] С простыми полями String, которые сериализуются на диск в виде обычного текста, может возникнуть ряд проблем:
    ● Во многих системах большая часть домашней директории Jenkins доступна другим учетным записям пользователей,
      что позволяет получить учетные данные, хранящиеся на диске в виде ОБЫЧНОГО ТЕКСТА.

    ● Резервные копии Jenkins home могут быть скомпрометированы, а секреты - раскрыты, даже если исключить каталог secrets/.

    ● Строковые поля передаются в конфигурационных формах в виде ОБЫЧНОГО ТЕКСТА,
      (!) даже если значение скрыто в поле пароля,
      поэтому к нему можно получить доступ через исходный код HTML-страницы.
      Это относится даже к пользователям, имеющим только Extended Read permission (право расширенного чтения).
      # "Extended Read Permission": https://plugins.jenkins.io/extended-read-permission/

  Самое простое решение - хранить пароль как Secret.
#-> https://javadoc.jenkins.io/hudson/util/Secret.html

    ◎ Ключ для расшифровки секретов хранится в каталоге secrets/,
      имеющем наивысшую степень защиты, который рекомендуется ИСКЛЮЧИТЬ из резервных копий.

    ◎ Поля Secret обходятся в зашифрованном виде, так что их открытый текст (plain-text form) не может быть получен пользователями позже.
      Если у пользователя есть только право РАСШИРЕННОГО ЧТЕНИЯ (Extended Read permission), секрет просто удаляется из вывода.

[*] Более продвинутым вариантом является интеграция с Credentials Plugin (https://plugins.jenkins.io/credentials/).
##  Дополнительную информацию см. в его документации: https://github.com/jenkinsci/credentials-plugin/tree/master/docs


***************************
* Storing Secrets on Disk *
***************************

  Самый простой способ хранения секретов =
    хранить их в поле типа Secret
    и обращаться к этому полю в другом коде через getter, возвращающий тот же тип.

  Jenkins будет прозрачно обрабатывать шифрование и дешифрование для хранения на диске.

  Ниже приведен пример использования Secret, разделяемого между всеми экземплярами шага сборки.

```
public class MyBuilder extends Builder implements SimpleBuildStep {

    public void perform(Run<?,?> run, FilePath workspace, Launcher launcher, TaskListener listener) {
        String password = ((MyBuilder.DescriptorImpl)getDescriptor()).getPassword().getPlainText(); 
        // Здесь можно выполнять работу с паролем, например, отправлять HTTP-запросы и т. д.
        //  Secret#toString также получит открытый текст, но он устарел и выдаст предупреждение.
    }

    @Extension
    public static class DescriptorImpl extends BuildStepDescriptor<Builder> {
        private Secret password;                                                             //(2)

        public void setPassword(Secret password) {
            this.password = password;
        }

        public Secret getPassword() {                                                        //(3)
            return password;
        }

        @Override
        public boolean configure(StaplerRequest req, JSONObject json) throws FormException {
            req.bindJSON(this, json);
            return true;
        }

        // more code
    }

    // more code
}
```

  * Чтобы использовать пароль, получите его открытым текстом.
  * Поле Secret будет хранить пароль в зашифрованном виде на диске.
  * Secret getter, если он используется полем формы f:password (см. ниже),
    будет передавать пароль на пользовательский интерфейс в зашифрованном виде и скрывать его от пользователей без Configure permission.


***********************************
* Secrets and Configuration Forms *
***********************************

  В форме конфигурации отобразите сам секрет (а не расшифрованный секрет), скрытый в поле <f:password>.
  Для этого необходимо, чтобы поле getter или public, используемое для заполнения элемента формы, также было Secret (см. выше).

--<XML>--
```
  <f:entry title="${%Password}" field="password">
    <f:password />
  </f:entry>
```

  Секреты, ЗАНИМАЮЩИЕ НЕСКОЛЬКО СТРОК (например, сертификаты или ключи SSH), должны быть скрыты от глаз с помощью элемента формы <f:secretTextarea>.
  Он доступен начиная с версии Jenkins 2.171.

  Плагины с более старыми базовыми версиями ядра могут добавить зависимость от автономной библиотеки io.jenkins.temp.jelly:multiline-secrets-ui:1.0
# (или более новой)
  с тем же элементом формы.
  Инструкции по использованию и примеры кода см. в документации в репозитории GitHub.
#-> https://github.com/jenkinsci/lib-multiline-secrets-ui/blob/master/README.md


*****************************************
* Encryption of Secrets and Credentials *
*****************************************

  Jenkins использует AES для шифрования и защиты секретов, учетных данных и соответствующих им ключей шифрования.
  Эти ключи шифрования хранятся в каталоге $JENKINS_HOME/secrets/ вместе с мастер-ключом (master.key),
  используемым ДЛЯ ЗАЩИТЫ ЭТИХ КЛЮЧЕЙ.

  Этот каталог должен быть настроен таким образом, чтобы только пользователь операционной системы, от имени которого работает контроллер Jenkins,
  имел доступ к нему на чтение и запись (например, значение chmod 0700 или использование соответствующих атрибутов файла).
  Мастер-ключ (на криптожаргоне его иногда называют "ключом шифрования") хранится в незашифрованном виде в файловой системе контроллера Jenkins в каталоге $JENKINS_HOME/secrets/master.key, что не защищает от злоумышленников, имеющих прямой доступ к этому файлу. Большинство пользователей и разработчиков будут использовать эти ключи шифрования косвенно, либо через Secret API для шифрования общих секретных данных, либо через credentials API. Для криптолюбов Jenkins использует AES в режиме цепочки блоков шифрования (CBC) с набивкой PKCS#5 и случайными IVs для шифрования экземпляров CryptoConfidentialKey, которые хранятся в $JENKINS_HOME/secrets/ с именем файла, соответствующим идентификатору CryptoConfidentialKey. Общие идентификаторы ключей включают:
  
  
###########################
# cicd.prosyst.ru/jenkins #
###########################

#-> https://stackoverflow.com/questions/25547381/what-password-encryption-jenkins-is-using

  В CasC-конфигурации контроллера Jenkins (jenkins.yaml) пароль доменного сервисного пользователя daes-ldap хранится в зашифрованном виде
  и приводится в качестве значения для ключа bindPassword:
  В общем это выглядит так:
  
```
  securityRealm:
    activeDirectory:
      bindPassword: "{AQAAABAAAAAQH5Nvx5JG2sBbkuvR612dS8Bii2sPlmol5DK1a4PIPIo=}"
      customDomain: true
      domains:
      - bindName: "daes-ldap@prosoft.ural.ru"
        bindPassword: "{AQAAABAAAAAQuZPGjNjlRrjJzQpynBOq1UbIuMA36zWzlmkbOjoA4/o=}"          # вот этот пароль
        name: "PROSOFT.URAL.RU"
```

Расшифровать и увидеть пароль можно с помощью консоли сценариев Jenkins:

```
import hudson.util.Secret

def secret = Secret.fromString("AQAAABAAAAAQuZPGjNjlRrjJzQpynBOq1UbIuMA36zWzlmkbOjoA4/o=")
println(secret.getPlainText())
```


Другой возможностью является выполнение Groovy-скрипта через консоль Jenkins Groovy
#(вы можете попасть туда через JENKINS_URL/script):

```
println(hudson.util.Secret.decrypt("AQAAABAAAAAQuZPGjNjlRrjJzQpynBOq1UbIuMA36zWzlmkbOjoA4/o="))
```

println(hudson.util.Secret.decrypt("AQAAABAAAAAwfDfGoLZa8cyzYc5ru/iiEOGwyH50B68ac0gQL8xhDOVOKMk+zEEMrby8xsIhMOCUi2e/AVEM24OydU1g4KSM3A=="))
