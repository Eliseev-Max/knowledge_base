https://youtu.be/dV8l-pvPV3w - сборка Docker Image с помощью Pipeline

[00:05:00]	Цели:

	• объяснить разницу между CI/CD
	• настроить Jenkins job, pipeline, view. Устанавливать plugins
	• использовать Jenkins Job Builder для управления сборками
	
	Как всё это может помочь?
		
	• автоматизация запуска автотестов и их интеграция в процесс развёртывания;
	• возможность быстрой проверки новых изменений без участия QA;
	• хранение истории выполнения тестовых сборок
	
[00:06:40]	CI/CD

	Сборка приложения + запуск (прогон) тестов (чаще - unit) = Continuous Integration
	
	Автоматизирована сборка приложения								}
	Автоматизирован запуск unit-тестов								}	Continuous
	Автоматизировано развёртывание приложения 						}	Delivery (CD)
	на тестовом сервере + автоматический запуск тестов				}	
	Ручной деплой приложения в Production							}
	
	Полная автоматизация (уровня CD) + автоматический деплой = Continuous Deployment
	Continuous Integration ►► Continuous Delivery ►► Continuous Deployment

[00:10:14]	Преимущества и недостатки (стр. 13)
	
[00:16:00]	Jenkins jobs, pipelines, plugins
	
	Jenkins - программная система с открытым исходным кодом на Java, предназначенная для 
			  обеспечения процесса непрерывной интеграции программного обеспечения.
	Позволяет автоматизировать часть процесса разработки программного обеспечения, в котором
	не обязательно участие человека, обеспечивая функции непрерывной интеграции.
	
[00:17:08]	Установка Jenkins
	
	• Linux (Host/VM)
	https://www.jenkins.io/doc/book/installing/linux
	wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -	# добавляем репозиторий
	sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > \
    /etc/apt/sources.list.d/jenkins.list'													# устанавливаем ключ
	sudo apt-get update
	sudo apt-get install jenkins
	
	Запуск Jenkins
		1. Зарегистрируем службу Jenkins командой:
			$ sudo systemctl daemon-reload
		2. Запустить службу Jenkins командой:
			$ sudo systemctl start jenkins
		► Проверить статус службы Jenkins:
			$ sudo systemctl status jenkins
		Если всё установлено корректно, увидим:
		Loaded: loaded (/etc/rc.d/init.d/jenkins; jenerated)
		Active: active (running) since ... XXmin XXs ago
		
	В браузере переходим на localhost:8080
									
	
	• Docker
	https://hub.docker.com/r/jenkins/jenkins
	1. docker pull jenkins/jenkins
	2. docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts		# Jenkins работает по технологии Master - Slave (Worker)
																		# Балланс нагрузки между Worker-ами
	Предпочтительно разворачивать Jenkins в контейнере
	
[00:19:33]	Обзор Jenkins
	
	Сборка - совокупность инструментов, которая позволяет решать определённые задачи

[00:22:42]	Сборка в Jenkins

	New Item (нажимаем)
	• Freestyle project
		Freestyle project - ключевая концепция Jenkins, с помощью которой можно настроить
							полный цикл сборки/тестирования/развёртывания приложения
	Вводим имя сборки (Enter an item name)
	
	• Pipeline: можно объединить несколько сборок в одну
	• Multi-configuration project
	• Folder
	• GitHub Organization
	• Multibranch Pipeline: можно создать проект из нескольких веток
	
	* Copy from [___]	ускоренное создание новой сборки на основе уже готовой сборки
	
[00:26:10]	Настройка сборки. Основные моменты.
	
	Описание сборки (Description):
		можно добавить URL-ссылку на GitHub-проект (чтобы сразу перейти на GitHub и посмотреть код)
			как правило добавляют ссылку HTTPS на проект (https://github.com/Eliseev-Max/<project>)
			ссылка станет доступна в карточке сборки
		можно настроить пермиссии на копирование артефактов (Permission to Copy Artifact)
		* !!! есть возможность параметризации сборок (This project is parameterised)!!!
		...
		Restrict where this project can be run - ограничить место запуска сборки
		Если существует несколько серверов сборки Jenkins (master, slaves), можно с помощью этого пункта указать,
		где именно будет запускаться конкретная сборка.
	
	Раздел Source Code Management
		Source Code Management - управление системой контроля версий (SCM):
		(где взять исходные файлы (исходный код) для сборки)
			• none
			• git		()
		URL репозитория (предпочтительно SSH)
		** Для того, чтобы попасть в закрытый репозиторий, нужно установить публичный и приватный ключи
		Приватный ключ сохраняется в Credentials
		Для публичных репозиториев не требуется дополнительных действий
		→ указываем ветку:
			Branches to build
				Branch Specifier (blank for 'any')
			Например, [    */master    ]
	
	Раздел Build Triggers
		Опция Триггеры сборки (Build Triggers) {="Когда запускать билды"}:
		[ ] Trigger builds remotely (e.g., from scripts)
		[v] Build after other projects are built → Запускать последующую сборку после завершения предыдущей
			Project to watch → (указываем имя первичной сборки)
			Условия запуска:
			• Запустить только если сборка стабильна (Trigger only if build is stabile)
			○ Запустить, даже когда сборка нестабильна (Trigger even if the build is unstable)
			○ Запустить, даже если сборка "упала" (Trigger even if the build fails)
			Stabile отличается от Unstabile количеством зафейлившихся билдов
		[ ] Build periodically (Запускать сборку по Crone)	\ ~ Планировщик задач
			Schedule
			[написать сценарий запуска]
		[ ] GitHub hook trigger for GITScm polling - позволяет следить за изменениями в GitHub
		При наличии изменений запускается сборка
		Настройка этой функции:
		GitHub → Settings → Webhooks → Добавить webhook в Payload URL:
			указываем URL до нашего Jenkins/github-webhook/
		Здесь же можно настроить, на какие события будет запускаться сборка
			• Just the push event
			○ Send me everything
			○ Let me select individual events
		[v] Active
		
		Poll SCM - опция, связанная с изменениями на GitHub. Она позволяет через определённое время
				   следить за изменениями, сравнивает текущую версию с содержимым репозитория на GitHub
				   Если изменения есть - запускает сборку.
		
	Раздел Build Environment (Среда сборки)
		Build Environment содержит опции для управления окружением
			[v] Delete workspace before build starts
				(Удаление workspace перед началом сборки)
				WORKSPACE - это локальный директорий на сервере с Jenkins,
						    на который забирается исходный код с репозитория GitHub 
			[v] Add timestamps to the Console Output
			workspace - это локальный директорий на сервере с Jenkins,
			куда git сохраняет все файлы с репозитория (GitHub, Bitbucket, ...)
			...
		[v] Добавить в лог метки времени (Add timestamps to the Console Output)
		
		Build - совокупность вариантов запуска различных действий (шагов) при сборке/запуске тестов
			* можно собирать Docker Images
			Выбираем: 	Execute Shell
			
			Есть исходный файл main.cpp
			Command:
			[g++ main.cpp -o simple-db]		# -o указать имя исполняемого (скомпилированного) файла
			
		► После компиляции приложения нужно сохранить артефакты
		Это осуществляется с помощью Post-build Actions [Archive the artifacts]
		
	Раздел Post-build Actions
			Артефакты (например, бинарные файлы) нужны для связи с другими сборками (использования внутри других сборок).
			Артефакты вписываются в Files to archive
			В нашем случае артефакт один: simple-db
		[Save] → Попадаем в меню нашей сборки
		
[timestamp]	Dashboard → <Наша_сборка>
		
		Build history пустая
		Workspace пустой
	Опции меню сборки:
		• Back to Dashboard
		• Status
		• Changes
		• Workspace
		• Build Now
		• Configure
		• Delete Project
		• GitHub Hook Log
		• GitHub
		• Rename
		
	Запускаем сборку нажатием Build Now
	
	Запускаем Bash внутри контейнера Jenkins:
		docker exec -it Jenkins bash
	Workspace расположен по следующему пути:
	/var/jenkins_home/workspace/<name_of_our_build>
	
[timestamp]	Сборка с тестами

	New Item → вводим db-test-ui
	Не выбираем Freestyle Project, копируем настройки из предыдущего билда.
	Вводим в (If you want to create a new item from other existing...) 
		Copy from: db-build-ui
		
	Некоторые настройки сохранены
	Нужно кое-что поменять:
	* [v] Build after other projects are built
		  Указать в Project to watch: db-build-ui
	Указав Project to watch, мы тем самым создали зависимость от результата прохождения
	предыдущей сборки.
	
	Опции раздела Build Environment
		Delete workspace before build starts
		Add timestamps to the Console Output
	оставляем активными.
	
	Шаги Build:
	
	Чтобы забрать артефакты предыдущей сборки:
	+ Add build step:
		• Copy artifacts from another project
		  Project name: db-build-ui
		[Latest success build]		# забираем артефакты из последнего успешного билда
		Лучше всего сохранять артефакты сборки в отдельном директории.
		В нашем случае создадим директорий build (Target directory: build)
		
		Execute shell: [
			PATH=$PATH:$PWD/build		# путь до директория с нашим билдом; добавили /build в переменную PATH,
										# чтобы иметь возможность запускать тестируемый бинарный файл по имени (./simple-db)
			echo $PATH					# проверяем путь
			python3 -m venv venv		# создаём виртуальное окружение
			venv/bin/pip3 install -r tests/requirements.txt		# установка необходимых зависимостей 
			venv/bin/pytest -v tests/test_simple_db.py --junitxml=report.xml
		]
	В данном билде нет артефактов, убираем из шаблона артефакты
		Сохраняем результаты в отдельном директории build:
			Target directory: build

[00::]	Пример запуска Jenkins при изменении в GitHub-репозитории
		Разработчик внёс изменения в код
					▼
		Изменения поступили на GitHub
					▼
		Jenkins отследил изменения и запустил сборку приложения
					▼
		Сборка приложения запустила сборку с тестами
		
[00:54:38]	View. Добавляем наглядность
	
	View позволяет визуализировать взаимосвязь между сборками
	
	Меню → New View
	View name: <Вводим имя>		# db-build-ui-view
	• Build Pipeline View		# наглядно показыв
	○ List View
	○ My View
	
	Внести изменения в Upstream / downstream config
	Select Initial Job
	[db-build-ui]			# Самый корневой проект, с которого начинается цепочка сборок
	
	В Display Options можно настроить частоту обновлений:
		Refresh frequency (in seconds)
	
	Результат: графическое представление взаимосвязи сборок [00:55:41]
	Можно запустить сборку

[00:56:29]	Allure integration
	
	Как настроить генерацию Allure-отчётов в Jenkins?
	1. Установить Allure Plugin
	2. Выполнить настройку "Allure Commandline" в Global Tool Configuration
	3. В настройках сборки в Post-build Actions добавить Allure Report
	4. В настройках Allure Report указать директорий, в котором хранятся данные,
	   сгенерированные адаптером для используемого тестового фреймворка, например, allure-pytest
	5. После завершения сборки посмотреть Allure-отчёт в разделе меню Allure Report
	
[00:57:45]	Как ставить плагины в Jenkins
	
	1. Меню → Manage Jenkins
	2. Manage Plugins → Available
	3. В фильтр вводим Allure Jenkins Plugin
	4. Ставим отметку в чекбоксе найденного варианта и нажимаем [Install without restart]
	   Download now and install after restart нужна в случае апдейта или удаления плагинов 

[00:59:21]	Выполнить настройку "Allure Commandline" в Global Tool Configuration
	
	1. Меню → Manage Jenkins → Global Tool Configuration
	2. Allure Commandline:
		• указать имя;
		• Install automatically
		    From Maven Central
			Version
			[2.13.9   ▼]
	3. Заходим в сборку → Configuration
		Добавить Post-build actions: Allure Report
		Results:
				Path: [$WORKSPACE/allure-results]			# Здесь будут храниться результаты
	В pytest.ini должна быть запись директории, куда будут сохраняться результаты
	Появляется ярлык-ссылка на Allure-отчёт
	
[01:06:50]	Pipeline
	
	Pipeline - описание процессов сборки/тестирования/развёртывания приложения по стадиям
	Jenkinsfile - текстовый файл с описанием pipeline, который может быть сохранён в репозитории проекта
	
	Синтаксис Jenkinsfile:
		• Declarative
		• Scripted

[01:08:10]	Элементы Pipeline
	
	Pipeline - код, который определяет CI/CD процессы, которые включают в себя
			  сборку приложения, тестирование и развёртывание
	Node - машина, которая является частью Jenkins-окружения и на которой может выполняться pipeline
	Stage - блок, определяющий набор подзадач, которые выполняются в рамках pipeline, например, "Build", "Test" и "Deploy"
	Step - отдельная задача, которая сообщает Jenkins, что нужно делать в конкретный момент времени
	
	Пример:
	Stage Report:
		► Step_1: генерация xml-отчёта
		► Step_2: генерация Allure-отчёта
	
[01:09:22]	Declarative Pipeline
	
	Использует упрощённый синтаксис для описания pipeline
	Менее гибкий по сравнению с Scripted Pipeline
	Подходит для начинающих пользователей, которым нужно создавать относительно простые pipelines
	
	${YOUR_JENKINS_URL}/directive-generator/ - генератор сниппетов для Declarative Pipeline
	В нём можно строить отдельные директивы на основе UI
	
	В Declarative-синтаксисе root-ом является pipeline
	
	pipeline {
		agent any
		
		stages {
			stage('build') {
				steps {
					sh 'g++ main.cpp -o simple-db'
					
				}
				
			}
		stage('test') {
			steps {
				sh """
					PATH=$PATH:$WORKSPACE
					python3 -m venv venv
					. venv/bin/activate
					pip3 install -r tests/requirements.txt
					pytest -v ...
			}
		
		}
		stage('report') {
			...
		}
		stage('email') {
			...
		}
	}

	Dashboard → Enter an item name: db-declarative-pipeline
		Выбрать Pipeline
	Перешли на страницу настройки
	Pipeline: Definition
		[Pipeline script from SCM]
	
	Указываем Git 
		Repositories
			Repository URL
				[ссылка_SSH_на_GitHub]
	...
	Script path
	ci/Jenkinsfile_declarative 			# путь до файла конфигурации
	
	SAVE
	
	Запуск Pipeline
	Stage View
		Наглядно показаны в UI все стэйджи
	
[01:16:32]	Scripted Pipeline
	
	• Использует DSL, основанный на Groovy;
	• Обладает максимальной гибкостью;
	• Подходит для продвинутых пользователей, которым нужно создавать более сложные pipelines
	
	${YOUR_JENKINS_URL}/pipeline-syntax - генератор сниппетов для Scripted Pipeline
	https://www.jenkins.io/doc/book/pipeline/#pipeline-example
	
	Jenkins_scripted похож по синтаксису на Jenkinsfile_declarative
	Отличия:
		root-элемент = node
		явно прописывается checkout из репозитория,
		stage('build'), stage('test'), stage('report-xml'), stage('report-allure')
	
	Результат Pipeline выполнен в виде наглядных шагов = объединённых сборок

[01:20:38]	Jenkins Job Builder (JJB)
	
	Plugins
		• Copy Artifact - копирование артефактов из другой сборки
		• Test Results Analyzer - анализ результатов тестов
		• Build Pipeline - удобное отображение upstream/downstream сборок
		• Git Changelog - отображение информации о коммите
		• Docker - Docker-контейнеры в качестве executors
		• Docker slaves - Docker-контейнеры для установки build-агентов
		• Email Extension - гибкая настройка отправки email
		• Job Configuration History - изменения в настройках сборок
	
[01:23:58]	Jenkins Job Builder (JJB) - утилита, которая с помощью описаний сборок в форматах YAML или JSON
								  позволяет настраивать сборки на jenkins-сервере
	Описания сборок можно хранить в репозитории, что позволяет удобно вносить и отслеживать изменения 
	в настройках сборок
	
	В Jenkins Job Builder поддерживаются шаблоны, что позволяет легко создавать описания для нескольких однотипных сборок
	
	По сути это обычный пакет python
	
	Установка и конфигурирование
	‼ НЕ УСТАНАВЛИВАТЬ С ПОМОЩЬЮ apt-get install!!!
		- sudo apt-get install jenkins-job-builder ---WRONG!
		
		$ pip install --user jenkins-job-builder
	Нужен отдельный пользователь с определёнными правами
	+ можно всё это добавить в конфигурационный файл и не вводить
	
	Конфигурационный файл
	jenkins_jobs.ini - файл для настройки взаимодействия с Jenkins-сервером
	1. Создадим директорий jenkins_jobs
		$ mkdir /etc/jenkins_jobs
	2. В созданном директории создадим файл: jenkins-jobs.ini
		$ vim /etc/jenkins_jobs/jenkins-jobs.ini
	3. заполнить ini-файл:
		[jenkins]
		user=eliseev
		password=<token_from_API>
		url=http://172.29.24.22:8080
		query_plugins_info=False
	  
	####  Чтобы найти токен, ввести в адресной строке браузера:
	//http://172.29.24.22:8080/me/configure
	Можно создать API Token
		Token created on 2023-02-07T19:19:47.432063+05:00
		11b992dec72217c2a8bf3915d80652fac6
	
	4. Создадим директорий jobs
		/etc/jenkins_jobs/jobs/
	5. В созданом директории создадим yaml-файл

# Пример простейшего yaml-файла с конфигурацией Jenkins Job

- job:
	name: test_job
	description: 'Automatically generated test'
	project-type: freestyle
	builders:
	  - shell: 'ls'
	6. Сохраняем yaml-файл и переходим в родительский директорий относительно jobs/ (?)
	7. $ jenkins-jobs update jobs

Удаление старых задач
Создание шаблонов
		↓↓↓
{ https://youtu.be/SoP05dLe5kA }
		↑↑↑
	
[01:25:46]	Running
	
	• Test Mode
		jenkins-jobs test ci/foo.yaml		# Проверка на синтаксические ошибки
		jenkins-jobs test -r ci

	• Updating jobs
		jenkins-jobs update ci/foo.yaml
		jenkins-jobs update ci/foo.yaml Foo1 Foo2
	
	• Deleting jobs
		jenkins-jobs delete Foo1 Foo2

[01:25:51]	Описание сборок в yaml-файле
[01:30:35]	Как запустить создание сборок с помощью технологии JJB
	
	$ jenkins-jobs update <путь до YAML-файла>
	В Jenkins появляются описанные сборки
	
	Для автоматизации процесса создания сборок и повышения отказоустойчивости:
		► использовать Pipeline или YAML (JJB)

[01:39:09]	Как прокидывать параметры в сборки
	
	Сборка с тестами → Configure → Вкладка General:
		[v] This project is parameterised
			[Add Parameter ▼]
	Выбираем, например, Choise Parameter
		Name: threads
		Choices					# количество потоков по количеству ядер
			[
				auto
				1
				2
			]
	Параметризация производится в Execute shell: Command
	Для параметра pytest -n ${threads}		# параметр указывается в ${}
	
	В сборке появляется пункт: Build with parameters
	