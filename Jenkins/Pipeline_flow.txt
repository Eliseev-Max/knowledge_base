Поток выполнения конвейера.
Инициирование заданий. Триггеры.

Чтобы указать инициирующие события для кода конвейера, существует 3 подхода:
	• при работе в самом приложении Jenkins: раздел "Общая конфигурация" в веб-интерфейсе;
	• Scripted Pipeline: указать блок свойств (обычно до начала конвейера), который определяет триггеры в коде
	  (‼ этот раздел свойств будет объединён с любыми свойствами, определёнными в веб-интерфейсе;
	   ‼ приоритет - у веб-интерфейса)
	• Declarative Pipeline: существует специальная директива triggers → определение того, что должен запускать конвейер

► Сборка после того, как собраны другие конвейеры ◄
	
	Можно выбрать конечный статус для сборки других проектов:
	♦ стабилен
	♦ нестабилен
	♦ неудачный

Scripted Pipeline: запуск конвейера после успешно завершённой задачи ('build_iec61850_tester_image'):

properties([
	pipelineTriggers([
		upstream(
			threshold: hudson.model.Result.SUCCESS,
			upstreamProjects: 'build_iec61850_tester_image'			# можно перечислить несколько заданий через запятую 
																# можно указать ветку для разветвлённого задания: build_iec61850_tester_image/master
		)
	])
])

► Собирать периодически

	= тип функциональности cron для запуска заданий через определённые промежутки времени.
	‼ Вариант неоптимален для непрерывной интеграции.
	В CI сборки основаны на обнаружении обновлений в управлении исходным кодом.
	
	Синтаксис cron:
	[cron('M H d m wd')], где
	M - желаемое значение минут в течение часа (0 - 59)
	H - желаемое значение часов в течение дня (0 - 23)
	d - желаемый день месяца (1 - 31)
	m - желаемый месяц года (1 - 12)
	wd - желаемый день недели (0 - 7),  # 0 и 7 - это воскресенье
	
	Синтаксис */<val> == "каждые val"
	[cron('*/10 * * * *')] = каждые 10 минут часа
	
	Пример синтаксиса в конвейере:
	  Scripted Pipeline:
		properties([pipelineTriggers([cron('0 9 * * 1-5')])])
	
	  Declarative Pipeline
	    triggers{ cron(0 9 * * 1-5)}		# Запуск в 9 часов с пнд по птн

	# Можно указать в качестве значения символ H (== хеш проекта).
	# "H" использует хеш имени проекта в пределах диапазона, чтобы сгенерировать уникальное значение смещения.
	# Затем это значение прибавляется к наименьшему значению диапазона
	# → избегаем одновременного запуска нескольких проектов, использующих cron
	# использование H:
	#	♦ H/<value>				- каждый определённый промежуток времени
	#	♦ H(<val1>,<val2>)		- с несколькими значениями
	#	♦ H(1-15)				- с диапазоном

	Пример:
	// сканируем на наличие изменений SCM с 20-минутным интервалом
		triggers{ polSCM( */20 * * * *)}
	
	// Запуск сеанса конвейера в какой-то момент между 0 и 30 минутами после часа
		triggers{ cron(H(0,30) * * * *)}

########################################
## Как ссылаться на параметры задания ##
########################################
	params.<Имя_параметра>
	При вставке в steps: ${params.имя_параметра}
	‼ Параметры можно задать:
	• в веб-интерфейсе ([v] 'Это - параметризованная сборка')
	• в блоке parameters (между agent и stages{}) - Declarative pipeline
	○ properties([parameters([...])]) - Scripted pipeline