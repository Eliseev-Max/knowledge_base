Jenkins Job Builder (JJB) - утилита, которая с помощью описаний сборок в форматах YAML или JSON
							позволяет настраивать сборки на jenkins-сервере
	Описания сборок можно хранить в репозитории, что позволяет удобно вносить и отслеживать изменения 
	в настройках сборок
	В Jenkins Job Builder поддерживаются шаблоны → можно легко создавать описания для нескольких однотипных сборок.
	Представляет собой обычный пакет python
	
	Установка и конфигурирование
	‼ НЕ УСТАНАВЛИВАТЬ С ПОМОЩЬЮ apt-get install!!!
	НЕПРАВИЛЬНО: $ sudo apt-get install jenkins-job-builder ---WRONG!
		
	ПРАВИЛЬНО:	 $ pip install --user jenkins-job-builder
	
	(Нужен отдельный пользователь с определёнными правами)
	
	+ можно всё это добавить в конфигурационный файл и не вводить
	
	Конфигурационный файл: jenkins_jobs.ini = файл для настройки взаимодействия с Jenkins-сервером
	
Создание и конфигурирование jenkins_jobs.ini:
	1. Создадим директорий jenkins_jobs
		$ mkdir /etc/jenkins_jobs
	2. В созданном директории создадим файл: jenkins-jobs.ini
		$ vim /etc/jenkins_jobs/jenkins-jobs.ini
	3. заполнить ini-файл:
		[jenkins]
		user=eliseev
		password=<token_from_API>
		url=http://172.29.24.22:8080
		query_plugins_info=False
	  
	####  Чтобы найти токен, ввести в адресной строке браузера:
	//http://172.29.24.22:8080/me/configure
	Можно создать API Token
		Token created on 2023-02-07T19:19:47.432063+05:00
		11b992dec72217c2a8bf3915d80652fac6
	
	4. Создадим директорий jobs
		/etc/jenkins_jobs/jobs/
	5. В созданом директории создадим yaml-файл

# Пример простейшего yaml-файла с конфигурацией Jenkins Job

- job:
	name: test_job
	description: 'Automatically generated test'
	project-type: freestyle
	builders:
	  - shell: 'ls'
	6. Сохраняем yaml-файл
	‼ Можно указать:
		- путь к одному .yaml-файлу;
		- каталог с .yaml и/или .json файлами
	* если выбираем каталог, все файлы .yaml/.yml или .json в этом каталоге будут прочитаны, и все задания, которые они определяют, будут созданы или обновлены
	
	7. $ jenkins-jobs update jobs

Основные типы объектов, которые понимает JJB
	
	Пример конфигурацинного файла:
	
- job:
    name: job-name
    project-type: freestyle
    defaults: global
    description: 'Do not edit this job through the web!'
    disabled: false
    display-name: 'Fancy job name'
    concurrent: true
    workspace: /srv/build-area/job-name
    quiet-period: 5
    block-downstream: false
    block-upstream: false
    retry-count: 3
    node: NodeLabel1 || NodeLabel2
    logrotate:
      daysToKeep: 3
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1

Пояснение параметров джобы:
    • name - название джобы
	
    • project-type - тип проекта.
		По умолчанию "freestyle".
		можно указать:
		  ♦ maven
		  ♦ multijob
		  ♦ flow
		  ♦ pipeline
		  ♦ externaljob
		  
    • defaults 
		Определяет набор значений по умолчанию, которые будут использоваться для этого задания.
		По умолчанию "global".
		Если у нас есть значения, общие для всех заданий (джоб), можно создать глобальный объект Defaults для их хранения.
		Дальнейшая настройка отдельных заданий не потребуется.
		Если некоторые задания не должны использовать глобальные значения по умолчанию,
		используйте это поле, чтобы указать другой набор значений по умолчанию.
	
    • description - описание джобы.
		По умолчанию устанавливается значение: “!– Managed by Jenkins Job Builder”
		
    • disabled - задание выключено
		disabled: false  (по умолчанию) задание включено
		disabled: true  = задание выключено
		
    • display-name - отображаемое имя
		Необязательное имя, отображаемое для проекта в Web GUI Jenkins вместо фактического имени задания.
		‼ Инструмент jenkins_jobs не может полностью удалить этот признак после его установки, поэтому будьте осторожны при его установке.
		Установка значения в ту же строку, что и имя задания, является эффективным обходным решением для снятия установки.
		В качестве альтернативы поле можно очистить вручную с помощью веб-интерфейса Jenkins.
    
	• concurrent: true
		Булево значение для установки того, может ли Jenkins выполнять это задание одновременно.
		По умолчанию значение равно false
    • workspace - рабочее пространство
		Путь для пользовательского рабочего пространства.
		По умолчанию используется конфигурация по умолчанию Jenkins
		
	• folder
		Атрибут folder предоставляет альтернативу использованию '<path>/<name>' в качестве имени задания, 
		чтобы указать, в какую папку Jenkins загружать задание.
		‼ Требуется плагин Jenkins CloudBees Folders Plugin
		
	• child-workspace
		Путь для дочернего пользовательского рабочего пространства.
		По умолчанию используется конфигурация Jenkins default.
		Этот параметр действителен только для заданий матричного типа.

	• quiet-period
		Количество секунд, которое должно пройти между последовательными запусками этого задания.
		По умолчанию равно 0
		
    • block-downstream
		(Boolean): должно ли это задание блокироваться во время выполнения заданий ниже по потоку.
		Задания нисходящего потока определяются транзитивно. По умолчанию имеет значение false.

    • block-upstream
		(Boolean): должно ли это задание блокироваться во время выполнения заданий в восходящем потоке.
		Задания восходящего потока определяются транзитивно.
		По умолчанию имеет значение false.
		
	• auth-token
		Указывает маркер аутентификации, который позволяет запускать новые сборки путем обращения к специальному предопределенному URL.
		Только те, кто знает этот токен, смогут запускать сборки удаленно.
		
    • retry-count - количество попыток
		Если сборку не удается извлечь из хранилища, Jenkins повторит попытку указанное количество раз, прежде чем сдаться.
		
    • node
		Ограничить, где может быть запущено это задание.
		Если есть группа машин, на которых может быть собрана джоба, вы можете указать этот ярлык в качестве узла для привязки,
		что заставит Jenkins собрать джобу на любой из машин с этим ярлыком.
		Для матричных проектов этот параметр ограничивает только место выполнения родительского задания.

    • logrotate
		Раздел Logrotate позволяет автоматически удалять старую историю сборки.
		Он добавляет атрибут logrotate к определению задания.
		Все атрибуты logrotate по умолчанию имеют значение "-1" (сохранить навсегда).
		‼ Исправлено на jenkins >=1.637: вместо этого используйте свойство build-discarder.

	• jdk - Имя jdk для использования
		
	• raw
		Если присутствует, этот раздел должен содержать единственную запись xml.
		Этот XML будет вставлен на верхнем уровне определения задания.

Последовательность модулей в задании JJB:

	1. parameters/properties
	2. scm
	3. triggers
	4. wrappers
	5. prebuilders (maven only, configured like Builders)
	6. builders (maven, freestyle, matrix, etc..)
	7. postbuilders (maven only, configured like Builders)
	8. publishers/reporters/notifications

Шаблоны заданий (Job Template)
Если вам нужно определить несколько заданий, которые практически идентичны, за исключением, возможно, имен, целей SCP и т.д.,
то вы можете использовать Шаблон задания, чтобы указать особенности задания, а затем использовать Проект для реализации задания с соответствующей заменой переменных.
Любые переменные, не указанные на уровне проекта, будут унаследованы от Defaults.

Шаблон задания имеет тот же синтаксис, что и задание, но вы можете добавлять переменные в любом месте определения.
Переменные обозначаются заключением в фигурные скобки, например, {name} подставляет имя переменной.
При использовании переменной в строковом поле рекомендуется заключать всю строку в кавычки, даже если правила синтаксиса YAML этого не требуют, поскольку значение переменной может потребовать кавычек после подстановки.
В редких случаях, когда необходимо заключить в скобки литералы внутри шаблона (например, определение функции оболочки в конструкторе), удвоение скобок предотвратит их интерпретацию как переменной шаблона.

Вы должны включить переменную в поле имени шаблона задания (иначе все экземпляры будут иметь одинаковое имя).
Например:

- job-template:
    name: '{name}-unit-tests'

# Не приведет к созданию какого-либо задания в Jenkins, однако определит шаблон, который вы можете использовать для создания заданий с определением проекта.
# Его название будет зависеть от того, что будет предоставлено в Проект.

Если вы используете переменную {template-name}, то имя самого шаблона (например, {name}-unit-tests в приведенном выше примере) будет подставлено.
Это полезно в тех случаях, когда необходимо отследить задание до его шаблона.

Иногда полезно использовать один и тот же формат имени задания, даже если содержимое шаблона может отличаться.
ID предоставляют механизм для поддержки таких случаев использования в дополнение к упрощению ссылок на шаблоны, когда имя содержит более сложную подстановку со значениями по умолчанию.

Значения по умолчанию для переменных шаблонов

Чтобы облегчить повторное использование шаблонов с большим количеством переменных, которые можно заменять, но в большинстве случаев требуется одно и то же значение или вообще не требуется, можно задать значения по умолчанию для переменных в самих шаблонах.

JJB позволяет нам определить значения по умолчанию для параметра в шаблоне задания двумя способами.

	1. Определение значения переменной по умолчанию в самом шаблоне задания
		При этом способе мы объявляем значение переменной по умолчанию в самом шаблоне задания всего один раз.
		Мы можем разделить шаблон задания на две секции следующим образом:
	
- job-template:
	name: '{project-name}-verify'

	#####################
	# Variable Defaults #
	#####################

	branch: master

	#####################
	# Job Configuration #
	#####################

	parameters:
	  - string:
		  name: BRANCH
		  default: '{branch}'

	scm:
	  - git:
		  refspec: 'refs/heads/{branch}'

	В этом случае для шаблона задания по-прежнему существует два определения ветви.
	Однако мы также предоставляем значение по умолчанию для переменной {branch} в верхней части файла.
	Только один раз. Это будет значение, которое примет задание, если оно не будет передано проектом, использующим шаблон.
	
	2. Использование {var|default}
		В этом методе мы можем определить значение по умолчанию с помощью определения переменной.
		Например:
	
	- job-template:
		name: '{project-name}-verify'
		parameters:
		  - string:
			  name: BRANCH
			  default: '{branch|master}'
	
	‼ Данный метод не подходит, если требуется использовать одну и ту же переменную JJB в нескольких местах,
	поскольку у нас будет несколько мест для определения значения по умолчанию для шаблона.
	Например:
	
- job-template:
    name: '{project-name}-verify'
    parameters:
      - string:
          name: BRANCH
          default: '{branch|master}'

    scm:
      - git:
          refspec: 'refs/heads/{branch|master}'
	
	# В данном случае переменная {branch|master} определена в двух местах. Не идеально.

Более сложный пример:

- project:
    name: template_variable_defaults
    jobs:
        - 'template-variable-defaults-{num}':
            num: 1
            disabled_var: true
        - 'template-variable-defaults-{num}':
            test_var: Goodbye World
            num: 2

- job-template:
    # template specific defaults
    # empty value causes disabled_var to be ignored internally
    disabled_var:
    test_var: Hello World
    type: periodic

    # template settings
    name: 'template-variable-defaults-{num}-{type}'
    id: 'template-variable-defaults-{num}'
    disabled: '{obj:disabled_var}'
    builders:
      - shell: |
         echo "Job Name: template-variable-defaults-{num}-{type}"
         echo "Variable: {test_var}"
	
	# Использование значения по умолчанию для переменной, используемой в имени, было бы необычным, если только оно не дополняет другую переменную.
	# Однако вы можете использовать Ids для упрощения таких случаев.
	
	
---
https://jenkins-job-builder.readthedocs.io/en/latest/definition.html
---
Удаление старых задач
Создание шаблонов
	
	Running
	
	• Test Mode
		jenkins-jobs test ci/foo.yaml		# Проверка на синтаксические ошибки
		jenkins-jobs test -r ci

	• Updating jobs
		jenkins-jobs update ci/foo.yaml
		jenkins-jobs update ci/foo.yaml Foo1 Foo2
	
	• Deleting jobs
		jenkins-jobs delete Foo1 Foo2

	
	$ jenkins-jobs update <путь до YAML-файла | каталога с .yaml, .yml, .json файлами>
	В Jenkins появляются описанные сборки
	
	Для автоматизации процесса создания сборок и повышения отказоустойчивости:
		► использовать Pipeline или YAML (JJB)

		↓↓↓
{ https://youtu.be/SoP05dLe5kA }
		↑↑↑