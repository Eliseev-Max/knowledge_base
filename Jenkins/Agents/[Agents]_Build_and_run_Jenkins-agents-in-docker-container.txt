Docker-Composed Jenkins agents

1) "How to Install and Run Jenkins With Docker Compose":
--> https://www.cloudbees.com/blog/how-to-install-and-run-jenkins-with-docker-compose

2) "How to Setup Docker Containers as Build Agents for Jenkins":
--> https://devopscube.com/docker-containers-as-build-slaves-jenkins/

3) → "Configuring the SSH Build Agents plugin": ←
--> https://github.com/jenkinsci/ssh-agents-plugin/blob/main/doc/CONFIGURE.md
↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

3+) https://plugins.jenkins.io/ssh-slaves/

[BASE] "Pipeline Syntax": https://www.jenkins.io/doc/book/pipeline/syntax/


***
  Одна из самых мощных функций Jenkins - возможность распределять задания по нескольким nodes.
  Контроллер Jenkins отправляет задания соответствующему агенту
  в зависимости от:
    * требований к заданию
    * доступных на данный момент ресурсов.

  Хотя можно запускать задания на контроллере,
[!] считается, что лучше ВСЕГДА СОЗДАВАТЬ ХОТЯ БЫ ОДНОГО АГЕНТА
    и ЗАПУСКАТЬ задания НА НЁМ.

  Используем Docker Compose для этого

# В УЧЕБНЫХ ЦЕЛЯХ для простоты контейнеры будут запускаться от имени root.

*********************************_PRODUCTION_********************************
* В production-среде вы добавите пользователя jenkins с UID 1000 в системы, *
* на которых работают контроллеры и агенты Jenkins.                         *
*****************************************************************************


#######################################
# Running Jenkins With Docker Compose #
#######################################

---<Example: docker-compose.yaml>---
version: '3.8'
  services:
    jenkins:
      image: jenkins/jenkins:lts
      privileged: true
      user: root
      ports:
        - 8080:8080
        - 50000:50000
    container_name: jenkins
    volumes:
      - /home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
---
#[!] Обратил внимание на privileged: true
№ т.е. контейнер запускается в привилегированном режиме ( = с правами root).


############################################
# Adding Jenkins Agent With Docker Compose #
############################################

1) Сгенерируем пару SSH ключей,
   с помощью которых контроллер сможет получить доступ к агенту через SSH.

2) Создадим Compose-файл

---<Example: Compose file with agent>---
version: '3.8'
services:
  jenkins:
    image: jenkins/jenkins:lts
      privileged: true
      user: root
      ports:
        - 8080:8080
        - 50000:50000
    container_name: jenkins
    volumes:
      - /home/${myname}/jenkins_compose/jenkins_configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

  agent:
    image: jenkins/ssh-agent:jdk11
    privileged: true
    user: root
    container_name: ssh-agent
    expose:
      - 22
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=<ssh-rsa public key>
---

*************************************************************************************
*                       [!] JENKINS_AGENT_SSH_PUBKEY:                               *
* 1) Добавьте точное содержимое текстового файла, включая префикс ssh-rsa в начале. *
* 2) НЕ ЗАКЛЮЧАЙТЕ ЕГО В КАВЫЧКИ.                                                   *
*************************************************************************************

!!!!!!!!!!!!!
! ЗАМЕЧАНИЕ !
!!!!!!!!!!!!!

К агенту jenkins/ssh-agent:[TAG], запущенному с помощью docker compose вместе с контроллером Jenkins,
НЕ УДАЛОСЬ подключиться с контроллера Jenkins
#(Jenkins Dashboard -> Настроить Jenkins -> Nodes).
Я пытался подключиться по сети docker: (docker container)<-->(docker container)
expose <port> не сработал...

[РЕШЕНИЕ:]
Был запущен отдельный контейнер jenkins/ssh-agent
# Команда запуска SSH-агента:
---
docker run -d --rm \
            --name=ssh-agent \
            --publish 2200:22 --network keeper_build_keeper-network \
            -e "JENKINS_AGENT_SSH_PUBKEY=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCXhzpOTKJCvVoGaQQlTtDxux48t7jihg2NoKBrDlV7047vi9TdJ7tFZaSUMAzXz93jwT4ATS2KA46eEJgiIZrny8Npa4HLInDGgkzbqsgL1Zf6BG7AEt33q3GMCW7ERyp3ap8c20cV/lmRyYfO0utju29zMWaaDNA6MqIl5FRMTjHknHQ3cVwhDaYTdbU1Cl4PcydwBBEQIgF0aV84XFDzEhqD9K6uRErbGZGSkFJoQwTIOFRgpSuEQ4EIcoX2lcjqq5OLJDzcmKOyS8cnixqfYZVggF8iXlWZLi8bH8aKvbYF8cP9i8FL2hN1QzwUq+SaQnI7e8V+ydCT4/9MY91sZz6SrMta7aHQFFs+xG1VRFlFd8G0h2snn5eSWZpmP4f0LkE3KIGWbKJ1Euk40JXWCayFreq2pAycqdGFcr0pb8XhdGdYxwqjMLNT5t26MtKb1ewdimEtIIaeNn2C9euoCpnM/ROe5gSerMz7pxTAkAeFugFapiqh1/mMAmXUG8c= devops@srv-cicd" \
            jenkins/ssh-agent:latest-debian-jdk17
---
## Комментарии:
1) Контейнер был запущен в фоновом режиме (-d)
2) После остановки (завершения процесса) контейнер должен быть удалён (--rm)
3) Опубликован порт контейнера: (Container):22 -> (Host):2200
4) На всякий случай попытался подключить контейнер к сети docker-compose
5) При настройке узла/агента на стороне контроллера (JENKINS/Настроить_Jenkins/Nodes/ssh-agent) указал
{
  Удалённая корневая директория: /home/jenkins/agent
  Способ запуска: Launch agents via SSH
    [ Host: внешний IP-адрес сервера,
      Credentials: ID приватного ключа SSH (заранее настроенного в Jenkins),
      Host Key Verification Strategy: Non verifying Verification Strategy,
      Расширенные {
        Port: 2200
      }
    ]
  Доступность: "Держать этот агент подключенным, насколько это возможно"
}
   

########################################################
# Добавление нового агента в Jenkins UI на контроллере #
########################################################

  1) [Manage Jenkins] -> [Manage Nodes and Clouds]
  2) Click (New Node)
  3) Определяем агента Jenkins
    3.1 В верхней части формы задать имя агента и установите корневой каталог Remote в /home/jenkins/agent.
    3.2 в следующей части формы выбрать 'Использовать этот узел как можно чаще' в разделе Использование.
    3.3 В разделе "Способ запуска" выбрать: "Launch agents via SSH"
    3.4 В поле Host введите agent.
        (Каждый контейнер может связаться с другими, используя имена своих контейнеров в качестве имен хостов)

    3.5 Далее щелкнуть выпадающий список в разделе "Credentials"
        и выберите тот, который вы только что определили.
    3.6 Теперь в разделе "Host Key Verification Strategy" выберите "Non verifying Verification Strategy"
[Advanced:]
  Нажать кнопку "Advanced"
  -> откроется страница расширенных настроек

[!] You need to change one setting here!
[!] Set the JavaPath to:
---
#/usr/local/openjdk-17/bin/java
---
# в примере: /usr/local/openjdk-11/bin/java
#[!] А в контейнере на самом деле путь $JAVA_HOME такой:  /opt/java/openjdk
---
/opt/java/openjdk/bin/java
---

**********************
* Что такое JavaPath *
**********************

  Этот путь java будет использоваться для запуска jvm. (/mycustomjdkpath/bin/java )
  Если он пуст, Jenkins будет искать команду java в агенте.

  Выражения типа $key или ${key} могут быть объявлены в java Path
  и будут расширены до значений соответствующих ключей, объявленных в списке переменных окружения этого узла,
    <или>
  если их нет => в списке глобальных переменных окружения.


Нажмите кнопку Save внизу, и теперь пришло время посмотреть, как запускается агент.
Jenkins вернет вас к списку узлов. Щелкните на имени вашего нового узла.
Затем щелкните на Log в меню слева.
Самая важная запись, которую вы увидите, - Agent successfully connected and online.
Но если вы посмотрите на другие записи, то увидите много информации о вашем агенте, включая SSH-ключ.


---
version: "3.3"

services:

  jenkins-agent-deb:
    restart: always
    image: jenkins/agent:bookworm-jdk17
    privileged: true
    user: root
    container_name: agent_debian
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMPtNkZB0CAaQYIAxsuZIAmp17tG7yB38rSztRSxWeqwkKEUvVhAgouzZmQX+bTdI7jUyIFQFknQ9g5PVHlgzkU= devops@srv-cicd
    expose:
      - 22
    networks:
      - keeper-network

  jenkins-agent-alpine:
    restart: always
    image: jenkins/agent:bookworm-jdk17
    privileged: true
    user: root
    container_name: agent_alpine
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMPtNkZB0CAaQYIAxsuZIAmp17tG7yB38rSztRSxWeqwkKEUvVhAgouzZmQX+bTdI7jUyIFQFknQ9g5PVHlgzkU= devops@srv-cicd
    expose:
      - 22
    networks:
      - keeper-network

  jenkins-agent-multiplatform:
    restart: always
    image: jenkins/agent:jdk17
    privileged: true
    user: root
    container_name: agent_multiplatform
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMPtNkZB0CAaQYIAxsuZIAmp17tG7yB38rSztRSxWeqwkKEUvVhAgouzZmQX+bTdI7jUyIFQFknQ9g5PVHlgzkU= devops@srv-cicd
    expose:
      - 22
    networks:
      - keeper-network

networks:
  keeper-network:

---

agent { node { label 'labelName' } }


