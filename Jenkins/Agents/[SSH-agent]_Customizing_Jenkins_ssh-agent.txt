Кастомизация образа jenkins/ssh-agent:latest-debian-jdk17

[sources:]
  1) "Install Docker Engine on Debian": https://docs.docker.com/engine/install/debian/
  2) "Docker image for Jenkins agents connected over SSH": https://hub.docker.com/r/jenkins/ssh-agent

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
## Если кастомизируешь базовый образ jenkins/ssh-agent, в конце всех настроек USER должен быть root
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

**************************************
* Установка Docker внутри SSH-агента *
**************************************

  Поскольку образ SSH-агента Jenkins основан на Debian GNU/Linux ver.12,
  рассмотрим официальную инструкцию по установке Docker Engine для Debian:

---<Firewall limitations>---
Если вы используете ufw или firewalld для управления настройками брандмауэра, имейте в виду:
[!] при открытии портов контейнера с помощью Docker эти порты БУДУТ ОБХОДИТЬ ВАШИ ПРАВИЛА брандмауэра.
Дополнительные сведения см. в разделе Docker и ufw: https://docs.docker.com/network/packet-filtering-firewalls/#docker-and-ufw

Docker совместим только с iptables-nft и iptables-legacy.
Правила брандмауэра, созданные с помощью nft, не поддерживаются в системе с установленным Docker.
Убедитесь, что все используемые вами наборы правил брандмауэра созданы с помощью iptables или iptables6,
и добавьте их в цепочку DOCKER-USER.
(см. раздел "Фильтрация пакетов и брандмауэры": https://docs.docker.com/network/packet-filtering-firewalls/
---

---<Решаем вопрос с несовместимостями. Удаляем старые версии>---
Прежде чем устанавливать Docker Engine, необходимо удалить все конфликтующие пакеты.
  (Сопровождающие дистрибутивы предоставляют неофициальные дистрибутивы пакетов Docker в своих репозиториях.
   Перед установкой официальной версии Docker Engine необходимо удалить эти пакеты.
  )
К неофициальным пакетам, которые необходимо удалить, относятся:
  ● docker.io
  ● docker-compose
  ● docker-doc
  ● podman-docker

[!] Кроме того
  Docker Engine зависит от containerd и runc.
  Docker Engine объединяет эти зависимости в один пакет: containerd.io.
  Если вы ранее устанавливали containerd или runc, УДАЛИТЕ ИХ,
  чтобы избежать конфликтов с версиями, поставляемыми с Docker Engine.

  Выполните следующую команду, чтобы удалить все конфликтующие пакеты:
$ for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

# apt-get может сообщить, что у вас не установлен ни один из этих пакетов.
---

[!] * Образы,
    * контейнеры,
    * тома
    * и сети,
    хранящиеся в каталоге /var/lib/docker/,
    НЕ УДАЛЯЮТСЯ АВТОМАТИЧЕСКИ при деинсталляции Docker.

  Если вы хотите начать с чистой установки и предпочитаете очистить все существующие данные,
  прочтите раздел "Деинсталляция Docker Engine": https://docs.docker.com/engine/install/debian/#uninstall-docker-engine

[Методы установки:]

  1) Docker Engine поставляется в комплекте с Docker Desktop для Linux.
     # Это самый простой и быстрый способ начать работу.
     (https://docs.docker.com/desktop/install/linux-install/)
  
  2) Настройте и установите Docker Engine из репозитория apt компании Docker.
    (https://docs.docker.com/engine/install/debian/#install-using-the-repository)

  3) Установите его вручную и управляйте обновлениями вручную.
    (https://docs.docker.com/engine/install/debian/#install-from-a-package)

  4) Используйте удобный скрипт.
    # Рекомендуется только для сред тестирования и разработки.
    (https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script)


[Install using the apt repository]

[!] Перед первой установкой Docker Engine на новую хост-машину необходимо настроить репозиторий Docker apt.
  После этого вы сможете устанавливать и обновлять Docker из репозитория.

1) Set up Docker's apt repository.
---[CMD]---
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
---

2) Install the Docker packages.
---
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
---

---<Dockerfile version>---
RUN apt-get update && apt-get install ca-certificates curl \
    && install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
RUN echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null \
  && apt-get update \
  && apt-get install docker-ce \
             docker-ce-cli \
             containerd.io \
             docker-buildx-plugin \
             docker-compose-plugin
---

[!] Если вы используете производный дистрибутив, например Kali Linux,
    вам может потребоваться заменить часть этой команды, которая должна выводить кодовое имя версии:
---
$(. /etc/os-release && echo "$VERSION_CODENAME")
---
# Замените эту часть на кодовое имя соответствующего выпуска Debian, например, bookworm.

3) Убедитесь, что установка прошла успешно, запустив образ hello-world:
$ (sudo) docker run --rm hello-world


**************************
* Install from a package *
**************************
(https://docs.docker.com/engine/install/debian/#install-from-a-package)

## Этот метод интересен тем, что позволяет устанавливать docker на хост, не подключенный к Интернет.
{ Пакеты, которые необходимо скачать:
  ● containerd.io_<version>_<arch>.deb
  ● docker-ce_<version>_<arch>.deb
  ● docker-ce-cli_<version>_<arch>.deb
  ● docker-buildx-plugin_<version>_<arch>.deb
  ● docker-compose-plugin_<version>_<arch>.deb
}

[!] Контейнер jenkins/ssh-agent запускается под пользователем root.
    Это связано с работой sshd (демона сервера SSH)

---<Dockerfile>---
FROM jenkins/ssh-agent:latest-debian-jdk17
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Asia/Yekaterinburg
ENV LANG=ru_RU.utf8

RUN apt-get update && apt-get -y install ca-certificates curl \
    && install -m 0755 -d /etc/apt/keyrings \
    && curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc \
    && chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
RUN echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null \
  && apt-get update \
  && apt-get install -y docker-ce \
             docker-ce-cli \
             containerd.io \
             docker-buildx-plugin \
             docker-compose-plugin
---

# полученный образ имеет тег: agents/jenkins/ssh-agent:latest-debian-jdk17
# Сменим тег для размещения образа в репозитории Nexus:
---
docker tag agents/jenkins/ssh-agent:latest-debian-jdk17 127.0.0.1:8123/agents/jenkins/ssh-agent:latest-debian-jdk17
docker login -u admin -p ****** 127.0.0.1:8123
# (docker login -u admin -p ****** 172.21.240.131:8123)
