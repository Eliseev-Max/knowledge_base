Сборка представляет собой параметризованный пайплайн.
Основная задача сборки - запуск тестов, написанных на Python 3.6 (и свежее) с применением фреймворка Pytest (v.>=6.2.4) в автоматически настраиваемой среде исполнения контейнера Docker и представление отчёта в удобном для анализа виде с помощью плагина Allure
Пайплайн определён посредством файла Jenkinsfile, находящегося в репозитории создания среды исполнения (https://bucket.prosyst.ru/scm/~m.eliseev/docker_env.git)
Тип пайплайна по синтаксису написания: Scripted Pipeline.
Этапы (stages) пайплайна:
1. checkout - клонирование репозитория, содержащего всё необходимое для создания среды исполнения
2. build_image - сборка образа Docker по инструкции, описанной в Dockerfile
3. run_container_with_tests - запуск контейнера на основе собранного образа
4. report-allure - генерация отчёта Allure
---
Параметры запуска пайплайна:
IP - IP адрес тестируемого контроллера;
BUCKETSRC - ссылка на репозиторий, содержащий тесты pytest
REPOSITORY - имя репозитория (каталога) с тестами

Сборка представляет собой параметризованный пайплайн.
Пайплайн (Pipeline) - код, который определяет CI/CD процессы, которые включают в себя следующие этапы:
1. сборка тестового окружения и добавление тестов (stage ('checkout'), stage('build_image')),
2. запуск тестов (stage ('run_container_with_tests')),
3. построение наглядного отчёта с помощью плагина Allure (stage ('report-allure'))
Скрипт пайплайна находится в файле Jenkinsfile в репозитории сборки среды исполнения:
(https://bucket.prosyst.ru/scm/~m.eliseev/docker_env.git).
Это указывается при конфигурировании Пайплайна (пункт Pipeline → SCM → Repositories → Repository URL)
Важно, чтобы на данном этапе Jenkins убедился в доступности репозитория.

Ход выполнения Pipeline:
1. Выполняется попытка соединения с репозиторием, содержащим Jenkinsfile, и чтение Jenkinsfile
   (команда выполняется плагином Jenkins: Pipeline Groovy)
2. Выполняются инструкции сборки, описанные в Jenkinsfile:
2.1 попытка выполнения checkout (git clone) в рабочую область текущей сборки $WORKSPACE
2.2 сборка Docker-образа по инструкции, описанной в Dockerfile
2.3 запуск Docker-контейнера из собранного Docker-образа
2.4 обработка результатов тестирования и формирование отчёта Allure