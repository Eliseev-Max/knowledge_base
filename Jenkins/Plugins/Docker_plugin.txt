Jenkins Docker plugin
(https://plugins.jenkins.io/docker-plugin/)


Этот плагин позволяет динамически предоставлять контейнеры в качестве Jenkins nodes с помощью Docker.

ЦЕЛЬ ПЛАГИНА:
  возможность использовать хост Docker, чтобы
  1) динамически предоставить контейнер docker в качестве Jenkins agent node,
  2) позволить ему запустить одну сборку,
  3) затем снести этот node,
(!) при этом процесс сборки (или определение задания Jenkins) НЕ ДОЛЖЕН ЗНАТЬ о docker.

Администратор Jenkins настраивает Jenkins, зная
  ✓ один или несколько хостов (или swarms) docker,
  ✓ зная один или несколько "шаблонов" ( = templates)
    (templates описывают метки/теги, которые предоставляет этот шаблон, образ docker, как его запустить и т. д.),
  => Jenkins может запускать контейнеры docker для обеспечения Jenkins nodes (agents), на которых Jenkins может запускать сборки.

*************
* Замечания *
*************

1) Существует более одного плагина docker для Jenkins.
   Это может запутать конечных пользователей, но еще больше запутывает, когда конечные пользователи сообщают об ошибках не в том месте.
   Например, если встречаются такие термины, как
   docker.withDockerRegistry
     или
   docker.image и т. д.,
   то вы используете плагин docker-workflow

2) Этот плагин НЕ ИСПОЛЬЗУЕТ ВСТРОЕННЫЙ в ОС КЛИЕНТ docker;
   он использует docker-java.
   Вам НЕ НУЖНО УСТАНАВЛИВАТЬ клиент docker на Jenkins или на ваших агентах, чтобы использовать этот плагин.

3) Этот плагин НЕ ПРЕДОСТАВЛЯЕТ демона Docker;
   он позволяет Jenkins использовать демона docker.
   То есть если вы установили где-то docker, этот плагин позволит Jenkins использовать его.

[!] В качестве базового образа Docker рекомендуется использовать:
=> jenkins/inbound-agent
#(https://hub.docker.com/r/jenkins/inbound-agent/)

# Образ jenkins/agent
#(https://hub.docker.com/r/jenkins/agent/)

[Jenkins Controller и Docker установлены на разных хостах]
  нужно открыть TCP-порт docker, чтобы Jenkins мог взаимодействовать с демоном docker.
  Этого можно добиться, отредактировав файл конфигурации docker и установив (например)
DOCKER_OPTS="-H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock"

[Несколько хостов Docker]
  Если вы хотите использовать более одного физического узла для запуска контейнеров, вы можете
    * использовать Docker Swarm Standalone
      или
    * определить более одного "облака" docker.

  API режима swarm для docker engine не поддерживается
  (в настоящее время; улучшения будут приветствоваться).
  Чтобы использовать автономный swarm, следуйте инструкциям docker swarm standalone и настройте Jenkins с swarm's API endpoint.
---
Настройте URL API Docker (или Swarm standalone) с необходимыми учетными данными.
Кнопка "Тест" позволяет проверить соединение.
Затем настройте шаблоны агентов, присвоив им метки, которые можно использовать, чтобы задания выбирали соответствующий шаблон,
и установите запуск контейнера docker с любыми необходимыми настройками контейнера.
---

Launch via JNLP
Требования:
  * установленный JDK.
    (можно использовать jenkins/inbound-agent в качестве основы для создания собственного образа).
  * URL контроллера Jenkins должен быть доступен из контейнера.
  * Контейнер будет автоматически сконфигурирован с именем и секретом агента, поэтому вам не потребуется никакой специальной настройки контейнера.


Launch attached
Требования:
  * установленный JDK.
    (можно использовать jenkins/agent в качестве основы для создания собственного образа).