Jenkins Plugin: SSH Build Agents
(https://plugins.jenkins.io/ssh-slaves/)

  = Предоставляет средства для запуска агентов через SSH.

Этот плагин ранее был известен как "SSH Slaves Plugin".
Он был переименован в версии 1.31.0, но идентификатор плагина был сохранен как ssh-slaves,
чтобы сохранить совместимость для пользователей плагина.

[Plugin ID]: ssh-slaves


###########################################
# Configuring the SSH Build Agents plugin #
###########################################
(https://github.com/jenkinsci/ssh-agents-plugin/blob/main/doc/CONFIGURE.md)

Этот плагин позволяет управлять агентом, запущенным на *nix-машинах, через SSH.
Он добавляет новый тип метода запуска агента. Этот метод запуска позволит:
  ● открывать SSH-соединение с указанным хостом от указанного имени пользователя.
  ● проверять версию java по умолчанию для этого пользователя.
  ● копировать последнюю версию remoting.jar через SFTP
    (если SFTP недоступен, можно вернуться к scp).
  ● запускать процесс удаленного доступа (remoting process)


***************************
*      Prerequisites      *
* Предварительные условия *
***************************

  Прежде чем начать использовать плагин с вашими агентами,
  необходимо подготовить агентов к запуску процесса удаленного доступа.

  Это означает, что вам необходимо установить JDK/JRE 8 на агентах, чтобы запустить процесс remoting.jar.

[!] Агент должен иметь достаточно памяти для запуска remoting process и сборок.
[!] Агент должен быть доступен из контроллера Jenkins.
    Вы должны быть уверены, что ваш экземпляр Jenkins может подключиться к агенту через порт SSH;
    вы можете проверить это в командной строке.
    Вам необходимо указать учетную запись, под которой можно войти в систему на целевой машине.
    Привилегии root не требуются.

[!] Наконец, агент должен иметь:
      ➜ права на чтение и запись в рабочем каталоге,
      ➜ а также достаточно места на диске для хранения
        ● remoting.jar (~1 МБ),
        ● логов (~10 МБ должно быть достаточно)
        ● и рабочих пространств сборки (зависит от ваших сборок, возможно, несколько ГБ).


*******************************************************
* Configure a Node to use the SSH Build Agents plugin *
*******************************************************

[Manage Jenkins] ➜ [Manage Nodes] ➜ (New Node)
# [Настроить Jenkins] ➜ [Nodes] ➜ (New Node)

 -> Зададим имя для новой ноды
 -> Установить чекбокс для Permanent Agent (Постоянный Агент)

После создания новой Node необходимо настроить параметры ноды.


##################
# Параметры Node #
##################

  ● Name:
      Имя, уникально идентифицирующее агента в рамках данной инсталляции Jenkins.

  ● Description:
      Необязательное человекочитаемое описание для этого агента.

  ● # of Executors
    (Количество процессов-исполнителей):
      Максимальное количество одновременных сборок,
      которые Jenkins может выполнять на этом агенте.

  ● Remote root directory
    (Удалённая корневая директория):
      Агент должен иметь каталог, предназначенный для Jenkins.
      Укажите путь к этой директории на агенте.
      Лучше всего использовать абсолютный путь,
      (например /var/jenkins или c:\jenkins)
      Это должен быть путь, локальный для машины агента.

  ● Labels
    (= Метки):
      Метки (или теги) используются для объединения нескольких агентов в одну логическую группу.
      Вы будете использовать их, чтобы выбрать агента для сборки.
      Несколько меток должны быть разделены пробелом.

  ● Usage
    (=Использование):
      Управляет тем, как Jenkins планирует сборки на этом узле.
      * Use this node as much as possible:
        #(Использовать этот узел как можно чаще:)
          Это настройка по умолчанию.
          В этом режиме Jenkins свободно использует этот узел.
          Если есть сборка, которая может быть выполнена с помощью этого узла, Jenkins будет использовать его.

      * Only build jobs with label expressions matching this node:
        #(Собирать только задания с выражениями меток, соответствующими этой ноде:)
          В этом режиме Jenkins будет собирать проект на этой ноде,
          только если проект ограничен определенными нодами с помощью выражения метки,
          и это выражение соответствует имени и/или меткам этой Node.
          Это позволяет ЗАРЕЗЕРВИРОВАТЬ НОДУ для определенных видов работ.
          { Например,
              если у вас есть задания, выполняющие тесты производительности,
              вы можете захотеть, чтобы они выполнялись только на специально настроенной машине,
              не позволяя всем остальным заданиям использовать эту машину.
              Для этого нужно ограничить место выполнения тестовых заданий,
              задав им выражение метки, соответствующее этой машине.
              Кроме того, если вы установите значение # of executors равным 1,
              вы можете гарантировать, что только один тест производительности будет выполняться в любой момент времени на этой машине;
              никакие другие сборки не будут мешать.
           }

  ● Launch method
    (= Способ запуска):
      Выберите "Launch agents via SSH"
      = Запуск агента путем отправки команд через защищенное SSH-соединение.


***********************************
* Configure Launch agents via SSH *
***********************************

  После того как вы выбрали метод запуска агентов: "Launch agents via SSH",
  вы можете настроить параметры агента SSH.

[Необходимые настройки/Required settings:]

● Host:
    Hostname or IP of the agent,
    он должен быть разрешаемым и достижимым (resolvable and reachable)
    из Jenkins instance.

● Credentials:
    Выберите credentials которые будут использоваться для входа на удаленный хост.
    См. раздел: Integration with SSH Credentials Plugin

● Host Key Verification Strategy:
    Управляет тем, как Jenkins проверяет SSH-ключ, представленный удаленным узлом при подключении.
    См. раздел Стратегия проверки ключа хоста
    (Host Key Verification Strategy:
      -> https://github.com/jenkinsci/ssh-agents-plugin/blob/main/doc/CONFIGURE.md#host-key-verification-strategy
    )

[Advanced settings:]

● Port:
    Порт TCP, на котором прослушивается демон SSH агента, обычно это порт 22. 

● JavaPath
    Этот путь к Java будет использоваться для запуска JVM.
    (/mycustomjdkpath/bin/java)
    Если пусто, Jenkins будет искать команду Java в агенте.

● JVM Options
    Дополнительные аргументы для JVM, такие как
    - минимальный и максимальный размер кучи,
    - параметры сборщика мусора
    и другие настройки.

● Prefix Start Agent Command
    То, что вы введете здесь, будет добавлено к команде запуска.

● Suffix Start Agent Command
    То, что вы введете здесь, будет добавлено к команде запуска.

● Connection Timeout in Seconds
    Задайте значение таймаута для запуска агента ssh в секундах.
    Если значение пустое, оно будет сброшено на значение по умолчанию (210 секунд).
    Это значение задает таймаут только для запуска агента;
    (!) после запуска таймаут не применяется.

● Maximum Number of Retries
    Устанавливает количество повторных попыток соединения SSH,
    если при первом подключении произошла ошибка.
    Если значение пустое, оно будет сброшено до значения по умолчанию (10).
    Если значение равно 0, повторные попытки будут отключены.

● Seconds To Wait Between Retries
    Установите количество секунд ожидания между повторными попытками начального SSH-соединения.
    Значение по умолчанию - 15 секунд.

● Use TCP_NODELAY flag on the SSH connection
    Включение/отключение флага TCP_NODELAY для SSH-соединения.
    Если установлен, отключается алгоритм Nagle.
    Это означает, что сегменты всегда отправляются как можно быстрее, даже если объем данных невелик.
    Если флаг НЕ УСТАНОВЛЕН, данные буферизируются до тех пор, пока не будет достаточного количества для отправки,
    что позволяет избежать частой отправки небольших пакетов,
    что в свою очередь приводит к плохому использованию сети.

● Remoting work directory
    Рабочая директория Remoting - это внутреннее хранилище данных,
    которое может использоваться Remoting для хранения кэша, журналов и других метаданных.
    Если в команде Suffix Start Agent Command задан параметр remoting
    -->
    "-workDir PATH"
    <--
    это поле будет проигнорировано.
    Если оно пустое, то в качестве рабочего каталога Remoting будет использоваться корневой каталог Remote.


[Host Key Verification Strategy]

  = Управляет тем, как Jenkins проверяет SSH-ключ, предоставленный удаленным узлом при подключении.

1. Known hosts file Verification Strategy
   (Стратегия проверки файла known_hosts)
  Проверяет файл known_hosts (~/.ssh/known_hosts) для пользователя, под которым выполняется Jenkins,
  на предмет наличия записи, соответствующей текущему соединению.
  [!] Можно изменить файл по умолчанию, установив Java-свойство
---
  -Dhudson.plugins.sshslaves.verifiers.KnownHostsFileKeyVerificationStrategy.known_hosts_file=PATH_TO_FILE
---
  Этот метод не производит никаких обновлений файла Known Hosts,
  а использует его в качестве источника только для чтения и ожидает,
  что кто-то с соответствующим доступом к соответствующей учетной записи пользователя на контроллере Jenkins обновит файл по мере необходимости,
  возможно, используя команду ssh hostname для инициирования соединения и соответствующего обновления файла.
  
  2. Manually provided key Verification Strategy
    (Стратегия верификации, основанная на предоставленном вручную ключе)
  (https://github.com/jenkinsci/ssh-agents-plugin/blob/main/doc/CONFIGURE.md#manually-provided-key-verification-strategy)

  = Проверяет соответствие удаленного ключа (remote key) ключу, отмеченному как доверенный для этого хоста.
    В зависимости от конфигурации:
      -> ключ будет автоматически доверен при первом подключении,
      -> или авторизованному пользователю будет предложено одобрить ключ.
  
    (!) Авторизованный пользователь должен будет одобрить любой новый ключ,
        представленный удаленным узлом.
        Требовать, чтобы пользователь с правами Computer.CONFIGURE одобрил ключ, представленный при первом подключении к этому узлу,
        прежде чем соединение будет разрешено.

    [!] Если этот параметр НЕ ВКЛЮЧЕН, то ключ, представленный при первом подключении к этому узлу,
        будет автоматически доверен и разрешен для всех последующих подключений без какого-либо ручного вмешательства.

  3. Non verifying Verification Strategy
    (Стратегия неверифицируемой верификации)

    = Не выполняет НИКАКОЙ ПРОВЕРКИ SSH-ключа, представленного удаленным узлом,
      разрешая ВСЕ соединения независимо от представленного ключа.


[Availability (Доступность)]

  ● Keep this agent online as much as possible
  
     = В этом режиме Jenkins будет поддерживать агента в режиме онлайн как можно дольше.
       Если агент перейдет в автономный режим, например, из-за временного сбоя в сети,
       Jenkins будет периодически пытаться перезапустить его.

  ● Take this agent online and offline at specific times

     = В этом режиме Jenkins будет выводить агента в сеть в запланированное время,
       оставаясь в сети в течение определенного времени.
       Если агент перейдет в автономный режим во время запланированного пребывания в сети,
       -> Jenkins будет периодически пытаться перезапустить его.
       После того как агент будет находиться в сети в течение количества минут, указанного в поле Scheduled Uptime,
       он будет переведен в автономный режим.
     
       Если установлен флажок "Keep online while builds are running",
       и агент планируется перевести в автономный режим,
       Jenkins будет ждать завершения всех сборок, которые могут находиться в процессе.

  ● Take this agent online when in demand, and offline when idle
    (Выводите этого агента в режим онлайн, когда он востребован, и в режим офлайн, когда он простаивает)

    = В этом режиме Jenkins переводит агента в режим онлайн, если на него есть спрос,
      т.е. в очереди стоят сборки, отвечающие следующим критериям:
      ✔ они находятся в очереди не менее указанного In demand delay time period (периода задержки) 
      ✔ они могут быть выполнены этим агентом (например, имеют соответствующее выражение метки)

      Этот агент будет переведен в режим офлайн, если:
      + на нем нет активных сборок
      + этот агент простаивает не менее указанного периода задержки (Idle delay time period)


* Интеграция с плагином SSH Credentials Plugin

[Credential scope:]
  Область действия учетных данных контролирует, где можно использовать учетные данные:
    > Системная область действия (System scope)
      - доступна только для корневого экземпляра Jenkins
      (другими словами, Jenkins может использовать ее для подключения узлов сборки,
       но учетные данные не доступны для заданий сборки).

    > Глобальная область действия (Global scope)
      - доступна для корневого экземпляра Jenkins и всех дочерних элементов
      (другими словами, Jenkins может использовать ее для подключения узлов сборки,
      задания сборки могут использовать ее для других плагинов с поддержкой SSH Credentials)
      Когда у вас много различных учетных данных, может быть полезно объединить их в домены учетных данных.