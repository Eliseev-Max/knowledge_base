Coverage Plugin

[sources:]
  - https://www.jenkins.io/doc/pipeline/steps/coverage/
  - https://plugins.jenkins.io/coverage/


Full_Name: Coverage Plugin
Short_Name: coverage
Latest_Version (02.04.2025): 2.2.0


** Overview **
"""
  Плагин Jenkins Coverage Plug-in собирает отчеты инструментов для покрытия кода или мутационного покрытия.
  Он поддерживает следующие форматы отчетов:


  ■ JaCoCo: Code Coverage
    -> https://www.jacoco.org/jacoco/

  ■ Cobertura: Code Coverage
    -> https://cobertura.github.io/cobertura/

  ■ OpenCover: Code Coverage
    -> https://github.com/OpenCover/opencover

  ■ VectorCAST: Code Coverage including MC/DC, Function, Function Call coverages
    -> https://www.vector.com/int/en/products/products-a-z/software/vectorcast
    #! Site is not available in RF

  ■ PIT: Mutation Coverage
    -> https://pitest.org/

  ■ JUnit: Test Results
    JUnitReport:> https://ant.apache.org/manual/Tasks/junitreport.html

  ■ NUnit: Test Results
    -> https://nunit.org/

  ■ XUnit: Test Results
    -> https://xunit.net/

  ■ Metrics XML report


#Если ваш инструмент покрытия еще не поддерживается плагином coverage,
#не стесняйтесь предоставить pull request для Coverage Model:
#-> https://github.com/jenkinsci/coverage-model/pulls


Плагин публикует отчет о покрытии кода и мутационном покрытии в вашей сборке,
поэтому вы можете перейти к сводному отчету с главной страницы сборки.


Возможности плагина:
  ➜ собирает несколько метрик:
      ✓ строки кода (lines of code),
      ✓ цикломатическая сложность (cyclomatic complexity),
      ✓ количество тестов на класс (number of tests per class)

  ➜ и визуализирует эти результаты вместе с информацией о покрытии.


Отсюда вы также можете погрузиться в детали:
  ● древовидные диаграммы, показывающие распределение метрик по типам
    (строки, ветви, сложность, тесты и т. д.)
  ● табличный листинг всех файлов с их покрытием, сложностью и количеством тестов
  ● исходный код файлов с выделенным покрытием
  ● диаграммы тренда покрытия с течением времени

#### HISTORY ####
'''
  Первоначальная версия этого плагина была разработана Shenyu Zheng в GSoC 2018.
  После нескольких несовместимых улучшений шагов пайплайна и классов API мы решили перенести весь исходный код в чистый и новый плагин.
  Старый плагин, содержащий устаревшие steps и код, по-прежнему доступен на GitHub и Jenkins.
'''
#### HISTORY.END ####


##>> ADDITIONAL_INFO >>##
Код этого плагина также доступен в виде отдельного действия на GitHub или GitLab,
которое теперь работает без Jenkins:

  Quality Monitor GitHub Action:            # https://github.com/uhafner/quality-monitor
    = Действие, которое отслеживает качество проектов на основе настраиваемого набора метрик
      и дает обратную связь по pull request'ам (или отдельным коммитам) в GitHub.

  GitHub Autograding action:
    = Действие, которое автоматически оценивает студенческие программные проекты на основе настраиваемого набора показателей
      и дает обратную связь по pull request'ам (или отдельным коммитам) в GitHub.

  GitLab Autograding action:
    = Действие, которое автоматически оценивает студенческие программные проекты на основе настраиваемого набора показателей
      и дает обратную связь по merge request'ам (или отдельным коммитам) в GitLab.
###<<ADDITIONAL_INFO.END <<##

"""


***************
* Возможности *
*   Features  *
***************

Плагин code coverage предоставляет следующие возможности при добавлении в задание в качестве post-build action (или step):
  ● Анализ покрытия проектов и pull request'ов:
    Плагин теперь вычисляет и показывает
      абсолютное (absolute) покрытие проекта,
      покрытие измененных файлов
      и покрытие измененных строк,
    чтобы вы могли видеть, как изменения влияют на покрытие кода.
    Кроме того, вычисляются дельта-значения этих покрытий по отношению к эталонной сборке,
    а также изменения покрытия, вызванные измененными тест-кейсами (косвенные изменения покрытия).

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/summary.png)

  ● Обзор покрытия и тенденции (trend):

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/reportOverview_screen.PNG)

  ● Цветная карта дерева покрытия проекта для покрытий строк, ветвей и мутаций, а также для цикломатической сложности и количества тестов

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/reportTree_screen.PNG)

  ● Навигация по исходному коду с возможностью настройки хранения файлов исходного кода
    - для всех сборок,
    - только для текущей сборки
    - или только для измененных файлов:

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/reportFile_screen.PNG)

  ● Специфическое представление исходного кода для анализа покрытия измененных строк кода:

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/reportCC_screen.PNG)

  ● Специальное представление исходного кода для анализа изменений покрытия, которые являются результатом изменений тестов (косвенные изменения покрытия):

##(см. изображение https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/reportICC_screen.PNG)

  ● Настраиваемый обзор покрытия для представления на приборной панели Jenkins и для результатов сборки:

##( https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/dashboard_screen.PNG)

  ● Quality Gates: Вы можете задать произвольное количество ворот качества, которые позволят перевести сборку в разряд нестабильных или неудачных, если пороговые значения не будут достигнуты.
  Для каждого гейта качества можно задать
    - метрику (покрытие ветки, сложность и т. д.)
    - и базовую линию (весь проект, измененные файлы и т. д.).

##( https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/quality-gates.png)

  ● Результат quality gate:
    = Подробный результат оценки quality gate доступен в виде всплывающей подсказки в сводке сборки:

##(https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/quality-gates-result.png)

  ● Cyclomatic Complexity and LOC metrics:      # Цикломатическая сложность и LOC-метрики
    = Несколько парсеров покрытия поддерживают измерение цикломатической сложности и строк кода.
      Теперь эти метрики также вычисляются и записываются:

##(https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/all-metrics.png)

  ● Регистратор (recorder) был дополнен собственным шагом, который позволяет установить статус step'а:
    ((unstable, failed, ok || нестабильный, неудачный, в порядке):

##(https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/step.png)

  ● Отчет о проверках GitHub показывает подробные результаты покрытия строк и ветвей для pull request'а:

##(https://cdn.jsdelivr.net/gh/jenkinsci/coverage-plugin@main/images/jacoco-coverage-checks.png)

  ● Отчет о проверках GitHub, показывающий подробные результаты покрытия линий и мутаций для pull request:

##()

  ● Поддержка Token macro:
    = Регистратор был расширен макросом для маркера, который позволяет использовать результаты покрытия в других плагинах (например, email-ext) или сценариях конвейера.


*****************
* Использование *
*****************
    
<!>
  Плагин не выполняет покрытие кода, он просто визуализирует результаты, сообщаемые такими инструментами.
  Вам все равно нужно включить и настроить инструмент покрытия кода в вашем файле сборки или Jenkinsfile.
</!>

[Поддерживаемые парсеры:]

  Плагин Coverage поддерживает следующие форматы отчетов:

  ✓ JaCoCo: Code Coverage
  ✓ Cobertura: Code Coverage        # https://cobertura.github.io/cobertura/
  ✓ OpenCover: Code Coverage
  ✓ VectorCAST Code Coverage including MC/DC, Function, Function Call coverages
  ✓ PIT: Mutation Coverage
  ✓ JUnit: Test Results
  ✓ NUnit: Test Results
  ✓ XUnit: Test Results
  ✓ Metrics XML report


Некоторые из этих файлов отчетов генерируются другими инструментами и могут содержать недостоверную или противоречивую информацию.
По умолчанию плагин пытается быстро завершить работу при обнаружении такого битого файла.
Вы можете отключить это поведение, установив свойство ignoreParsingErrors в true.
-->
recordCoverage (
...
ignoreParsingErrors: true
)
<--

В этом случае плагин будет пытаться разобрать как можно больше информации из файла отчета.


***************************
* Supported project types *
***************************

Поддерживаемые типы проектов

The Coverage Plug-in supports the following Jenkins project types:

  ✓ Freestyle Project
  ✓ Maven Project
  ✓ Scripted Pipeline (последовательные и параллельные шаги (sequential and parallel steps))
  ✓ Declarative Pipeline (последовательные и параллельные шаги (sequential and parallel steps))
  ✓ Multi-branch Pipeline


[Freestyle project]

  Включите "Record code coverage results" publisher в разделе Post-build Actions вашего задания.
  Выберите хотя бы один инструмент покрытия и укажите путь к файлу отчета.
  Если вы не укажете путь, плагин будет искать файл отчета в workspace,
  используя шаблон инструмента по умолчанию (default pattern).


[Pipeline example]

  Этап записи (recording step) также поддерживает конфигурацию pipeline (scripted || declarative).
  Проще всего сгенерировать соответствующий код пайплайна с помощью Jenkins' Snippet Generator:
    там вы можете настроить все доступные свойства шага с помощью богатого пользовательского интерфейса с встроенной помощью и проверкой.

  Пример определения шага приведен в следующем фрагменте кода.
  Этот шаг записывает результаты покрытия JaCoCo с шаблоном имени файла по умолчанию.
  Информация о покрытии отображается вместе с исходным кодом для каждой сборки, а для покрытий строк и ветвей установлен quality gates.
## То есть, если покрытие строк или ветвей не достигает порога в 60 %, то сборка будет помечена как нестабильная.

--<Pipeline: recordCoverage>--

recordCoverage(tools: [[parser: 'JACOCO']],
        id: 'jacoco', name: 'JaCoCo Coverage',
        sourceCodeRetention: 'EVERY_BUILD',
        qualityGates: [
                [threshold: 60.0, metric: 'LINE', baseline: 'PROJECT', unstable: true],
                [threshold: 60.0, metric: 'BRANCH', baseline: 'PROJECT', unstable: true]
        ]
)
-<END>-


**************************************
* Эталонное здание (базовый уровень) *
*     Reference build (baseline)     *
**************************************

(!) Уникальной особенностью плагина Coverage является вычисление дельты метрик покрытия по отношению к базовой (эталонной) сборке.

  Плагин считывает результаты эталонной сборки и сравнивает их с текущими результатами:
  -> для каждой метрики покрытия вычисляется значение дельты.

  Значения дельты отображаются в виде
    - абсолютных покрытий проекта,
    - покрытий измененных файлов
    - или покрытий измененных строк.

  Это помогает понять, как изменения кода влияют на его покрытие.

(*) Для вычисления этой классификации плагину требуется эталонная сборка (baseline).

При выборе базовой сборки необходимо различать два разных случая использования, которые описаны в следующих разделах.

+------------------------------------+
| Выбор baseline из текущего задания |
+------------------------------------+

  Когда команда хочет изучить, как меняется покрытие проекта с течением времени,
  нужно просто
    1) просмотреть историю одного и того же задания Jenkins 
    2) выбрать другую сборку, с которой можно сравнить результаты.

  Такое задание Jenkins обычно собирает главную ветку системы контроля исходного кода.
  Этого можно добиться, используя `discoverReferenceBuild` перед шагом записи покрытия кода:

--<Pipeline: baseline from the current job>--

discoverReferenceBuild()
recordCoverage(tools: [[parser: 'JACOCO']])

-<END>-

+---------------------------------------+
|    Выбор baseline в целевом задании   |
+---------------------------------------+

[!] Эта функция требует установки дополнительного плагина:
    "Git Forensics Plugin": https://github.com/jenkinsci/git-forensics-plugin

Для более сложных branch source проектов
#= (т. е. проектов, в которых создается несколько ветвей и pull request'ов в связанной иерархии заданий)
  имеет смысл выбрать эталонную сборку из задания, в котором создается фактическая целевая ветвь (master-branch)
#= (т. е. ветвь, в которую будут слиты текущие изменения).

Здесь обычно интересуются тем, что изменилось в ветке или pull request'е по сравнению с основной веткой (или любой другой целевой веткой).
==> мы хотим увидеть, как меняется покрытие, когда новый код будет представлен веткой или pull request'ом.

Если вы используете исходный проект с веткой Git,
-> задание Jenkins, которое собирает целевую ветку, будет выбрано автоматически при выполнении шага reference recorder.

Просто вызовите шаг `discoverGitReferenceBuild` перед шагом для записи покрытия кода:


--<Pipeline: discoverGitReferenceBuild>--
# используется метод плагина Git Forensics Plugin: discoverGitReferenceBuild()

discoverGitReferenceBuild()
recordCoverage(tools: [[parser: 'JACOCO']])

-<END>-


[!] Выбрать правильную эталонную сборку не так просто, как кажется,
    поскольку основная ветка проекта развивается чаще, чем ветка конкретных функций (feature) или исправлений (bugfix).
    Это означает, что если мы хотим сравнить результаты pull request с результатами основной ветки (main || master branch),
    нам нужно выбрать сборку из основной ветки, содержащую только коммиты, которые также являются частью ветки связанного pull request'а.

[>] Поэтому плагин Git Forensics:
      * автоматически отслеживает все коммиты сборки Jenkins
      * и использует эту информацию для определения сборки в целевой ветке,
        которая лучше всего соответствует коммитам в текущей ветке.

<!>
  Пожалуйста, посмотрите документацию плагина Git Forensics
  чтобы увидеть, как это достигается в деталях
#> https://plugins.jenkins.io/git-forensics/
#> https://www.jenkins.io/doc/pipeline/steps/git-forensics/
</!>

Этот алгоритм можно использовать и для обычных проектов Git SCM freestyle или пайплайнов.
В этом случае мы не можем получить информацию о целевой ветке автоматически из API источника ветки Git.
Поэтому в параметре referenceJob необходимо вручную указать задание Jenkins, которое создает целевую ветку.

Пример того, как обнаружить baseline из такой ссылки, приведен в следующем примере фрагмента Pipeline:

--<Seeking baseline: discoverGitReferenceBuild>--

discoverGitReferenceBuild referenceJob: 'my-reference-job'
recordCoverage(tools: [[parser: 'JACOCO']])

-<END>-


********************************
*   Рендеринг исходного кода   *
* Rendering of the source code *
********************************


  Плагин АВТОМАТИЧЕСКИ найдет файлы исходного кода и создаст отчет,
  в котором будет показан исходный код в сочетании с достигнутыми результатами покрытия кода.

  С помощью свойства `sourceCodeRetention` вы можете изменить стратегию, которая будет использоваться для хранения окрашенных файлов исходного кода.

(*) Если на вашем сервере недостаточно свободного места для хранения исходных текстов всех сборок,
    возможно, имеет смысл хранить ТОЛЬКО РЕЗУЛЬТАТЫ ПОКРЫТИЯ ПОСЛЕДНЕЙ СБОРКИ.

    В этом случае плагин будет автоматически удалять старые результаты, прежде чем будут сохранены новые исходники.

(||) если исходные файлы вам не нужны вообще, вы можете отключить хранение файлов исходного кода.

Поддерживаются следующие варианты:

  ● NEVER:
      = Никогда не хранить файлы исходного кода.

  ● LAST_BUILD (default):
      = Хранить файлы исходного кода последней сборки, удалять старые артефакты.

  ● EVERY_BUILD:
      = Хранить файлы исходного кода для всех сборок,
        никогда не удалять эти файлы автоматически.

  ● MODIFIED:
      = Сохранять ТОЛЬКО ИЗМЕНЕННЫЕ файлы исходного кода для всех сборок,
        никогда не удалять эти файлы автоматически.


Для Java-проектов рендеринг исходного кода обычно работает «из коробки»,
поскольку инструменты покрытия экспортируют результаты в отчет,
содержащий точное расположение файлов исходного кода (абсолютный путь).

Если такое автоматическое определение не работает в вашем случае,
(!) то вы можете УКАЗАТЬ ПРЕФИКС ПУТИ К ИСХОДНИКАМ с помощью параметра `sourceDirectories`.

Это свойство может быть заполнено одним || несколькими ОТНОСИТЕЛЬНЫМИ путями в workspace'е,
по которым следует искать исходный код.

Вы также можете указать АБСОЛЮТНЫЕ пути, но тогда вам необходимо убедиться,
что эти пути одобрены администратором в разделе конфигурации плагина Prism в глобальной конфигурации Jenkins.

В следующем примере показано, как указать такой префикс пути:

--<Prefix-to-the-source-code>--
recordCoverage(tools: [[parser: 'JACOCO']], 
            sourceCodeRetention: 'MODIFIED', 
            sourceDirectories: [[path: 'plugin/src/main/java']])
-<END>-


***********************
* Token macro support *
***********************

  Плагин coverage предоставляет токен COVERAGE, который может быть использован на дополнительных шагах обработки после сборки,
  (post build processing steps) например, в mailer'е.

(!) Чтобы использовать этот токен, необходимо установить плагин Token Macro.
#-> https://plugins.jenkins.io/token-macro/
# token-macro:444.v52de7e9c573d

  Токен имеет следующие необязательные параметры:
    ● id:
      = выбирает конкретный результат охвата,
        если он не определен, то отображаются результаты по умолчанию, опубликованные по URL «coverage».

    ● metric:
      = выбирает метрику покрытия для оценки,
        все возможные значения см. в справке по метрике
        #(https://github.com/jenkinsci/coverage-plugin/blob/main/plugin/src/main/resources/io/jenkins/plugins/coverage/metrics/steps/CoverageMetricColumn/help-metric.html)

    ● baseline:
      = выбирает используемую базовую линию, все возможные значения см. в справке Baseline. .
      # (https://github.com/jenkinsci/coverage-plugin/blob/main/plugin/src/main/resources/io/jenkins/plugins/coverage/metrics/steps/CoverageMetricColumn/help-baseline.html)


Examples:

  ► ${COVERAGE}:
    = показывает линейный охват всего проекта

  ► ${COVERAGE, metric="BRANCH"}:
    = показывает охват ветвей всего проекта

  ► ${COVERAGE, metric="MUTATION", baseline="MODIFIED_LINES"}:
    = показывает покрытие мутациями модифицированных строк


<>---***---***---<>

*******************************
* Подробнее о формата отчетов *
*******************************

#[Java]
  ■ JaCoCo: Code Coverage
    -> https://www.jacoco.org/jacoco/
    JaCoCo - это бесплатная библиотека покрытия кода для Java,
    которая была создана командой EclEmma на основе уроков,
    полученных при использовании и интеграции существующих библиотек в течение многих лет.

#[Java, other PL]
  ■ Cobertura: Code Coverage
    -> https://cobertura.github.io/cobertura/
    Cobertura - это бесплатный Java-инструмент, который вычисляет процент кода, к которому обращаются тесты.
    С его помощью можно определить, каким частям вашей Java-программы не хватает тестового покрытия.
    Он основан на jcoverage.

#[.NET]
  ■ OpenCover: Code Coverage
    -> https://github.com/OpenCover/opencover
    OpenCover - это инструмент покрытия кода для .NET 2 и выше (только для Windows OS - без MONO)*,
    с поддержкой 32 и 64 процессов и покрытием как ветвей, так и точек последовательности.
    OpenCover был создан после того, как попытки сделать PartCover поддерживающим 64-битные процессы стали слишком сложными.

  ■ VectorCAST: Code Coverage including MC/DC, Function, Function Call coverages
    -> https://www.vector.com/int/en/products/products-a-z/software/vectorcast
    #! Site is not available in RF

#[Java, JVM]
  ■ PIT: Mutation Coverage
    -> https://pitest.org/
    PIT - это современная система мутационного тестирования, обеспечивающая золотой стандарт тестового покрытия для Java и jvm.
    Она быстра, масштабируема и интегрируется с современными инструментами тестирования и сборки.

#[]
  ■ JUnit: Test Results
    JUnitReport:> https://ant.apache.org/manual/Tasks/junitreport.html
    Позволяет объединить отдельные XML-файлы, сгенерированные задачей JUnit,
    и применить таблицу стилей к полученному объединенному документу,
    чтобы предоставить просматриваемый отчет о результатах тестов.
    Примечание: Эта задача зависит от внешних библиотек, не включенных в дистрибутив Apache Ant.
    Дополнительные сведения см. в разделе Зависимости библиотек.

#[.NET languages]
  ■ NUnit: Test Results
    -> https://nunit.org/
    NUnit - это фреймворк для юнит-тестирования для всех языков .Net.
    Изначально портированный с JUnit, текущий релиз, версия 3, был полностью переписан
    с множеством новых функций и поддержкой широкого спектра платформ .NET.

#[.NET framework]
  ■ XUnit: Test Results
    -> https://xunit.net/
    xUnit.net - это бесплатный, с открытым исходным кодом, ориентированный на сообщество инструмент модульного тестирования для .NET Framework.
    Написанный изобретателем NUnit v2, xUnit.net представляет собой новейшую технологию для модульного тестирования
      C#,
      F#,
      VB.NET
      и других языков .NET.
    xUnit.net работает с
      - инструментами командной строки,
      - Visual Studio,
      - Visual Studio Code,
      - ReSharper/Rider,
      - CodeRush
      - и NCrunch.
    Он является частью .NET Foundation и работает в соответствии с их кодексом поведения.
    Он лицензирован под Apache 2 (лицензия, одобренная OSI).

  ■ Metrics XML report

<<<END<<<



##############
# Remote API #
##############

Мы предоставляем удаленный API для получения обзора покрытия, используя следующий URL:
```
https://[jenkins-url]/job/[job-name]/[build-number]/coverage/api/json?pretty=true
```


Example output:

---
{
  "_class" : "io.jenkins.plugins.coverage.metrics.restapi.CoverageApi",
  "modifiedFilesDelta" : {
    "branch" : "+1.72%",
    "class" : "-3.54%",
    "complexity" : "-236",
    "complexity-density" : "+0.47%",
    "file" : "+0.00%",
    "instruction" : "+0.16%",
    "line" : "-0.48%",
    "loc" : "-482",
    "method" : "+1.23%",
    "module" : "+0.00%",
    "package" : "+0.00%"
  },
  "modifiedFilesStatistics" : {
    "branch" : "83.91%",
    "class" : "93.33%",
    "complexity" : "392",
    "complexity-density" : "+50.19%",
    "file" : "100.00%",
    "instruction" : "88.19%",
    "line" : "87.96%",
    "loc" : "781",
    "method" : "86.18%",
    "module" : "100.00%",
    "package" : "100.00%"
  },
  "modifiedLinesDelta" : {
    "branch" : "+8.95%",
    "file" : "+0.00%",
    "line" : "+3.85%",
    "loc" : "-610",
    "module" : "+0.00%",
    "package" : "+0.00%"
  },
  "modifiedLinesStatistics" : {
    "branch" : "92.86%",
    "file" : "100.00%",
    "line" : "91.81%",
    "loc" : "171",
    "module" : "100.00%",
    "package" : "100.00%"
  },
  "projectDelta" : {
    "branch" : "+4.43%",
    "class" : "+2.94%",
    "complexity" : "-8",
    "complexity-density" : "+1.28%",
    "file" : "+4.00%",
    "instruction" : "+2.59%",
    "line" : "+3.37%",
    "loc" : "-50",
    "method" : "+1.28%",
    "module" : "+0.00%",
    "package" : "+0.00%"
  },
  "projectStatistics" : {
    "branch" : "82.19%",
    "class" : "96.88%",
    "complexity" : "628",
    "complexity-density" : "+49.72%",
    "file" : "100.00%",
    "instruction" : "88.03%",
    "line" : "88.44%",
    "loc" : "1263",
    "method" : "84.94%",
    "module" : "100.00%",
    "package" : "100.00%"
  },
  "qualityGates" : {
    "overallResult" : "SUCCESS",
    "resultItems" : [
      {
        "qualityGate" : "Overall project - Line Coverage",
        "result" : "SUCCESS",
        "threshold" : 60.0,
        "value" : "88.44%"
      },
      {
        "qualityGate" : "Overall project - Branch Coverage",
        "result" : "SUCCESS",
        "threshold" : 60.0,
        "value" : "82.19%"
      }
    ]
  },
  "referenceBuild" : "<a href=\"http://localhost:8080/job/coverage-model-history/10/\" class=\"model-link inside\">coverage-model-history #10</a>"
}

Более конкретно, покрытие измененных строк кода предоставляется для каждого измененного файла, используя следующий URL
-->
https://[jenkins-url]/job/[job-name]/[build-number]/coverage/modified/api/json?pretty=true.
<--

---
{
  "_class": "io.jenkins.plugins.coverage.metrics.restapi.ModifiedLinesCoverageApi",
  "files": [
    {
      "fullyQualifiedFileName": "io/jenkins/plugins/coverage/metrics/restapi/ModifiedLinesCoverageApi.java",
      "modifiedLinesBlocks": [
        {
          "startLine": 30,
          "endLine": 35,
          "type": "MISSED"
        }
      ]
    },
    {
      "fullyQualifiedFileName": "io/jenkins/plugins/coverage/metrics/restapi/ModifiedLinesBlocks.java",
      "modifiedLinesBlocks": [
        {
          "startLine": 80,
          "endLine": 81,
          "type": "COVERED"
        }
      ]
    }
  ]
}


######################
# Additional Plugins #
######################

1. Git Forensics Plugin
   "Documentation":    https://plugins.jenkins.io/git-forensics/
   "Pipeline Steps":   https://www.jenkins.io/doc/pipeline/steps/git-forensics/

2. Token Macro
   "Documentation":    https://plugins.jenkins.io/token-macro/
   "Pipeline Steps":   https://www.jenkins.io/doc/pipeline/steps/token-macro/



Плагин Git Forensics Jenkins (https://github.com/jenkinsci/git-forensics-plugin)
  занимается сбором и анализом данных из репозитория Git.

Он реализует все точки расширения Jenkins's Forensics API Plugin и предоставляет следующие услуги:

  ● Blames (обвинения):
      Предоставляет API для git blame, чтобы показать, в каких ревизиях Git строки файла были изменены какими авторами.
      Эта информация может быть использована для обнаружения оригинального коммита, который является источником проблемного кода.

  ● Статистика файлов:
      Инкрементально собирает глобальную статистику коммитов для всех файлов репозитория в стиле Code as a Crime Scene [Adam Tornhill, November 2013].
      Сюда входят:
        * количество коммитов
        * количество разных авторов
        * время создания
        * время последней модификации
        * строки кода (из деталей коммита)
        * отток кода (code churn)
          = (измененные строки с момента создания)

    ● Commit tracking (Отслеживание коммитов):
      = Отслеживает все новые коммиты, которые являются частью сборки.

    ● Commit statistics (Статистика коммитов):
      = Собирает статистику коммитов для всех новых коммитов в сборке или в серии сборок
        (например, для всех коммитов pull request).
        Это включает в себя:
          - подсчёт коммитов;
          - подсчёт измененных файлов
          - добавленные и удаленные строки

    ● Эталонная сборка (Reference build):
      = Обнаруживает эталонную сборку для данной сборки, которая может быть использована для расчета относительных результатов,
        показывающих, что будет изменено, если ветка текущей сборки будет слита с целевой веткой.

    ● Repository Browser:
      = Предоставляет RepositoryBrowser для коммитов.
        (*) Поскольку оригинальный интерфейс Jenkins НЕ ИМЕЕТ API для генерации ссылок на простые коммиты,
            этот декоратор добавляет такую функциональность.

        (!) Обратите внимание, что этот API не только получает такие ссылки, но и отображает их в виде <a> HTML-тегов.

Статистика файлов
  Плагин Git Forensics будет собирать статистику коммитов для всех файлов репозитория в стиле Code as a Crime Scene
  [Adam Tornhill, November 2013],
  если вы включите шаг Mine SCM repository после сборки.
  Если вы используете пайплайн, то запустить добычу данных из репозитория можно с помощью шага mineRepository.
  Этот шаг имеет значение параметра scm, которое можно использовать для фильтрации используемых SCM.
  Обратите внимание, что сканирование репозитория может занять некоторое время, если ваш Git-репозиторий довольно большой.
  Сканирование репозитория происходит инкрементально, то есть для новых сборок будут анализироваться только дополнительные коммиты, что значительно ускоряет время работы.

Вы можете использовать эту возможность, включив шаг конвейера mineRepository.
После сборки на главной странице сборки вы найдете сводку по анализу репозитория:

В этой сводке вы увидите, сколько всего файлов было обработано (с общей статистикой LOC и оттока кода) и сколько новых коммитов было зафиксировано в текущей сборке.
Кроме того, вы увидите добавленные и удаленные строки в этих новых коммитах.

Из сводки вы можете перейти к отдельному представлению плагина, которое показывает детали для всех файлов вашего репозитория.
В этом представлении вы видите диаграммы агрегирования, которые показывают, сколько файлов имеют малое или большое количество авторов или коммитов, соответственно.
Кроме того, вы можете просмотреть индивидуальную статистику для всех файлов репозитория в таблице:

  - количество коммитов (commits count);
  - количество разных авторов (different authors count);
  - время создания (creation time);
  - время последнего изменения (last modification time);
  - строк кода (из деталей коммита) [lines of code (from the commit details)]
  - отток кода (измененные строки с момента создания) [code churn (changed lines since created)]

  Используйте возможности фильтрации или сортировки таблицы, чтобы выделить наиболее важные файлы в вашем проекте.