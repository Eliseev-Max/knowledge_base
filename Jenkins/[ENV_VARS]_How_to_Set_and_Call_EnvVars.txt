Environment variables in Jenkins. How to set and call it

sources:
  1. "Handling credentials": https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials
  2. "How to Set Environment Variables in Jenkins?": https://www.baeldung.com/ops/jenkins-environment-variables
  3. "Jenkins Pipeline Environment Variables - The Definitive Guide":
  --> https://e.printstacktrace.blog/jenkins-pipeline-environment-variables-the-definitive-guide/


Если значение переменной окружения содержит чувствительные данные: [1]
Общий случай установки и вызова переменных окружения в Jenkins: [2]

[1] Создать Credentials типа "Secret text" (в некоторых случаях "Username and Password")
  В Пайплайне (Jenkinsfile) можно обратиться к Credentials с помощью директивы:
---
credentials('credential-id')
---

---<Declarative pipeline>---
   environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
    }
---

---<Scripted pipeline>---

---

[2] 
********************************
* Переменные окружения Jenkins *
********************************

(1)  Чтобы увидеть список переменных окружения, нужно открыть веб-страницу:
---
${YOUR_JENKINS_HOST}/env-vars.html
---
, где ${YOUR_JENKINS_HOST} - адрес контроллера Jenkins (master server).

  Переменная окружения Jenkins
    - это глобальная переменная, открытая через глобальную переменную env и используемая в ЛЮБОМ МЕСТЕ Jenkinsfile.

[!]  Любое значение, хранящееся в переменной env, сохраняется как тип String.

  Переменные окружения могут быть установлены:
    -> на верхнем уровне пайплайна (top-level) ||
    -> на уровне конкретного этапа (stage)     ||
    -> внутри блока script.


(2) Кроме того, мы можем перечислить все переменные окружения, выполнив команду оболочки printenv:
---<Jenkinsfile>---
pipeline {
    agent any

    stages {
        stage("Env Variables") {
            steps {
                sh "printenv"
            }
        }
    }
}
---

*******************************************
* Глобальные свойства (Global Properties) *
*******************************************
  Мы можем установить глобальные свойства, перейдя в раздел:
  Manage Jenkins -> Configure System -> Global properties option
  ("Управление Jenkins -> Настроить систему -> Глобальные настройки: Переменные среды").
  1. Установим флажок "Переменные окружения",
  2. Затем добавим переменные и их соответствующие значения (key:value) в раздел "Список переменных"


##############################################
# Определение переменных среды в Jenkinsfile #
##############################################

  В Jenkinsfile переменные окружения добавляются с помощью директивы environment { }

---<Jenkinsfile (Declarative Pipeline)>---

pipeline {
    //Setting the environment variables DISABLE_AUTH and DB_ENGINE
    environment {
        DISABLE_AUTH = 'true'
        DB_ENGINE    = 'mysql'
    }

}
---

# Такой подход к определению переменных в файле Jenkins полезен для указания скриптов,
# например, файла Make

[!] Директиву environment можно использовать
      1) в блоке Pipeline верхнего уровня
      2) в блоке Pipeline уровня stage

1. Директива environment, используемая в блоке Pipeline верхнего уровня,
   будет применяться КО ВСЕМ steps пайплайна.
2. Директива environment, определенная в рамках stage,
   будет применять заданные переменные окружения только к steps в рамках данного stage.


*************************************************
* Динамическое определение переменных окружения *
*  (Setting environment variables dynamically)  *
*************************************************
#-> https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#setting-environment-variables-dynamically

  Переменные окружения могут быть установлены во время выполнения
  и использоваться:
  -> сценариями shell (sh),
  -> пакетными сценариями Windows (bat)
  -> и сценариями PowerShell (powershell).

  Каждый скрипт может возвращать returnStatus или returnStdout.
# Дополнительная информация о скриптах: https://www.jenkins.io/doc/pipeline/steps/workflow-durable-task-step/

  Ниже приведен пример Declarative Pipeline с использованием sh (shell) с returnStatus и returnStdout.

---< Jenkinsfile (Declarative Pipeline) >---
pipeline {
    agent any                           //#1
    environment {
        // Using returnStdout
        CC = """${sh(
                returnStdout: true,
                script: 'echo "clang"'
            )}"""                       //#2
        // Using returnStatus
        EXIT_STATUS = """${sh(
                returnStatus: true,
                script: 'exit 1'
            )}"""
    }
    stages {
        stage('Example') {
            environment {
                DEBUG_FLAGS = '-g'
            }
            steps {
                sh 'printenv'
            }
        }
    }
}
---
#1: agent должен быть установлен на верхнем уровне pipeline.
    Если agent задан как `agent none`, это приведет к ошибке.

#2: При использовании returnStdout к возвращаемой строке будет добавлен пробел в конце.
    Используйте .trim(), чтобы удалить его.

*************
* EnvInject *
*************
## This plugin is up for adoption! We are looking for new maintainers.
## Visit our Adopt a Plugin initiative for more information.

  Мы можем установить и использовать плагин EnvInject для инъекции переменных окружения во время запуска сборки.
(https://plugins.jenkins.io/envinject/)

  В окне конфигурации сборки мы выбираем опцию "Inject environment variables"
  в комбинированном окне (Combo Box) "Add build step".

  Затем мы можем добавить необходимые переменные окружения в текстовое поле содержимого свойств.
  Например, мы можем указать профиль пользователя:
#-> https://www.baeldung.com/ops/jenkins-environment-variables#envinject  (см. изображение)


**************************************
* Использование переменных окружения *
**************************************

  Jenkins Pipeline предоставляет переменные окружения через глобальную переменную env,
  которая доступна ИЗ ЛЮБОЙ ТОЧКИ Jenkins-файла.

  Полный список переменных окружения, доступных из Jenkins Pipeline, задокументирован здесь:
${YOUR_JENKINS_URL}/pipeline-syntax/globals#en

---<Jenkinsfile (Declarative Pipeline)>---

pipeline {
    agent any
    stages {
        stage('Example') {
            steps {
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
            }
        }
    }
}

---<Jenkinsfile (Scripted Pipeline)>---

node {
    echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
}
---

[!] Внутри этапов Pipeline к переменным окружения рекомендуется обращаться через глобальную переменную env:
---
${env.MY_ENV_VAR}
---

  Можно  использовать сокращенный вариант ${BUILD_NUMBER},
(!)  но этот вариант может смутить некоторых пользователей:
  => в нем упускается контекст, что BUILD_NUMBER берется из переменной окружения,
  а не из параметров: именно ${env.BUILD_NUMBER}, а не ${params.BUILD_NUMBER}


####################################################
# Интерполяция чувствительных переменных окружения #
# Interpolation of sensitive environment variables #
####################################################

(https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#interpolation-of-sensitive-environment-variables)

[!]  Интерполяция строк в Groovy может привести к УТЕЧКЕ ЧУВСТВИТЕЛЬНЫХ ПЕРЕМЕННЫХ ОКРУЖЕНИЯ
     (например, учетных данных, см.: "Работа с учетными данными":
     -> https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#handling-credentials).

  Это происходит потому, что чувствительная переменная окружения будет интерполирована ВО ВРЕМЯ ОЦЕНКИ Groovy,
  и значение переменной окружения может стать доступным РАНЬШЕ, ЧЕМ ПРЕДПОЛАГАЛОСЬ,
  что приведет к утечке чувствительных данных в различных контекстах.

[Пример:]
  рассмотрим чувствительную переменную окружения, переданную на шаг sh:

---<Jenkinsfile (Declarative Pipeline)>---
pipeline {
    agent any
    environment {
        EXAMPLE_CREDS = credentials('example-credentials-id')
    }
    stages {
        stage('Example') {
            steps {
                /* WRONG! */
                sh("curl -u ${EXAMPLE_CREDS_USR}:${EXAMPLE_CREDS_PSW} https://example.com/")
            }
        }
    }
}
---

  Если Groovy выполнит интерполяцию, чувствительное значение будет внедрено непосредственно в аргументы шага sh,
  что, помимо прочего, означает, что литеральное значение будет ВИДНО В КАЧЕСТВЕ АРГУМЕНТА процесса sh на агенте в листингах процессов ОС.

[!] Использование ОДИНАРНЫХ КАВЫЧЕК ВМЕСТО ДВОЙНЫХ при ссылке на эти чувствительные переменные окружения предотвращает этот тип утечки.


(!) Инъекция через интерполяцию
    => Интерполяция строк Groovy может внедрять в командные интерпретаторы неавторизованные команды с помощью специальных символов.
(-> https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#injection-via-interpolation)
