Pipeline: Basic Steps

[sources:]
1) "Pipeline: Basic Steps": https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#pipeline-basic-steps
2) "Jenkins Tutorial – Part 9 – Basic Pipeline Steps": https://kubedemy.io/jenkins-tutorial-part-9-basic-pipeline-steps


##############
# catchError #
##############

  = Поймать ошибку и установить результат сборки как неудачный (failure)
#(https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#catcherror-catch-error-and-set-build-result-to-failure)
<...>


#############
# deleteDir #
#############

<= Рекурсивно удалить текущий каталог из рабочей области (workspace) =>
  Рекурсивно удаляет текущий каталог и его содержимое.
  Символические ссылки и переходы не будут соблюдены, но будут удалены.
  Чтобы удалить определенный каталог рабочей области, оберните шаг deleteDir в шаг dir.

---<Example>---
...
  steps {
    dir('tmp') {
      deleteDir()
    }
  }
...
---


#########
# error #
#########

<= Error signal =>
  Сигнализирует об ошибке.
  Полезно, если вы хотите условно прервать какую-то часть вашей программы.
  Вы также можете просто бросить новое исключение (Exception()),
  но это позволит избежать печати трассировки стека.

message : String
  Сообщение, которое будет выведено в консоль при возникновении ошибки.


##############
# fileExists #
##############

<= Verify if file exists in workspace =>
  Проверяет, существует ли заданный файл на текущем узле.
  Возвращает true | false.
  Этот шаг должен выполняться в контексте node:

---< Scripted Syntax >---
node {
    if (fileExists('src/main/resources/index.html')) {
        echo "File src/main/resources/index.html found!"
    }
}
---

# При использовании декларативного синтаксиса он должен быть запущен на этапе с определенным агентом
# (например, отличным от `agent none`):

---< Declarative Syntax >---
stage ('Check for existence of index.html') {
    agent any # Could be a top-level directive or a stage level directive
    steps {
        script {
            if (fileExists('src/main/resources/index.html')) {
                echo "File src/main/resources/index.html found!"
            }
        }
    }
}
---

file : String

  Аргумент функции (в скобках) = путь к файлу или каталогу для проверки его существования.
  Поддерживаются как абсолютные, так и относительные пути:
    - при использовании ОТНОСИТЕЛЬНОГО ПУТИ он будет относительным к ТЕКУЩЕМУ рабочему каталогу
      (по умолчанию: workspace).
    Поддерживаются пути как для Unix, так и для Windows с использованием разделителя `/`.


isUnix
  = Checks if running on a Unix-like node
  Returns true if enclosing node is running on a Unix-like system (such as Linux or Mac OS X), false if Windows.


# mail: Mail #


#######
# pwd #
#######

<= Определите текущий каталог =>

  Возвращает путь к текущему каталогу в виде строки.
# (используется для возврата текущего рабочего каталога.
#  Он принимает bool аргумент tmp, который создает временный каталог рабочей области задания.)

tmp : boolean (optional)

  Если выбрано, возвращается временный каталог, связанный с текущим путем к каталогу, а не сам путь к каталогу.
  Возвращаемое значение различно для каждого текущего каталога.
  Никакие две директории не могут использовать один и тот же временный каталог.

(*) Это подходящее место для размещения временных файлов, которые не должны загромождать проверку исходного кода;
    локальных репозиториев или кэшей и т. д.

  По умолчанию false.

---<Pipeline. Declarative>---
pipeline {
    agent any
    stages {
        stage("Test") {
            steps {
                dir("sample") {
                    echo pwd()
                }
                dir(pwd(tmp: true)) {
                    echo "Inside the job tmp directory."
                    echo pwd()
                }
            }
        }
    }
}
---

readFile: Read file from workspace
  Reads a file from a relative path (with root in current directory, usually workspace) and returns its content as a plain string.
file : String
Relative (/-separated) path to file within a workspace to read.
encoding : String (optional)
The encoding to use when reading the file. If left blank, the platform default encoding will be used. Binary files can be read into a Base64-encoded string by specifying "Base64" as the encoding.
retry: Retry the body up to N times
Retry the block (up to N times) if any exception happens during its body execution. If an exception happens on the final attempt then it will lead to aborting the build (unless it is caught and processed somehow). User aborts of the build are not caught.
count : int
conditions (optional)
Conditions under which the block should be retried. If none match, the block will fail. If there are no specified conditions, the block will always be retried except in case of user aborts.
Array / List of Nested Choice of Objects
agent
kubernetesAgent
nonresumable
sleep: Sleep
Simply pauses the Pipeline build until the given amount of time has expired. Equivalent to (on Unix) sh 'sleep …'. May be used to pause one branch of parallel while another proceeds.
time : int
The length of time for which the step will sleep.
unit (optional)
The unit for the time parameter. Defaults to 'SECONDS' if not specified.
Values: NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS


step: General Build Step
  Это специальный шаг, который позволяет вызывать builders или post-build actions (как в freestyle или подобных проектах),
  в общем, «build step».

  Просто выберите build step, который нужно вызвать, из выпадающего списка и настройте его как нужно.

Обратите внимание, что в списке будут показаны только шаги, совместимые с Pipeline.

Чтобы использовать этот шаг, необходимо указать класс делегата, например step([$class: 'A3Builder']).

Переведено с помощью DeepL.com (бесплатная версия)
timeout: Enforce time limit
Executes the code inside the block with a determined time out limit. If the time limit is reached, an exception (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) is thrown, which leads to aborting the build (unless it is caught and processed somehow).
time : int
The length of time for which this step will wait before cancelling the nested block.
activity : boolean (optional)
Timeout after no activity in logs for this block instead of absolute duration. Defaults to false.
unit (optional)
The unit of the time parameter. Defaults to 'MINUTES' if not specified.
Values: NANOSECONDS, MICROSECONDS, MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS
tool: Use a tool from a predefined Tool Installation
Binds a tool installation to a variable (the tool home directory is returned). Only tools already configured in Configure System are available here. If the original tool installer has the auto-provision feature, then the tool will be installed as required.
name : String
The name of the tool. The tool name must be pre-configured in Jenkins under Manage Jenkins → Global Tool Configuration.
type : String (optional)
Select the type from the available built-in tool providers.
unstable: Set stage result to unstable
Prints a message to the log and sets the overall build result and the stage result to UNSTABLE. The message will also be associated with the stage result and may be shown in visualizations.
message : String
A message that will be logged to the console. The message will also be associated with the stage result and may be shown in visualizations.
unstash: Restore files previously stashed
Restores a set of files previously stashed into the current workspace.
name : String
Name of a previously saved stash.
waitUntil: Wait for condition
Runs its body repeatedly until it returns true. If it returns false, waits a while and tries again. (Subsequent failures will slow down the delay between attempts up to a maximum of 15 seconds.) There is no limit to the number of retries, but if the body throws an error that is thrown up immediately.
initialRecurrencePeriod : long (optional)
Sets the initial wait period, in milliseconds, between retries. Defaults to 250ms.
Each failure will slow down the delay between attempts up to a maximum of 15 seconds.
quiet : boolean (optional)
If true, the step does not log a message each time the condition is checked. Defaults to false.
warnError: Catch error and set build and stage result to unstable
Executes its body, and if an exception is thrown, sets the overall build result and the stage result to UNSTABLE, prints a specified message and the thrown exception to the build log, and associates the stage result with the message so that it can be displayed by visualizations.
Equivalent to catchError(message: message, buildResult: 'UNSTABLE', stageResult: 'UNSTABLE').

message : String
A message that will be logged to the console if an error is caught. The message will also be associated with the stage result and may be shown in visualizations.
catchInterruptions : boolean (optional)
If true, certain types of exceptions that are used to interrupt the flow of execution for Pipelines will be caught and handled by the step. If false, those types of exceptions will be caught and immediately rethrown. Examples of these types of exceptions include those thrown when a build is manually aborted through the UI and those thrown by the timeout step. Defaults to true.
withEnv: Set environment variables
Sets one or more environment variables within a block. The names of environment variables are case-insensitive but case-preserving, that is, setting `Foo` will change the value of `FOO` if it already exists. Environment variables are available to any external processes spawned within that scope. For example:
node {
  withEnv(['MYTOOL_HOME=/usr/local/mytool']) {
    sh '$MYTOOL_HOME/bin/start'
  }
}
(Note that here we are using single quotes in Groovy, so the variable expansion is being done by the Bourne shell, not Jenkins.)

See the documentation for the env singleton for more information on environment variables.

overrides : Array / List of String
A list of environment variables to set, each in the form VARIABLE=value or VARIABLE= to unset variables otherwise defined. You may also use the syntax PATH+WHATEVER=/something to prepend /something to $PATH.
wrap: General Build Wrapper
This is a special step that allows to call build wrappers (also called "Environment Configuration" in freestyle or similar projects). Just select the wrapper to use from the dropdown list and configure it as needed. Everything inside the wrapper block is under its effect.

Note that only Pipeline-compatible wrappers will be shown in the list.

To use this step you need to specify a delegate class, e.g wrap([$class: 'AddWorkItemOnFailure']).
writeFile: Write file to workspace
Write the given content to a named file in the current directory.
file : String
Relative path of a file within the workspace.
text : String
The data to write in the file.
encoding : String (optional)
The target encoding for the file. If left blank, the platform default encoding will be used. If the text is a Base64-encoded string, the decoded binary data can be written to the file by specifying "Base64" as the encoding.
archive: Archive artifacts
Archives build output artifacts for later use. As of Jenkins 2.x, this step is deprecated in favor of the more configurable archiveArtifacts.
includes : String
Include artifacts matching this Ant style pattern. Use a comma separated list to add more than one expression.
excludes : String (optional)
Exclude artifacts matching this Ant-style pattern.
Use a comma-separated list to add more than one expression.
getContext: Get contextual object from internal APIs
Obtains a contextual object as in StepContext.get; cf. withContext. Takes a single type argument. Example:

getContext hudson.FilePath
For use from trusted code, such as global libraries, which can manipulate internal Jenkins APIs.

type
Type: java.lang.Class<?>
unarchive: Copy archived artifacts into the workspace
mapping (optional)
Type: java.util.Map<java.lang.String, java.lang.String>
withContext: Use contextual object from internal APIs within a block
Wraps a block in a contextual object as in BodyInvoker.withContext; cf. getContext. Takes a single context argument plus a block. Example:

withContext(new MyConsoleLogFilter()) {
    sh 'process'
}
Automatically merges its argument with contextual objects in the case of ConsoleLogFilter, LauncherDecorator, and EnvironmentExpander.

For use from trusted code, such as global libraries, which can manipulate internal Jenkins APIs.

Do not attempt to pass objects defined in Groovy; only Java-defined objects are supported. Really you should avoid using this and getContext and just define a Step in a plugin instead.