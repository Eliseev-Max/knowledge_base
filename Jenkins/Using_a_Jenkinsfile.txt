(https://www.jenkins.io/doc/book/pipeline/jenkinsfile/)
Использование Jenkinsfile

Наиболее полезные шаги, общие шаблоны и некоторые нетривиальные примеры Jenkinsfile

Преимущества Jenkinsfile, располагающегося в системе контроля версий:
	• возможность проверки кода и итераций в Pipeline
	• журнал аудита Pipeline
	• единый источник достоверной информации для Pipeline, который могут просматривать и редактировать несколько участников проекта
	
Pipeline поддерживает 2 синтаксиса: Декларативный (Declarative) и Скриптовый (Scripted)
Оба синтаксиса поддерживают Continuous Delivery (CD)-пайплайны.

Jenkinsfile — это текстовый файл, содержащий определение Jenkins Pipeline-а и зарегистрированный в системе управления версиями.

Декларативный pipeline - это относительно недавнее дополнение к Jenkins Pipeline, которое представляет более упрощенный и
самодостаточный синтаксис поверх подсистем pipeline.

#####################################################################################################

Jenkinsfile (Declarative Pipeline)		# Минимально необходимая структура для реализации pipeline

pipeline {
    agent any						# выделяет исполнителя и рабочую область (workspace) в Pipeline

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

	* директива agent:
		указывает, где будет выполняться весь pipeline или определенный этап (stage) в среде Jenkins 
		(зависит от того, где размещен раздел agent)
		ОБЯЗАТЕЛЬНО! agent определён на верхнем уровне внутри блока pipeline (Top-Level)
		Произвольно: на уровне этапа (stage)
		По умолчанию директива агента гарантирует, что исходный репозиторий извлечен и доступен для шагов на последующих этапах.
	
	* директивы stages (stage) и steps также необходимы для корректного (валидного) составления Declarative Pipeline,
	  поскольку они указывают Jenkins-у, что выполнять и какой этап должен быть выполнен.

#####################################################################################################

Настройка Pipeline с помещённым в SCM (Source Code Management, система контроля версий) Jenkinsfile
  * Jenkinsfile должен находиться в корне директории проекта
	Преднастройка Pipeline через классический пользовательский интерфейс Jenkins:
		1. Если необходимо, убедиться, что мы вошли в систему в Jenkins
		2. Домашняя страница Jenkins (Dashboard) → New Item
		3. Задать имя для своего Pipeline-проекта
		   (ВНИМАНИЕ! Jenkins использует заданное имя для создания директорий на диске.
		   Рекомендуется избегать использования пробелов в именах элементов, так как это может выявить ошибки в сценариях,
		   которые неправильно обрабатывают пробелы в путях к каталогам)
		4. Прокрутить вниз → кликнуть по пункту Pipeline → кликнуть по кнопке OK, чтобы перейти на страницу конфигурации Pipeline
		5. ...

#############################################################
#▼ Из раздела "Getting started with Pipeline"			   ▼#
# https://www.jenkins.io/doc/book/pipeline/getting-started/ #
#############################################################

Встроенная документация (Built-in documentation)
	Pipeline поставляется со встроенными функциями документирования, упрощающими создание конвейеров различной сложности.
	Эта встроенная документация создается и обновляется автоматически на основе подключаемых модулей, установленных в экземпляре Jenkins.

	Встроенную документацию можно найти по адресу ${YOUR_JENKINS_URL}/pipeline-syntax.
	Эта же документация также связана как Синтаксис pipeline на боковой панели для любого настроенного проекта Pipeline.

Генератор фрагментов (сниппетов)
	Встроенная утилита «Генератор фрагментов» полезна для 
		- создания фрагментов кода для отдельных шагов,
		- обнаружения новых шагов, предоставляемых плагинами, 
		- экспериментов с различными параметрами для определенного шага.

	Генератор фрагментов динамически заполняется списком шагов, доступных для экземпляра Jenkins.
	Количество доступных шагов зависит от установленных подключаемых модулей, которые явно предоставляют шаги для использования в Pipeline.

	Чтобы сгенерировать пошаговый сниппет с помощью генератора сниппетов:
		1. перейти по ссылке синтаксиса pipeline (упомянутой выше) из настроенного конвейера или по адресу ${YOUR_JENKINS_URL}/pipeline-syntax;
		2. выбрать нужный шаг в раскрывающемся меню Sample Step;
		3. использовать динамически заполняемую область под раскрывающимся списком Sample Step, чтобы настроить выбранный шаг.
		4. нажать «Создать скрипт конвейера», чтобы создать фрагмент конвейера, который можно скопировать и вставить в pipeline.
	Получить доступ к дополнительной информации и/или документации о выбранном шаге → щёлкнуть значок справки (?)
	
Справочник по глобальным переменным

	В дополнение к Генератору фрагментов, который отображает только шаги, Pipeline также предоставляет встроенную «Глобальную ссылку на переменную».
	+ Сходства с генератором сниппетов:
		глобальная ссылка на переменную также динамически заполняется плагинами.
	* Отличие от генератора фрагментов: 
		справочник по глобальным переменным содержит только документацию по переменным, предоставляемым Pipeline или подключаемыми модулями,
		которые доступны для Pipelines.

	Переменные, предоставляемые по умолчанию в Pipeline:
	
		• env
		  предоставляет переменные среды.
		  Пример: env.PATH; env.BUILD_ID.
		  Справочник по встроенным глобальным переменным: ${YOUR_JENKINS_URL}/pipeline-syntax/globals#env
		  (здесь содержится полный и актуальный список переменных среды, доступных в Pipeline)
		  
		• params
		  предоставляет все параметры, определённые для Pipeline, как карту только для чтения.
		  Пример: params.MY_PARAM_NAME
		  
		• currentBuild
		  может использоваться для получения информации о выполняющемся в данный момент конвейере с такими свойствами,
		  как currentBuild.result, currentBuild.displayName и т. д.
		  Полный и актуальный список свойств, доступных в currentBuild: ${YOUR_JENKINS_URL}/pipeline-syntax/globals
	
Генератор декларативных директив (Declarative Directive Generator)
	Хотя генератор фрагментов помогает генерировать шаги для скриптового конвейера или блока шагов на этапе декларативного конвейера,
	он не распространяется на разделы и директивы, используемые для определения декларативного pipeline.
	В этом помогает утилита «Генератор декларативных директив».
	Генератор директив позволяет
		• выбрать декларативную директиву,
		• настроить ее в форме
		• сгенерировать конфигурацию для этой директивы, которую затем можно использовать в декларативном конвейере.

	Чтобы сгенерировать декларативную директиву с помощью генератора декларативной директивы:
		1.1 перейдите к ссылке «Синтаксис конвейера» (см. выше) из настроенного конвейера;
		1.2 щелкните ссылку «Генератор декларативных директив» на боковой панели (или перейдите непосредственно к ${YOUR_JENKINS_URL}/directive-generator)
		2.  выберите нужную директиву в выпадающем меню;
		3. используйте динамически заполняемую область под раскрывающимся списком для настройки выбранной директивы;
		4. нажмите «Создать директиву», чтобы создать конфигурацию директивы для копирования в конвейер.
	
	Генератор директив может генерировать конфигурацию для вложенных директив, таких как условия внутри директивы when, НО не может генерировать шаги конвейера.
	К содержимому директив, содержащих шаги, например шаги внутри stage или условия, такие как всегда или сбой внутри поста, генератор директив вместо этого добавляет комментарий-заполнитель. Вам все равно придется добавлять шаги в конвейер вручную.

#############################################################
#############################################################
#############################################################

Скриптовый Pipeline

	Jenkinsfile (Scripted Pipeline)
	node {
		checkout scm 
		/* .. snip .. */
	}

Разбор Scripted Pipeline
1. node - первый ключевой шаг в создании Scripted Pipeline.
   Посредством node назначаются исполнитель и рабочая область для Pipeline
2. Внутри node первым действием будет проверка исходного кода для текущего проекта.
   Jenkinsfile извлекается непосредственно из системы управления версиями,
   Pipeline предоставляет быстрый и простой способ доступа к нужной версии исходного кода. 
3. На шаге checkout проверяется код из SCM;
   scm - специальная переменная, которая реализует в шаге checkout клонирование конкретной ревизии, инициировавшей запуск Pipeline.

Сборка (Первый этап)
	
	Jenkinsfile не является заменой существующего инструмента сборки, такого как GNU/Make, Maven, Gradle и т. д.
	Скорее Jenkins -это связующая прослойка для объединения нескольких этапов жизненного цикла разработки проекта
	(сборка, тестирование, развертывание и т. д.)
	Выполнение консольных команд ОС (интерпретатор командной строки):
		• для Linux: 	sh
		• для Windows:	bat
	
Тестирование	[stage ('Test')]

Развёртывание	[stage ('Deploy')]
	

	also:
https://www.jenkins.io/doc/book/pipeline/jenkinsfile/	-	Using a Jenkinsfile
https://www.jenkins.io/doc/book/pipeline/syntax/		-	Pipeline Syntax
https://www.jenkins.io/doc/book/pipeline/docker/		-	Using Docker with Pipeline