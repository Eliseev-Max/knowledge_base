{sources:
	1. https://git-scm.com/docs/git-diff
	2. https://www.atlassian.com/ru/git/tutorials/saving-changes/git-diff
}

git diff  - показать изменения между коммитами, коммит и рабочее дерево и т.д.

git diff (==сравнение) - это функция, анализирующая два входных набора данных и отображающая различия между ними.
git diff представляет собой многоцелевую команду Git, которая инициирует функцию сравнения источников данных Git — коммитов, веток, файлов и т. д.

Когда git diff выведет информацию?
	→ Если в файлы репозитория внесены изменения и не добавлены с помощью git add (не проиндексированы)
	1. Создать локальный репозиторий: $ git init .
	2. Создать/скопировать в директорий репозитория файл (new_file.txt)
	3. Добавить файл к репозиторию (проиндексировать): git add new_file.txt
	4. Внести изменения в файл
	5. выполнить $ git diff

Что выводит git diff?
	1. Входные данные сравнения (diff --git a/new_file.txt b/new_file.txt)
	2. Метаданные  (index 4491a1e..82e8294 100644)
	3. Маркеры изменений 
		(--- a/new_file.txt
		 +++ b/new_file.txt
		)
	4. Сравниваемые фрагменты 
		- это список сравниваемых фрагментов.
		При сравнении отображаются только разделы файла, в которых есть изменения.
		(@@ -1 +1,2 @@
		 example text
		+Add this text after 'git add' command
		)
		К началу каждого фрагмента добавляется заголовок, ограниченный символами @@.
		Заголовок кратко описывает изменения в файле. В нашем простом примере заголовок -1 +1 означает, что имеются изменения в первой строке.
		Пример заголовка в более сложном случае:
		@@ -34,6 +34,8 @@
		это означает: было извлечено 6 строк начиная со строки 34. Кроме того, после строки 34 было добавлено 8 строк.

Подсветка изменений:
	$ git diff --color-words
https://www.atlassian.com/ru/git/tutorials/saving-changes/git-diff

###################################################################################################################################
Обзор нескольких форм команды:
	git diff [<options>] [<commit>] [--] [<path>…​]
	git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]
	git diff [<options>] [--merge-base] <commit> [<commit>…​] <commit> [--] [<path>…​]
	git diff [<options>] <commit>…​<commit> [--] [<path>…​]
	git diff [<options>] <blob> <blob>
	git diff [<options>] --no-index [--] <path> <path>

Показать изменения
	► между рабочим деревом и индексом или деревом,
	► между индексом и деревом,
	► между двумя деревьями,
	► в результате слияния, 
	► между двумя объектами blob   или
	► между двумя файлами на диске

$ git diff [<options>] [--] [<path>…​]
	- просмотр изменений, которые мы внесли относительно индекса (место хранения для следующего коммита).
	Другими словами, различия - это то, что вы могли бы проиндексировать (указать Git'у добавить в индекс), но вы этого не сделали.
	Вы можете застейджить эти изменения, используя git-add.

$ git diff [<options>] --no-index [--] <path> <path>
	- сравнение двух заданных путей в файловой системе.
	Можно опустить опцию --no-index, если команда выполняется в рабочем дереве, контролируемом Git'ом, и хотя бы один из путей указывает за пределы рабочего дерева,
		или
	если команда выполняется вне рабочего дерева, контролируемого Git'ом.
	Эта форма подразумевает --exit-code.

$ git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>…​]
	- для просмотра изменений, которые мы расположили для следующего коммита относительно именованного <commit>.
	Обычно нам нужно сравнение с последним коммитом, поэтому если не указать <commit>, то по умолчанию будет указано HEAD.
	Если HEAD не существует (например, нерождённые ветви) и <commit> не указан, то будут показаны все поэтапные изменения.
	--staged является синонимом --cached.

    Если указано --merge-base, вместо использования <commit> используется база слияния <commit> и HEAD.
	$ git diff --cached --merge-base A 
		<= эквивалентно =>
	$ git diff --cached $(git merge-base A HEAD).
