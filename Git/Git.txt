Система контроля версий Git

Как система git воспринимает данные?
- Данные представляют собой набор снимков состояния миниатюрной файловой системы.
‼ Git воспринимает данные скорее как поток снимков состояния (stream of snapshots)

Когда мы создаём новую версию или сохраняем состояние проекта в Git,
→ делается снимок всех файлов в конкретный момент времени, и сохраняется ссылка на этот снимок.
Если файлы по состоянию на момент снимка системы не изменялся, → сохраняется ссылка на их ранее сохранённые версии.

Для осуществления практически всех операций системе Git требуются только локальные файлы и ресурсы.
Работа производится с локальной базой данных; (не нужно обращаться к серверу с целью получить историю изменений)

В системе Git для всех данных перед сохранением вычисляется контрольная сумма, по которой они впоследствии ищутся.
‼ Сохранить содержимое файла или  папки таким образом, чтобы система Git об этом не узнала, невозможно.
Эта функциональность  встроена в Git на самом низком уровне и является неотъемлемым принципом ее работы. 

Механизм, которым пользуется Git для вычисления контрольных сумм, называется хешем SHA-1.
Это строка из 40 символов, включающая в себя числа в HEX-системе (16-ричной) и вычисляемая на основе содержимого файла или структуры папки в Git.
По сути Git сохраняет данные в БД не по именам файлов, а по хешу их содержимого.

Три состояния
	Файлы Git могут находиться в трёх основных состояниях:
	  • зафиксированное (commited)
		- данные надёжно сохранены в локальной базе
		
	  • модифицированное (modified)
		- изменения уже внесены в файл, но пока не зафиксированы в базе данных
		
	  • индексированное (staged)
	    - мы  пометили текущую версию модифицированного файла как предназначенную для следующей фиксации
	
	  ○ неотследиваемый (untracked)
	    - находится в рабочей дирректории, но отсутствует в версии HEAD или в области подготовленных файлов (git не знает о файле)

♦ Папка .git - это место, где Git хранит метаданные и объектную базу данных проекта.
  Копируется при дублировании репозитория с другого компьютера.

♦ Рабочая папка — это место, куда выполняется выгрузка одной из версий проекта.
  Эти файлы извлекаются из сжатой базы данных в папке Git и помещаются на жесткий диск вашего компьютера, готовые к использованию или редактированию.

♦ Область индексирования — это файл, обычно находящийся в папке Git и хранящий информацию о том, что именно войдет в следующую операцию фиксации.
  Иногда ее еще называют промежуточной областью.

[WORKDIR: <file>] → {редактируем <file>} → [WORKDIR: <edited_file>] → {git add <edited_file> (индексируем файл, добавляя его снимок в область индексирования)} →
  → {git commit (выполняем фиксацию: берём файлы из области индексирования и сохраняя снимки в /.git)}


Первая настройка Git. Работа с git config
	Инструмент git config
	  - позволяет получать и устанавливать переменные конфигурации, которые задают все аспекты внешнего вида и работы Git.
	Переменные хранятся в разных местах:
	• /etc/gitconfig
		- содержит значения, действующие для всех пользователей системы и всех их репозиториев.
		git config --system → чтение и запись для этого конкретного файла
		
	• ~/.gitconfig (~/.config/git/config)
		- связан с конкретным пользователем
		git config --global → чтение и запись для этого файла
		
	• .git/config
		- действуют только на конкретный репозиторий
	
	.git/config → [переопределяет] → ~/.gitconfig (~/.config/git/config) → [переопределяет] → /etc/gitconfig
	
	Редактирование файла .gitconfig НАПРЯМУЮ в текстовом редакторе
		$ git config --global --edited_file
	
	Редактирование отдельных полей
		$ git config --global <поле> <значение>

	Указание идентификатора пользователя
		$ git config --global user.name "Username"
		$ git config --global user.email username@mail.ru
	
	Выбор редактора (для сообщений в Git)
		$ git config --global core.editor sublime
	
	Указать шаблон, который будет использоваться при каждом коммите
		$ git config --global commit.template
	
	‼ Добавление алиасов
		$ git config --global alias.st "status -s"
		# вместо git status -s теперь git st
			
	Добавление mergetool
		$ git config --global merge.tool <утилита>
		$ git config --global mergetool.<утилита>.path "/path/to/tool"
	
	Проверка настроек
		$ git config --list			# вывод всех обнаруженных на текущий момент параметров
		$ git config user.name  → выведет имя пользователя
	
	Справочная информация
		$ git help <команда>
		$ git <команда> --help
		$ man git-<команда>


Работа с репозиторием git

	$ git init  	- инициальзация нового репозитория
	$ git clone <address>	- клонирование существующего репозитория

	$ git status  - 	 отображает все файлы, которые были изменены
	$ git status -s		 более лаконичный вывод (по строке на файл)
	## файл не отслеживается → ??
	## файл был изменён 	 → <имя красным цветом>
	## файл подготовлен 	 → <имя зелёным цветом>
	
	Посмотреть сами изменения:
		$ git diff				- сравнение рабочей дирректории с областью подготовленных файлов;
		$ git diff --staged		- сравнение области подготовленных файлов с HEAD
		$ git diff <file/folder> - показать изменения только для указанных файлов
	
	git commit обновляет HEAD новым коммитом, который делает снимки файлов в области подготовленных файлов
	
Игнорирование файлов
	Какие файлы могут игнорироваться:
		● файлы с чувствительной информацией (пароли);
		● большие бинарные файлы;
		● файлы, специфичные для ОС/IDE + кэш
	
	Шаблоны поиска файла .gitignore
		● /___ — позволяет избежать рекурсивности — соответствует файлам только в текущей директории;
		● __/ — соответствует всем файлам в указанной директории;
		● ___ — соответствует всем файлам с указанным окончанием;
		● ! — игнорирование файлов, попадающих под указанный шаблон;
		● [__] — соответствует любому символу из указанных в квадратных скобках;
		● ? — соответствует любому символу;
		● /**/ — соответствует вложенным директориям, 
		например, a/**/d соответствует a/d, a/b/d, a/b/c/d и т. д.
	

Удалённые репозитории
	$ git remote -v  - вывести список удалённых репозиториев, которые мы отслеживаем, и имена, которые мы им присвоили
	Удалённому серверу (репозиторий которого мы сделали git clone) присваивается имя origin
	
	Наиболее популярные команды:
	  $ git remote add <имя> <url>  - добавляет удалённый репозиторий с заданным именем;
	  $ git remote remove <имя>  - удаляет удалённый репозиторий с заданным именем;
	  $ git remote rename <старое_имя> <новое_имя>  - переименовывает удалённый репозиторий;
	  $ git remote set-url <имя> <url>  - присваивает репозиторию с именем новый адрес;
	  $ git remote show <имя>  - показывает информацию о репозитории.
	
	Команды для работы с удалёнными ветками
		$ git fetch <имя> <ветка> — получает данные из ветки заданного репозитория, но не сливает изменения;
		$ git pull <имя> <ветка> — сливает данные из ветки заданного репозитория;
		$ git push <имя> <ветка> — отправляет изменения в ветку заданного репозитория.
								   Если локальная ветка уже отслеживает удалённую, то можно использовать просто git push или git pull.
	

Коммиты (commits)
	Чтобы отслеживать историю, Git хранит указатель HEAD, который указывает на первый коммит.
	Мы можем ссылаться на коммит:
	  ► через его контрольную сумму (хеш),
	  ► через его позицию относительно HEAD
    	  (например HEAD~4 ссылается на коммит, который находится 4 коммитами ранее HEAD)
	
	Перенос отдельного коммита
		$ git cherry-pick
	
	Получить определённые коммиты, из которых мы хотим выбирать:
		$ git log <основная_ветка>..<тематическая>
	
  Откат коммитов. revert и reset
    $ git revert <коммит>  = создать новый коммит, отменяющий изменения, но сохраняющий историю
	
	$ git reset <коммит>  = перемещает указатель HEAD, предоставляя более чистую историю (будто этого коммита и не было вовсе)
	