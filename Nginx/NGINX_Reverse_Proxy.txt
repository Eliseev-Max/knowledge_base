NGINX Reverse Proxy
(https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/)

В этой статье описывается базовая настройка прокси-сервера.
Вы узнаете:
  ✓ как передавать запрос из NGINX на прокси-серверы по различным протоколам,
  ✓ как изменять заголовки клиентских запросов, которые отправляются на прокси-сервер,
  ✓ как настраивать буферизацию ответов, поступающих с прокси-серверов.

[Для чего обычно применяется проксирование?]
  ➜ для распределения нагрузки между несколькими серверами,
  ➜ для беспрепятственного показа содержимого различных веб-сайтов
  ➜ для передачи запросов на обработку серверам приложений по протоколам, отличным от HTTP.


Передача запроса на проксируемый сервер (Proxied Server)

  Когда NGINX проксирует запрос, он
    1) отправляет его на указанный прокси-сервер,
    2) получает ответ  и
    3) отправляет его обратно клиенту.

Можно проксировать запросы
  ✓ на HTTP-сервер (другой сервер NGINX или любой другой сервер)
    <или>
  ✓ на не-HTTP-сервер (на котором может быть запущено приложение,
    разработанное с помощью определенного фреймворка, например PHP или Python) по определенному протоколу.
    Поддерживаются такие протоколы, как FastCGI, uwsgi, SCGI и memcached.


Чтобы передать запрос HTTP-прокси-серверу, директива proxy_pass указывается внутри местоположения.
Например:

-->
location /some/path/ {
    proxy_pass http://www.example.com/link/;
}
<--

# В этом примере все запросы, обрабатываемые в этом месте, передаются на прокси-сервер по указанному адресу.
# Этот адрес может быть указан как
#   ✓ доменное имя или
#   ✓ IP-адрес.
# Адрес может также включать порт:

-->
location ~ \.php {
    proxy_pass http://127.0.0.1:8000;
}
<--

[Обратите внимание:]
  в первом примере за адресом проксируемого сервера следует URI `/link/`.
(!) Если URI указан вместе с адресом, он заменяет ту часть URI запроса, которая соответствует параметру location.

[Например:]
  здесь запрос с URI = /some/path/page.html  -(будет проксирован на)-> http://www.example.com/link/page.html.
  Если адрес указан без URI или невозможно определить часть URI, которую нужно заменить,
  передается полный URI запроса (возможно, измененный).


Чтобы передать запрос на не-HTTP прокси-сервер, следует использовать соответствующую директиву **_pass:
  ● fastcgi_pass
    -> передает запрос на сервер FastCGI

  ● uwsgi_pass
    -> передает запрос на сервер uwsgi

  ● scgi_pass
    -> передает запрос на сервер SCGI

  ● memcached_pass
    -> передает запрос на сервер memcached


[Обратите внимание]
  в этих случаях правила указания адресов могут отличаться.

  Также может потребоваться передать серверу дополнительные параметры
(подробнее см. справочную документацию:
  https://nginx.org/en/docs/?_ga=2.228856092.1839600882.1730115003-1073240226.1730115003
).


[!] Директива proxy_pass также может указывать на ИМЕНОВАННУЮ ГРУППУ СЕРВЕРОВ.
#(https://nginx.org/en/docs/http/load_balancing.html?&_ga=2.170414496.1839600882.1730115003-1073240226.1730115003#algorithms)
    В этом случае запросы распределяются между серверами группы в соответствии с указанным методом.

********************************
* Передача заголовков запросов *
********************************

  По умолчанию NGINX переопределяет два поля заголовка в проксированных запросах,
    = "Host" и "Connection",
  и удаляет поля заголовка, значения которых являются пустыми строками.
  
  "Host" устанавливается в переменную $proxy_host,
  "Connection" -> в значение close.

  Чтобы изменить эти настройки, а также другие поля заголовков, используйте директиву proxy_set_header.
  Эта директива может быть указана в location или выше.
  Она также может быть указана в контексте конкретного server или в блоке http.

Например:

-->
location /some/path/ {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass http://localhost:8000;
}
<--
# В данной конфигурации поле "Host" установлено в переменную $host.

  Чтобы поле заголовка не передавалось проксируемому серверу, установите его в пустую строку следующим образом:

-->
location /some/path/ {
    proxy_set_header Accept-Encoding "";
    proxy_pass http://localhost:8000;
}
<--

*********************
* Настройка буферов *
*********************

  По умолчанию NGINX буферизирует ответы от проксированых серверов.
  Ответ
    хранится во внутреннем буфере
    и не отправляется клиенту до тех пор, пока не будет получен весь ответ.

  Буферизация помогает оптимизировать работу с медленными клиентами, которые могут тратить время проксированного сервера,
  если ответ передается от NGINX к клиенту синхронно.

  Однако при включенной буферизации NGINX позволяет прокси-серверу быстро обрабатывать ответы,
  а NGINX хранит их столько времени, сколько нужно клиентам для их загрузки.

   Директива, которая отвечает за включение и отключение буферизации, = proxy_buffering.
#(https://nginx.org/en/docs/http/ngx_http_proxy_module.html?&_ga=2.234035742.1839600882.1730115003-1073240226.1730115003#proxy_buffering)
   По умолчанию она имеет значение on => буферизация включена.

   Директива proxy_buffers управляет размером и количеством буферов, выделяемых для запроса.
   Первая часть ответа от прокси-сервера хранится в отдельном буфере,
   размер которого задается с помощью директивы proxy_buffer_size.
   Эта часть обычно содержит сравнительно небольшой заголовок ответа и может быть сделана меньше, чем буферы для остальной части ответа.

   В следующем примере
     1) количество буферов по умолчанию увеличено,
     2) а размер буфера для первой части ответа сделан меньше, чем по умолчанию:

-->
location /some/path/ {
    proxy_buffers 16 4k;
    proxy_buffer_size 2k;
    proxy_pass http://localhost:8000;
}
<--

Если буферизация отключена, ответ отправляется клиенту синхронно, пока он получает его от проксируемого сервера. Такое поведение может быть желательно для быстрых интерактивных клиентов, которым необходимо начать получать ответ как можно быстрее. Чтобы отключить буферизацию в определенном месте, поместите директиву proxy_buffering в место с параметром off, как показано ниже:

-->
location /some/path/ {
    proxy_buffering off;
    proxy_pass http://localhost:8000;
}
<--
# В этом случае NGINX использует только буфер, настроенный в proxy_buffer_size, для хранения текущей части ответа.

Часто обратный прокси используется для обеспечения балансировки нагрузки.
Узнайте,
  ✓ как повысить мощность,
  ✓ производительность  и
  ✓ сосредоточиться на своих приложениях
  с помощью быстрого развертывания в бесплатной электронной книге:
"Пять причин выбрать программный балансировщик нагрузки".
(https://www.nginx.com/resources/library/five-reasons-choose-software-load-balancer/?_ga=2.174264610.1839600882.1730115003-1073240226.1730115003)


******************************
* Выбор исходящего IP-адреса *
******************************

  Если ваш прокси-сервер имеет несколько сетевых интерфейсов,
  иногда вам может потребоваться выбрать определенный IP-адрес источника для подключения к прокси-серверу или восходящему потоку (upstream).
  Это может быть полезно, если прокси-сервер за NGINX настроен на прием соединений из определенных IP-сетей или диапазонов IP-адресов.
  Укажите директиву proxy_bind и IP-адрес необходимого сетевого интерфейса:

-->
location /app1/ {
    proxy_bind 127.0.0.1;
    proxy_pass http://example.com/app1/;
}

location /app2/ {
    proxy_bind 127.0.0.2;
    proxy_pass http://example.com/app2/;
}
<--

IP-адрес также может быть указан с помощью переменной.
Например,
  в переменной $server_addr передается IP-адрес сетевого интерфейса (сервера), принявшего запрос:

-->
location /app3/ {
    proxy_bind $server_addr;
    proxy_pass http://example.com/app3/;
}
<--

# Вычисление значения этой переменной обычно требует одного системного вызова.
# Чтобы избежать системного вызова, директивы listen должны указывать адреса и использовать параметр bind.