How nginx processes a request
(Как nginx обрабатывает запрос)
# перевод статьи: https://nginx.org/en/docs/http/request_processing.html

******************************
* Name-based virtual servers *
******************************

Сначала nginx решает, какой сервер должен обработать запрос.

# Начнем с простой конфигурации,
# в которой все три виртуальных сервера слушают порт *:80:

---<Simple_config>---
server {
    listen      80;
    server_name example.org www.example.org;
    ...
}

server {
    listen      80;
    server_name example.net www.example.net;
    ...
}

server {
    listen      80;
    server_name example.com www.example.com;
    ...
}
//#END#

В этой конфигурации nginx:
  ➜ проверяет только поле заголовка запроса "Host",
     чтобы определить, на какой сервер следует направить запрос.

  < eсли значение поля заголовка запроса "Host" не совпадает с именем сервера >
||
  < eсли запрос вообще не содержит этого поля заголовка >

:=> то nginx направит запрос на сервер по умолчанию для данного порта.

/*
 В приведенной выше конфигурации сервером по умолчанию является первый сервер
 = это стандартное поведение nginx по умолчанию.
*/

[+] Можно также явно указать, какой сервер должен быть по умолчанию,
    с помощью параметра default_server в директиве listen:

--[default.server.conf]--
server {
    listen      80 default_server;
    server_name example.net www.example.net;
    ...
}
##END##

[Примечание:]
# default_server -> начиная с версии 0.8.21
# default  -> в более ранних версиях

[!] default server = это свойство ПОРТА ПРОСЛУШИВАНИЯ, а НЕ ИМЕНИ СЕРВЕРА.


***************************************************************************
* Как предотвратить обработку запросов с неопределенными именами серверов *
***************************************************************************

  Если запросы без поля заголовка "Host" НЕ ДОЛЖНЫ разрешаться,
  можно определить сервер, который просто отбрасывает такие запросы:

---<drop-requests-without-Host-header-field>---
server {
    listen      80;
    server_name "";
    return      444;
}
##END##

# Здесь имя сервера устанавливается в пустую строку,
# которая будет соответствовать запросам без поля заголовка "Host",
# и возвращается специальный нестандартный код nginx 444, который закрывает соединение.

[Примечание:]
  Начиная с версии 0.8.48, это значение имени сервера используется по умолчанию,
  => поэтому `server_name "" ` может быть опущен.
  В более ранних версиях в качестве имени сервера по умолчанию использовалось имя хоста машины.


*************************************************
* Mixed name-based and IP-based virtual servers *
*************************************************

# Более сложная конфигурация, в которой некоторые виртуальные серверы прослушивают разные адреса:
-->
server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}
#сервером по умолчанию является первый сервер (если не задано явно)

server {
    listen      192.168.1.1:80;
    server_name example.net www.example.net;
    ...
}

server {
    listen      192.168.1.2:80;
    server_name example.com www.example.com;
    ...
}
<--

# В этой конфигурации nginx:
##  1) сначала проверяет IP-адрес и порт запроса на соответствие директивам listen в серверных блоках.
##  2) Затем он проверяет поле заголовка "Host" запроса на соответствие записи server_name в серверных блоках,
##     которые соответствуют IP-адресу и порту.
##     <Если имя сервера НЕ НАЙДЕНО>━➜ запрос будет обработан сервером по умолчанию.

[Например:]
  запрос www.example.com, полученный на порт 192.168.1.1:80,
  будет обработан сервером по умолчанию порта 192.168.1.1:80, то есть первым сервером,
  поскольку для этого порта не определен www.example.com.

Как уже говорилось, сервер по умолчанию - это СВОЙСТВО ПОРТА ПРОСЛУШИВАНИЯ,
и для разных портов могут быть определены разные серверы по умолчанию:

-->
server {
    listen      192.168.1.1:80;
    server_name example.org www.example.org;
    ...
}

server {
    listen      192.168.1.1:80 default_server;
    server_name example.net www.example.net;
    ...
}

server {
    listen      192.168.1.2:80 default_server;
    server_name example.com www.example.com;
    ...
}
<--


[A simple PHP site configuration]
-> https://nginx.org/en/docs/http/request_processing.html#simple_php_site_configuration